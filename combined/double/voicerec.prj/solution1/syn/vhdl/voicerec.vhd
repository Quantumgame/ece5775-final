-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec is
generic (
    C_S_AXI_VOICEREC_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_VOICEREC_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_VOICEREC_INSOUND_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_VOICEREC_INSOUND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_VOICEREC_INSOUND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_VOICEREC_INSOUND_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_VOICEREC_INSOUND_USER_VALUE : INTEGER := 0;
    C_M_AXI_VOICEREC_INSOUND_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_VOICEREC_INSOUND_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_voicerec_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_voicerec_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_voicerec_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_VOICEREC_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_voicerec_ctrl_WVALID : IN STD_LOGIC;
    s_axi_voicerec_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_voicerec_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_VOICEREC_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_voicerec_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_VOICEREC_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_voicerec_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_voicerec_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_voicerec_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_VOICEREC_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_voicerec_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_voicerec_ctrl_RREADY : IN STD_LOGIC;
    s_axi_voicerec_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_VOICEREC_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_voicerec_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_voicerec_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_voicerec_ctrl_BREADY : IN STD_LOGIC;
    s_axi_voicerec_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_voicerec_inSound_AWVALID : OUT STD_LOGIC;
    m_axi_voicerec_inSound_AWREADY : IN STD_LOGIC;
    m_axi_voicerec_inSound_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ADDR_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ID_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_voicerec_inSound_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_voicerec_inSound_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_voicerec_inSound_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_AWUSER_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_WVALID : OUT STD_LOGIC;
    m_axi_voicerec_inSound_WREADY : IN STD_LOGIC;
    m_axi_voicerec_inSound_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_DATA_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_DATA_WIDTH/8-1 downto 0);
    m_axi_voicerec_inSound_WLAST : OUT STD_LOGIC;
    m_axi_voicerec_inSound_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ID_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_WUSER_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_ARVALID : OUT STD_LOGIC;
    m_axi_voicerec_inSound_ARREADY : IN STD_LOGIC;
    m_axi_voicerec_inSound_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ADDR_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ID_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_voicerec_inSound_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_voicerec_inSound_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_voicerec_inSound_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_voicerec_inSound_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ARUSER_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_RVALID : IN STD_LOGIC;
    m_axi_voicerec_inSound_RREADY : OUT STD_LOGIC;
    m_axi_voicerec_inSound_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_DATA_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_RLAST : IN STD_LOGIC;
    m_axi_voicerec_inSound_RID : IN STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ID_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_RUSER_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_BVALID : IN STD_LOGIC;
    m_axi_voicerec_inSound_BREADY : OUT STD_LOGIC;
    m_axi_voicerec_inSound_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_voicerec_inSound_BID : IN STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_ID_WIDTH-1 downto 0);
    m_axi_voicerec_inSound_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_VOICEREC_INSOUND_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of voicerec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "voicerec,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.952400,HLS_SYN_LAT=177866038,HLS_SYN_TPT=none,HLS_SYN_MEM=121,HLS_SYN_DSP=114,HLS_SYN_FF=16490,HLS_SYN_LUT=25900}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_80 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal voicerec_voicerec_ctrl_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal voicerec_inSound_AWVALID : STD_LOGIC;
    signal voicerec_inSound_AWREADY : STD_LOGIC;
    signal voicerec_inSound_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal voicerec_inSound_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal voicerec_inSound_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal voicerec_inSound_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal voicerec_inSound_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_WVALID : STD_LOGIC;
    signal voicerec_inSound_WREADY : STD_LOGIC;
    signal voicerec_inSound_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal voicerec_inSound_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal voicerec_inSound_WLAST : STD_LOGIC;
    signal voicerec_inSound_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_ARVALID : STD_LOGIC;
    signal voicerec_inSound_ARREADY : STD_LOGIC;
    signal voicerec_inSound_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal voicerec_inSound_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal voicerec_inSound_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal voicerec_inSound_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal voicerec_inSound_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal voicerec_inSound_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_RVALID : STD_LOGIC;
    signal voicerec_inSound_RREADY : STD_LOGIC;
    signal voicerec_inSound_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal voicerec_inSound_RLAST : STD_LOGIC;
    signal voicerec_inSound_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_BVALID : STD_LOGIC;
    signal voicerec_inSound_BREADY : STD_LOGIC;
    signal voicerec_inSound_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal voicerec_inSound_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_inSound_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_voicerec_inSound_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal index_1_fu_161_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_1_reg_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal i_1_fu_167_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_181 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal outSound_ce0 : STD_LOGIC;
    signal outSound_we0 : STD_LOGIC;
    signal outSound_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal outSound_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_processChunk_fu_106_ap_start : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_ap_done : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_ap_idle : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_ap_ready : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_sp : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_processChunk_fu_106_ret_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_voicerec_processChunk_fu_106_ret_ce0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_ret_we0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_ret_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_processChunk_fu_106_tmp : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_voicerec_processChunk_fu_106_inputSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_processChunk_fu_106_inputSound_ce0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_106_inputSound_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_classifySound_fu_131_ap_start : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_131_ap_done : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_131_ap_idle : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_131_ap_ready : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_131_result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_voicerec_classifySound_fu_131_result_ce0 : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_131_result_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_classifySound_fu_131_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_ap_start : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_ap_done : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_ap_idle : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_ap_ready : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWVALID : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREADY : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WVALID : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WREADY : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WLAST : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARVALID : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREADY : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RVALID : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RREADY : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RLAST : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BVALID : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BREADY : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_outSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_preprocessSound_fu_147_outSound_ce0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_outSound_we0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_147_outSound_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_82 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_319 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_329 : BOOLEAN;
    signal index_reg_94 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_429 : BOOLEAN;
    signal grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component voicerec_processChunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sp : IN STD_LOGIC_VECTOR (12 downto 0);
        ret_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ret_ce0 : OUT STD_LOGIC;
        ret_we0 : OUT STD_LOGIC;
        ret_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp : IN STD_LOGIC_VECTOR (5 downto 0);
        inputSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        inputSound_ce0 : OUT STD_LOGIC;
        inputSound_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_classifySound IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_preprocessSound IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inSound_AWVALID : OUT STD_LOGIC;
        m_axi_inSound_AWREADY : IN STD_LOGIC;
        m_axi_inSound_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inSound_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inSound_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inSound_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inSound_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_WVALID : OUT STD_LOGIC;
        m_axi_inSound_WREADY : IN STD_LOGIC;
        m_axi_inSound_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_inSound_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_inSound_WLAST : OUT STD_LOGIC;
        m_axi_inSound_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_ARVALID : OUT STD_LOGIC;
        m_axi_inSound_ARREADY : IN STD_LOGIC;
        m_axi_inSound_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inSound_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inSound_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inSound_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inSound_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inSound_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_RVALID : IN STD_LOGIC;
        m_axi_inSound_RREADY : OUT STD_LOGIC;
        m_axi_inSound_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_inSound_RLAST : IN STD_LOGIC;
        m_axi_inSound_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_BVALID : IN STD_LOGIC;
        m_axi_inSound_BREADY : OUT STD_LOGIC;
        m_axi_inSound_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inSound_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inSound_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        outSound_ce0 : OUT STD_LOGIC;
        outSound_we0 : OUT STD_LOGIC;
        outSound_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_outSound IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_voicerec_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_voicerec_inSound_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    result_U : component voicerec_result
    generic map (
        DataWidth => 64,
        AddressRange => 882,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0);

    voicerec_voicerec_ctrl_s_axi_U : component voicerec_voicerec_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_VOICEREC_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_VOICEREC_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_voicerec_ctrl_AWVALID,
        AWREADY => s_axi_voicerec_ctrl_AWREADY,
        AWADDR => s_axi_voicerec_ctrl_AWADDR,
        WVALID => s_axi_voicerec_ctrl_WVALID,
        WREADY => s_axi_voicerec_ctrl_WREADY,
        WDATA => s_axi_voicerec_ctrl_WDATA,
        WSTRB => s_axi_voicerec_ctrl_WSTRB,
        ARVALID => s_axi_voicerec_ctrl_ARVALID,
        ARREADY => s_axi_voicerec_ctrl_ARREADY,
        ARADDR => s_axi_voicerec_ctrl_ARADDR,
        RVALID => s_axi_voicerec_ctrl_RVALID,
        RREADY => s_axi_voicerec_ctrl_RREADY,
        RDATA => s_axi_voicerec_ctrl_RDATA,
        RRESP => s_axi_voicerec_ctrl_RRESP,
        BVALID => s_axi_voicerec_ctrl_BVALID,
        BREADY => s_axi_voicerec_ctrl_BREADY,
        BRESP => s_axi_voicerec_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => voicerec_voicerec_ctrl_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return);

    voicerec_voicerec_inSound_m_axi_U : component voicerec_voicerec_inSound_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_VOICEREC_INSOUND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_VOICEREC_INSOUND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_VOICEREC_INSOUND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_VOICEREC_INSOUND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_VOICEREC_INSOUND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_VOICEREC_INSOUND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_VOICEREC_INSOUND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_VOICEREC_INSOUND_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_VOICEREC_INSOUND_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_VOICEREC_INSOUND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_VOICEREC_INSOUND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_VOICEREC_INSOUND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_voicerec_inSound_AWVALID,
        AWREADY => m_axi_voicerec_inSound_AWREADY,
        AWADDR => m_axi_voicerec_inSound_AWADDR,
        AWID => m_axi_voicerec_inSound_AWID,
        AWLEN => m_axi_voicerec_inSound_AWLEN,
        AWSIZE => m_axi_voicerec_inSound_AWSIZE,
        AWBURST => m_axi_voicerec_inSound_AWBURST,
        AWLOCK => m_axi_voicerec_inSound_AWLOCK,
        AWCACHE => m_axi_voicerec_inSound_AWCACHE,
        AWPROT => m_axi_voicerec_inSound_AWPROT,
        AWQOS => m_axi_voicerec_inSound_AWQOS,
        AWREGION => m_axi_voicerec_inSound_AWREGION,
        AWUSER => m_axi_voicerec_inSound_AWUSER,
        WVALID => m_axi_voicerec_inSound_WVALID,
        WREADY => m_axi_voicerec_inSound_WREADY,
        WDATA => m_axi_voicerec_inSound_WDATA,
        WSTRB => m_axi_voicerec_inSound_WSTRB,
        WLAST => m_axi_voicerec_inSound_WLAST,
        WID => m_axi_voicerec_inSound_WID,
        WUSER => m_axi_voicerec_inSound_WUSER,
        ARVALID => m_axi_voicerec_inSound_ARVALID,
        ARREADY => m_axi_voicerec_inSound_ARREADY,
        ARADDR => m_axi_voicerec_inSound_ARADDR,
        ARID => m_axi_voicerec_inSound_ARID,
        ARLEN => m_axi_voicerec_inSound_ARLEN,
        ARSIZE => m_axi_voicerec_inSound_ARSIZE,
        ARBURST => m_axi_voicerec_inSound_ARBURST,
        ARLOCK => m_axi_voicerec_inSound_ARLOCK,
        ARCACHE => m_axi_voicerec_inSound_ARCACHE,
        ARPROT => m_axi_voicerec_inSound_ARPROT,
        ARQOS => m_axi_voicerec_inSound_ARQOS,
        ARREGION => m_axi_voicerec_inSound_ARREGION,
        ARUSER => m_axi_voicerec_inSound_ARUSER,
        RVALID => m_axi_voicerec_inSound_RVALID,
        RREADY => m_axi_voicerec_inSound_RREADY,
        RDATA => m_axi_voicerec_inSound_RDATA,
        RLAST => m_axi_voicerec_inSound_RLAST,
        RID => m_axi_voicerec_inSound_RID,
        RUSER => m_axi_voicerec_inSound_RUSER,
        RRESP => m_axi_voicerec_inSound_RRESP,
        BVALID => m_axi_voicerec_inSound_BVALID,
        BREADY => m_axi_voicerec_inSound_BREADY,
        BRESP => m_axi_voicerec_inSound_BRESP,
        BID => m_axi_voicerec_inSound_BID,
        BUSER => m_axi_voicerec_inSound_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => voicerec_voicerec_inSound_m_axi_U_ap_dummy_ce,
        I_ARVALID => voicerec_inSound_ARVALID,
        I_ARREADY => voicerec_inSound_ARREADY,
        I_ARADDR => voicerec_inSound_ARADDR,
        I_ARID => voicerec_inSound_ARID,
        I_ARLEN => voicerec_inSound_ARLEN,
        I_ARSIZE => voicerec_inSound_ARSIZE,
        I_ARLOCK => voicerec_inSound_ARLOCK,
        I_ARCACHE => voicerec_inSound_ARCACHE,
        I_ARQOS => voicerec_inSound_ARQOS,
        I_ARPROT => voicerec_inSound_ARPROT,
        I_ARUSER => voicerec_inSound_ARUSER,
        I_ARBURST => voicerec_inSound_ARBURST,
        I_ARREGION => voicerec_inSound_ARREGION,
        I_RVALID => voicerec_inSound_RVALID,
        I_RREADY => voicerec_inSound_RREADY,
        I_RDATA => voicerec_inSound_RDATA,
        I_RID => voicerec_inSound_RID,
        I_RUSER => voicerec_inSound_RUSER,
        I_RRESP => voicerec_inSound_RRESP,
        I_RLAST => voicerec_inSound_RLAST,
        I_AWVALID => voicerec_inSound_AWVALID,
        I_AWREADY => voicerec_inSound_AWREADY,
        I_AWADDR => voicerec_inSound_AWADDR,
        I_AWID => voicerec_inSound_AWID,
        I_AWLEN => voicerec_inSound_AWLEN,
        I_AWSIZE => voicerec_inSound_AWSIZE,
        I_AWLOCK => voicerec_inSound_AWLOCK,
        I_AWCACHE => voicerec_inSound_AWCACHE,
        I_AWQOS => voicerec_inSound_AWQOS,
        I_AWPROT => voicerec_inSound_AWPROT,
        I_AWUSER => voicerec_inSound_AWUSER,
        I_AWBURST => voicerec_inSound_AWBURST,
        I_AWREGION => voicerec_inSound_AWREGION,
        I_WVALID => voicerec_inSound_WVALID,
        I_WREADY => voicerec_inSound_WREADY,
        I_WDATA => voicerec_inSound_WDATA,
        I_WID => voicerec_inSound_WID,
        I_WUSER => voicerec_inSound_WUSER,
        I_WLAST => voicerec_inSound_WLAST,
        I_WSTRB => voicerec_inSound_WSTRB,
        I_BVALID => voicerec_inSound_BVALID,
        I_BREADY => voicerec_inSound_BREADY,
        I_BRESP => voicerec_inSound_BRESP,
        I_BID => voicerec_inSound_BID,
        I_BUSER => voicerec_inSound_BUSER);

    outSound_U : component voicerec_outSound
    generic map (
        DataWidth => 64,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => outSound_address0,
        ce0 => outSound_ce0,
        we0 => outSound_we0,
        d0 => outSound_d0,
        q0 => outSound_q0);

    grp_voicerec_processChunk_fu_106 : component voicerec_processChunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_voicerec_processChunk_fu_106_ap_start,
        ap_done => grp_voicerec_processChunk_fu_106_ap_done,
        ap_idle => grp_voicerec_processChunk_fu_106_ap_idle,
        ap_ready => grp_voicerec_processChunk_fu_106_ap_ready,
        sp => grp_voicerec_processChunk_fu_106_sp,
        ret_address0 => grp_voicerec_processChunk_fu_106_ret_address0,
        ret_ce0 => grp_voicerec_processChunk_fu_106_ret_ce0,
        ret_we0 => grp_voicerec_processChunk_fu_106_ret_we0,
        ret_d0 => grp_voicerec_processChunk_fu_106_ret_d0,
        tmp => grp_voicerec_processChunk_fu_106_tmp,
        inputSound_address0 => grp_voicerec_processChunk_fu_106_inputSound_address0,
        inputSound_ce0 => grp_voicerec_processChunk_fu_106_inputSound_ce0,
        inputSound_q0 => grp_voicerec_processChunk_fu_106_inputSound_q0);

    grp_voicerec_classifySound_fu_131 : component voicerec_classifySound
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_voicerec_classifySound_fu_131_ap_start,
        ap_done => grp_voicerec_classifySound_fu_131_ap_done,
        ap_idle => grp_voicerec_classifySound_fu_131_ap_idle,
        ap_ready => grp_voicerec_classifySound_fu_131_ap_ready,
        result_address0 => grp_voicerec_classifySound_fu_131_result_address0,
        result_ce0 => grp_voicerec_classifySound_fu_131_result_ce0,
        result_q0 => grp_voicerec_classifySound_fu_131_result_q0,
        ap_return => grp_voicerec_classifySound_fu_131_ap_return);

    grp_voicerec_preprocessSound_fu_147 : component voicerec_preprocessSound
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_voicerec_preprocessSound_fu_147_ap_start,
        ap_done => grp_voicerec_preprocessSound_fu_147_ap_done,
        ap_idle => grp_voicerec_preprocessSound_fu_147_ap_idle,
        ap_ready => grp_voicerec_preprocessSound_fu_147_ap_ready,
        m_axi_inSound_AWVALID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWVALID,
        m_axi_inSound_AWREADY => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREADY,
        m_axi_inSound_AWADDR => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWADDR,
        m_axi_inSound_AWID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWID,
        m_axi_inSound_AWLEN => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLEN,
        m_axi_inSound_AWSIZE => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWSIZE,
        m_axi_inSound_AWBURST => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWBURST,
        m_axi_inSound_AWLOCK => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLOCK,
        m_axi_inSound_AWCACHE => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWCACHE,
        m_axi_inSound_AWPROT => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWPROT,
        m_axi_inSound_AWQOS => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWQOS,
        m_axi_inSound_AWREGION => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREGION,
        m_axi_inSound_AWUSER => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWUSER,
        m_axi_inSound_WVALID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WVALID,
        m_axi_inSound_WREADY => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WREADY,
        m_axi_inSound_WDATA => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WDATA,
        m_axi_inSound_WSTRB => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WSTRB,
        m_axi_inSound_WLAST => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WLAST,
        m_axi_inSound_WID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WID,
        m_axi_inSound_WUSER => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WUSER,
        m_axi_inSound_ARVALID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARVALID,
        m_axi_inSound_ARREADY => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREADY,
        m_axi_inSound_ARADDR => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARADDR,
        m_axi_inSound_ARID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARID,
        m_axi_inSound_ARLEN => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLEN,
        m_axi_inSound_ARSIZE => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARSIZE,
        m_axi_inSound_ARBURST => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARBURST,
        m_axi_inSound_ARLOCK => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLOCK,
        m_axi_inSound_ARCACHE => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARCACHE,
        m_axi_inSound_ARPROT => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARPROT,
        m_axi_inSound_ARQOS => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARQOS,
        m_axi_inSound_ARREGION => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREGION,
        m_axi_inSound_ARUSER => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARUSER,
        m_axi_inSound_RVALID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RVALID,
        m_axi_inSound_RREADY => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RREADY,
        m_axi_inSound_RDATA => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RDATA,
        m_axi_inSound_RLAST => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RLAST,
        m_axi_inSound_RID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RID,
        m_axi_inSound_RUSER => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RUSER,
        m_axi_inSound_RRESP => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RRESP,
        m_axi_inSound_BVALID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BVALID,
        m_axi_inSound_BREADY => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BREADY,
        m_axi_inSound_BRESP => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BRESP,
        m_axi_inSound_BID => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BID,
        m_axi_inSound_BUSER => grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BUSER,
        outSound_address0 => grp_voicerec_preprocessSound_fu_147_outSound_address0,
        outSound_ce0 => grp_voicerec_preprocessSound_fu_147_outSound_ce0,
        outSound_we0 => grp_voicerec_preprocessSound_fu_147_outSound_we0,
        outSound_d0 => grp_voicerec_preprocessSound_fu_147_outSound_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg assign process. --
    grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_155_p2 = ap_const_lv1_0)))) then 
                    grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_classifySound_fu_131_ap_ready)) then 
                    grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg assign process. --
    grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_preprocessSound_fu_147_ap_ready)) then 
                    grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg assign process. --
    grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_155_p2 = ap_const_lv1_0))) then 
                    grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_processChunk_fu_106_ap_ready)) then 
                    grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_82 assign process. --
    i_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = grp_voicerec_processChunk_fu_106_ap_done)))) then 
                i_reg_82 <= i_1_reg_181;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_147_ap_done)))) then 
                i_reg_82 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    -- index_reg_94 assign process. --
    index_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = grp_voicerec_processChunk_fu_106_ap_done)))) then 
                index_reg_94 <= index_1_reg_176;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_147_ap_done)))) then 
                index_reg_94 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_155_p2 = ap_const_lv1_0))) then
                i_1_reg_181 <= i_1_fu_167_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                index_1_reg_176 <= index_1_fu_161_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_155_p2, grp_voicerec_processChunk_fu_106_ap_done, grp_voicerec_classifySound_fu_131_ap_done, grp_voicerec_preprocessSound_fu_147_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_147_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_155_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_voicerec_processChunk_fu_106_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_voicerec_classifySound_fu_131_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_voicerec_classifySound_fu_131_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_voicerec_classifySound_fu_131_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_voicerec_classifySound_fu_131_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_voicerec_classifySound_fu_131_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_voicerec_classifySound_fu_131_ap_return;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_319 assign process. --
    ap_sig_bdd_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_319 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_329 assign process. --
    ap_sig_bdd_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_329 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_429 assign process. --
    ap_sig_bdd_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_429 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_46 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_46)
    begin
        if (ap_sig_bdd_46) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_319)
    begin
        if (ap_sig_bdd_319) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_329)
    begin
        if (ap_sig_bdd_329) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_429)
    begin
        if (ap_sig_bdd_429) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_155_p2 <= "1" when (index_reg_94 = ap_const_lv6_3D) else "0";
    grp_voicerec_classifySound_fu_131_ap_start <= grp_voicerec_classifySound_fu_131_ap_start_ap_start_reg;
    grp_voicerec_classifySound_fu_131_result_q0 <= result_q0;
    grp_voicerec_preprocessSound_fu_147_ap_start <= grp_voicerec_preprocessSound_fu_147_ap_start_ap_start_reg;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREADY <= voicerec_inSound_ARREADY;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREADY <= voicerec_inSound_AWREADY;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BID <= voicerec_inSound_BID;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BRESP <= voicerec_inSound_BRESP;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BUSER <= voicerec_inSound_BUSER;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BVALID <= voicerec_inSound_BVALID;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RDATA <= voicerec_inSound_RDATA;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RID <= voicerec_inSound_RID;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RLAST <= voicerec_inSound_RLAST;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RRESP <= voicerec_inSound_RRESP;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RUSER <= voicerec_inSound_RUSER;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RVALID <= voicerec_inSound_RVALID;
    grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WREADY <= voicerec_inSound_WREADY;
    grp_voicerec_processChunk_fu_106_ap_start <= grp_voicerec_processChunk_fu_106_ap_start_ap_start_reg;
    grp_voicerec_processChunk_fu_106_inputSound_q0 <= outSound_q0;
    grp_voicerec_processChunk_fu_106_sp <= i_reg_82;
    grp_voicerec_processChunk_fu_106_tmp <= index_reg_94;
    i_1_fu_167_p2 <= std_logic_vector(unsigned(i_reg_82) + unsigned(ap_const_lv13_80));
    index_1_fu_161_p2 <= std_logic_vector(unsigned(index_reg_94) + unsigned(ap_const_lv6_1));

    -- outSound_address0 assign process. --
    outSound_address0_assign_proc : process(grp_voicerec_processChunk_fu_106_inputSound_address0, grp_voicerec_preprocessSound_fu_147_outSound_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            outSound_address0 <= grp_voicerec_preprocessSound_fu_147_outSound_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            outSound_address0 <= grp_voicerec_processChunk_fu_106_inputSound_address0;
        else 
            outSound_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- outSound_ce0 assign process. --
    outSound_ce0_assign_proc : process(grp_voicerec_processChunk_fu_106_inputSound_ce0, grp_voicerec_preprocessSound_fu_147_outSound_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            outSound_ce0 <= grp_voicerec_preprocessSound_fu_147_outSound_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            outSound_ce0 <= grp_voicerec_processChunk_fu_106_inputSound_ce0;
        else 
            outSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outSound_d0 <= grp_voicerec_preprocessSound_fu_147_outSound_d0;

    -- outSound_we0 assign process. --
    outSound_we0_assign_proc : process(grp_voicerec_preprocessSound_fu_147_outSound_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            outSound_we0 <= grp_voicerec_preprocessSound_fu_147_outSound_we0;
        else 
            outSound_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- result_address0 assign process. --
    result_address0_assign_proc : process(grp_voicerec_processChunk_fu_106_ret_address0, grp_voicerec_classifySound_fu_131_result_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            result_address0 <= grp_voicerec_classifySound_fu_131_result_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            result_address0 <= grp_voicerec_processChunk_fu_106_ret_address0;
        else 
            result_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- result_ce0 assign process. --
    result_ce0_assign_proc : process(grp_voicerec_processChunk_fu_106_ret_ce0, grp_voicerec_classifySound_fu_131_result_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            result_ce0 <= grp_voicerec_classifySound_fu_131_result_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            result_ce0 <= grp_voicerec_processChunk_fu_106_ret_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= grp_voicerec_processChunk_fu_106_ret_d0;

    -- result_we0 assign process. --
    result_we0_assign_proc : process(grp_voicerec_processChunk_fu_106_ret_we0, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            result_we0 <= grp_voicerec_processChunk_fu_106_ret_we0;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    voicerec_inSound_ARADDR <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARADDR;
    voicerec_inSound_ARBURST <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARBURST;
    voicerec_inSound_ARCACHE <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARCACHE;
    voicerec_inSound_ARID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARID;
    voicerec_inSound_ARLEN <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLEN;
    voicerec_inSound_ARLOCK <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARLOCK;
    voicerec_inSound_ARPROT <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARPROT;
    voicerec_inSound_ARQOS <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARQOS;
    voicerec_inSound_ARREGION <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARREGION;
    voicerec_inSound_ARSIZE <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARSIZE;
    voicerec_inSound_ARUSER <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARUSER;
    voicerec_inSound_ARVALID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_ARVALID;
    voicerec_inSound_AWADDR <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWADDR;
    voicerec_inSound_AWBURST <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWBURST;
    voicerec_inSound_AWCACHE <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWCACHE;
    voicerec_inSound_AWID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWID;
    voicerec_inSound_AWLEN <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLEN;
    voicerec_inSound_AWLOCK <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWLOCK;
    voicerec_inSound_AWPROT <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWPROT;
    voicerec_inSound_AWQOS <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWQOS;
    voicerec_inSound_AWREGION <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWREGION;
    voicerec_inSound_AWSIZE <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWSIZE;
    voicerec_inSound_AWUSER <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWUSER;
    voicerec_inSound_AWVALID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_AWVALID;
    voicerec_inSound_BREADY <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_BREADY;
    voicerec_inSound_RREADY <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_RREADY;
    voicerec_inSound_WDATA <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WDATA;
    voicerec_inSound_WID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WID;
    voicerec_inSound_WLAST <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WLAST;
    voicerec_inSound_WSTRB <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WSTRB;
    voicerec_inSound_WUSER <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WUSER;
    voicerec_inSound_WVALID <= grp_voicerec_preprocessSound_fu_147_m_axi_inSound_WVALID;
    voicerec_voicerec_ctrl_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    voicerec_voicerec_inSound_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
end behav;
