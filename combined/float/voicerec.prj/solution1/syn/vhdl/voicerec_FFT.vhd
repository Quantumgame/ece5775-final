-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal cosVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cosVec_ce0 : STD_LOGIC;
    signal cosVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinVec_ce0 : STD_LOGIC;
    signal sinVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_fu_382_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_3_reg_704 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal tmp_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_713 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_1_reg_718 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_2_reg_723 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_3_reg_728 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_1_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal j_2_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal wr_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal grp_fu_532_ap_done : STD_LOGIC;
    signal wi_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_786 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_566_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_797 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_5_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal k_4_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_4_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_241 : BOOLEAN;
    signal c_addr_4_reg_825 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_5_reg_830 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_6_reg_835 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_7_reg_840 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_279 : BOOLEAN;
    signal tmp_35_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal wrk_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_290 : BOOLEAN;
    signal wik_1_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_addr_rec_fu_695_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_301 : BOOLEAN;
    signal k_reg_159 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_reg_182 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_319 : BOOLEAN;
    signal j_1_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal n3_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_rec_reg_237 : STD_LOGIC_VECTOR (38 downto 0);
    signal d_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal wik_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_s_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum_cast_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum9_cast_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum1_cast_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum2_cast_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_382 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_396 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_410 : BOOLEAN;
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_426 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_433 : BOOLEAN;
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast3_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_462_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rev5_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_490_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_3_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_519 : BOOLEAN;
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_cast2_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast1_fu_591_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i0_1_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_622_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_618_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum_fu_626_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_cast_fu_643_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum9_fu_647_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_cast_fu_658_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum1_fu_663_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_cast_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum2_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_cast_fu_691_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_303_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_307_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_311_ce : STD_LOGIC;
    signal grp_fu_316_ce : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_326_ce : STD_LOGIC;
    signal tmp_s_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_532_ap_start : STD_LOGIC;
    signal grp_fu_532_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component voicerec_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_sdiv_11ns_32ns_32_15_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_cosVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_sinVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cosVec_U : component voicerec_FFT_cosVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosVec_address0,
        ce0 => cosVec_ce0,
        q0 => cosVec_q0);

    sinVec_U : component voicerec_FFT_sinVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinVec_address0,
        ce0 => sinVec_ce0,
        q0 => sinVec_q0);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U6 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        opcode => grp_fu_303_opcode,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U7 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        opcode => grp_fu_307_opcode,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U8 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => grp_fu_311_ce,
        dout => grp_fu_311_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U9 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => grp_fu_316_ce,
        dout => grp_fu_316_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U10 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U11 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_326_p0,
        din1 => grp_fu_326_p1,
        ce => grp_fu_326_ce,
        dout => grp_fu_326_p2);

    voicerec_sdiv_11ns_32ns_32_15_seq_U12 : component voicerec_sdiv_11ns_32ns_32_15_seq
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_532_ap_start,
        done => grp_fu_532_ap_done,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        ce => grp_fu_532_ce,
        dout => grp_fu_532_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- cp_rec_reg_237 assign process. --
    cp_rec_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                cp_rec_reg_237 <= cp_addr_rec_fu_695_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then 
                cp_rec_reg_237 <= ap_const_lv39_0;
            end if; 
        end if;
    end process;

    -- cp_s_reg_292 assign process. --
    cp_s_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond_fu_595_p2)))) then 
                                cp_s_reg_292(31 downto 2) <= n_reg_791(31 downto 2);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_574_p2) and (ap_const_lv1_0 = tmp_30_fu_586_p2))) then 
                cp_s_reg_292(2) <= '0';
                cp_s_reg_292(3) <= '0';
                cp_s_reg_292(4) <= '0';
                cp_s_reg_292(5) <= '0';
                cp_s_reg_292(6) <= '0';
                cp_s_reg_292(7) <= '0';
                cp_s_reg_292(8) <= '0';
                cp_s_reg_292(9) <= '0';
                cp_s_reg_292(10) <= '0';
                cp_s_reg_292(11) <= '0';
                cp_s_reg_292(12) <= '0';
                cp_s_reg_292(13) <= '0';
                cp_s_reg_292(14) <= '0';
                cp_s_reg_292(15) <= '0';
                cp_s_reg_292(16) <= '0';
                cp_s_reg_292(17) <= '0';
                cp_s_reg_292(18) <= '0';
                cp_s_reg_292(19) <= '0';
                cp_s_reg_292(20) <= '0';
                cp_s_reg_292(21) <= '0';
                cp_s_reg_292(22) <= '0';
                cp_s_reg_292(23) <= '0';
                cp_s_reg_292(24) <= '0';
                cp_s_reg_292(25) <= '0';
                cp_s_reg_292(26) <= '0';
                cp_s_reg_292(27) <= '0';
                cp_s_reg_292(28) <= '0';
                cp_s_reg_292(29) <= '0';
                cp_s_reg_292(30) <= '0';
                cp_s_reg_292(31) <= '0';
            end if; 
        end if;
    end process;

    -- d_reg_249 assign process. --
    d_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_595_p2) and (ap_const_lv1_0 = tmp_31_fu_607_p2))) then 
                d_reg_249 <= d_reg_249;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                d_reg_249 <= wrk_reg_885;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_574_p2) and not((ap_const_lv1_0 = tmp_30_fu_586_p2)))) then 
                d_reg_249 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- j_1_reg_193 assign process. --
    j_1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                j_1_reg_193 <= j_2_fu_504_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_1_reg_193 <= j_reg_170;
            end if; 
        end if;
    end process;

    -- j_3_reg_226 assign process. --
    j_3_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                j_3_reg_226 <= j_5_reg_805;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then 
                j_3_reg_226 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- j_reg_170 assign process. --
    j_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_438_p2)))) then 
                j_reg_170 <= j_4_fu_520_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_170 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_279 assign process. --
    k_1_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_595_p2) and (ap_const_lv1_0 = tmp_31_fu_607_p2))) then 
                k_1_reg_279 <= k_4_fu_601_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                k_1_reg_279 <= k_4_reg_816;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_574_p2) and not((ap_const_lv1_0 = tmp_30_fu_586_p2)))) then 
                k_1_reg_279 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- k_reg_159 assign process. --
    k_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_438_p2)))) then 
                k_reg_159 <= k_3_reg_704;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_159 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- n3_reg_203 assign process. --
    n3_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                n3_reg_203 <= n_1_fu_512_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                n3_reg_203 <= ap_const_lv32_80;
            end if; 
        end if;
    end process;

    -- n_2_reg_214 assign process. --
    n_2_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond1_fu_574_p2)))) then 
                                n_2_reg_214(31 downto 1) <= n_reg_791(31 downto 1);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_376_p2 = ap_const_lv1_0)))) then 
                n_2_reg_214(1) <= '1';
                n_2_reg_214(2) <= '0';
                n_2_reg_214(3) <= '0';
                n_2_reg_214(4) <= '0';
                n_2_reg_214(5) <= '0';
                n_2_reg_214(6) <= '0';
                n_2_reg_214(7) <= '0';
                n_2_reg_214(8) <= '0';
                n_2_reg_214(9) <= '0';
                n_2_reg_214(10) <= '0';
                n_2_reg_214(11) <= '0';
                n_2_reg_214(12) <= '0';
                n_2_reg_214(13) <= '0';
                n_2_reg_214(14) <= '0';
                n_2_reg_214(15) <= '0';
                n_2_reg_214(16) <= '0';
                n_2_reg_214(17) <= '0';
                n_2_reg_214(18) <= '0';
                n_2_reg_214(19) <= '0';
                n_2_reg_214(20) <= '0';
                n_2_reg_214(21) <= '0';
                n_2_reg_214(22) <= '0';
                n_2_reg_214(23) <= '0';
                n_2_reg_214(24) <= '0';
                n_2_reg_214(25) <= '0';
                n_2_reg_214(26) <= '0';
                n_2_reg_214(27) <= '0';
                n_2_reg_214(28) <= '0';
                n_2_reg_214(29) <= '0';
                n_2_reg_214(30) <= '0';
                n_2_reg_214(31) <= '0';
            end if; 
        end if;
    end process;

    -- q_reg_182 assign process. --
    q_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                q_reg_182 <= q_1_fu_444_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                q_reg_182 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- wik_reg_264 assign process. --
    wik_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_595_p2) and (ap_const_lv1_0 = tmp_31_fu_607_p2))) then 
                wik_reg_264 <= wik_reg_264;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                wik_reg_264 <= wik_1_reg_890;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_574_p2) and not((ap_const_lv1_0 = tmp_30_fu_586_p2)))) then 
                wik_reg_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_376_p2 = ap_const_lv1_0) and not((tmp_fu_388_p2 = ap_const_lv1_0)))) then
                    c_addr_1_reg_718(8 downto 1) <= tmp_26_fu_411_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_reg_713(8 downto 1) <= tmp_24_fu_400_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    c_addr_2_reg_723(8 downto 1) <= tmp_27_fu_422_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_3_reg_728(8 downto 1) <= tmp_29_fu_433_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_595_p2) and not((ap_const_lv1_0 = tmp_31_fu_607_p2)))) then
                c_addr_4_reg_825 <= cp_sum_cast_fu_632_p1(9 - 1 downto 0);
                c_addr_5_reg_830 <= cp_sum9_cast_fu_653_p1(9 - 1 downto 0);
                c_addr_6_reg_835 <= cp_sum1_cast_fu_669_p1(9 - 1 downto 0);
                c_addr_7_reg_840 <= cp_sum2_cast_fu_686_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                j_5_reg_805 <= j_5_fu_580_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                k_3_reg_704 <= k_3_fu_382_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                k_4_reg_816 <= k_4_fu_601_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then
                    n_reg_791(31 downto 2) <= n_fu_560_p2(31 downto 2);
                nb_reg_781 <= grp_fu_532_p2;
                tmp_3_reg_786 <= n_2_reg_214(31 downto 1);
                    tmp_7_reg_797(10 downto 1) <= tmp_7_fu_566_p1(10 downto 1);
                wi_reg_775 <= sinVec_q0;
                wr_reg_769 <= cosVec_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                reg_339 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32))) then
                reg_348 <= c_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_357 <= grp_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_365 <= grp_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                tmp_34_reg_865 <= grp_fu_311_p2;
                tmp_35_reg_870 <= grp_fu_316_p2;
                tmp_36_reg_875 <= grp_fu_321_p2;
                tmp_37_reg_880 <= grp_fu_326_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                tmp_40_reg_895 <= grp_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                tmp_42_reg_845 <= grp_fu_311_p2;
                tmp_43_reg_850 <= grp_fu_316_p2;
                tmp_44_reg_855 <= grp_fu_321_p2;
                tmp_45_reg_860 <= grp_fu_326_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_376_p2 = ap_const_lv1_0))) then
                tmp_reg_709 <= tmp_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                wik_1_reg_890 <= grp_fu_307_p2;
                wrk_reg_885 <= grp_fu_303_p2;
            end if;
        end if;
    end process;
    c_addr_reg_713(0) <= '0';
    c_addr_1_reg_718(0) <= '1';
    c_addr_2_reg_723(0) <= '0';
    c_addr_3_reg_728(0) <= '1';
    n_reg_791(1 downto 0) <= "00";
    tmp_7_reg_797(0) <= '0';
    n_2_reg_214(0) <= '0';
    cp_s_reg_292(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_388_p2, exitcond3_fu_376_p2, exitcond2_fu_438_p2, grp_fu_532_ap_done, exitcond_fu_595_p2, tmp_31_fu_607_p2, exitcond1_fu_574_p2, tmp_30_fu_586_p2, tmp_s_fu_526_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((exitcond3_fu_376_p2 = ap_const_lv1_0) and (tmp_fu_388_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif (((exitcond3_fu_376_p2 = ap_const_lv1_0) and not((tmp_fu_388_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_438_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_s_fu_526_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_logic_0 = grp_fu_532_ap_done))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (((ap_const_lv1_0 = exitcond1_fu_574_p2) and (ap_const_lv1_0 = tmp_30_fu_586_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                elsif (((ap_const_lv1_0 = exitcond1_fu_574_p2) and not((ap_const_lv1_0 = tmp_30_fu_586_p2)))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st23_fsm_22 => 
                if (((ap_const_lv1_0 = exitcond_fu_595_p2) and not((ap_const_lv1_0 = tmp_31_fu_607_p2)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                elsif (((ap_const_lv1_0 = exitcond_fu_595_p2) and (ap_const_lv1_0 = tmp_31_fu_607_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_526_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_526_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_140 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_241 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_279 assign process. --
    ap_sig_bdd_279_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_279 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_290 assign process. --
    ap_sig_bdd_290_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_290 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_301 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_319 assign process. --
    ap_sig_bdd_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_319 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_382 assign process. --
    ap_sig_bdd_382_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_382 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_396 assign process. --
    ap_sig_bdd_396_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_396 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_410 assign process. --
    ap_sig_bdd_410_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_410 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_426 assign process. --
    ap_sig_bdd_426_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_426 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_433 assign process. --
    ap_sig_bdd_433_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_433 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_519 assign process. --
    ap_sig_bdd_519_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_519 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_241)
    begin
        if (ap_sig_bdd_241) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_279)
    begin
        if (ap_sig_bdd_279) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_426)
    begin
        if (ap_sig_bdd_426) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_290)
    begin
        if (ap_sig_bdd_290) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_433)
    begin
        if (ap_sig_bdd_433) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_140)
    begin
        if (ap_sig_bdd_140) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_410)
    begin
        if (ap_sig_bdd_410) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_396)
    begin
        if (ap_sig_bdd_396) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_301)
    begin
        if (ap_sig_bdd_301) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_382)
    begin
        if (ap_sig_bdd_382) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_319)
    begin
        if (ap_sig_bdd_319) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_519)
    begin
        if (ap_sig_bdd_519) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st2_fsm_1, c_addr_reg_713, c_addr_2_reg_723, ap_sig_cseq_ST_st23_fsm_22, c_addr_4_reg_825, c_addr_6_reg_835, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st5_fsm_4, tmp_24_fu_400_p1, tmp_27_fu_422_p1, cp_sum1_cast_fu_669_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            c_address0 <= c_addr_6_reg_835;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= c_addr_2_reg_723;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= c_addr_reg_713;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            c_address0 <= c_addr_4_reg_825;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address0 <= cp_sum1_cast_fu_669_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_27_fu_422_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address0 <= tmp_24_fu_400_p1(9 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st2_fsm_1, c_addr_1_reg_718, c_addr_3_reg_728, ap_sig_cseq_ST_st23_fsm_22, c_addr_5_reg_830, c_addr_7_reg_840, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, tmp_26_fu_411_p1, tmp_29_fu_433_p1, cp_sum2_cast_fu_686_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            c_address1 <= c_addr_7_reg_840;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= c_addr_3_reg_728;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= c_addr_1_reg_718;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_address1 <= c_addr_5_reg_830;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address1 <= cp_sum2_cast_fu_686_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_29_fu_433_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address1 <= tmp_26_fu_411_p1(9 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(c_q0, reg_339, reg_357, ap_sig_cseq_ST_st38_fsm_37, tmp_40_reg_895, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            c_d0 <= tmp_40_reg_895;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            c_d0 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= c_q0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(c_q1, reg_348, reg_357, reg_365, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            c_d1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            c_d1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d1 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= c_q1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, tmp_reg_709, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_709 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(tmp_reg_709, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_709 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cosVec_address0 <= tmp_23_fu_544_p1(8 - 1 downto 0);

    -- cosVec_ce0 assign process. --
    cosVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            cosVec_ce0 <= ap_const_logic_1;
        else 
            cosVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cp_addr_rec_fu_695_p2 <= std_logic_vector(signed(cp_cast_fu_691_p1) + signed(cp_rec_reg_237));
        cp_cast_fu_691_p1 <= std_logic_vector(resize(signed(cp_s_reg_292),39));

    cp_sum1_cast_fu_669_p1 <= std_logic_vector(resize(unsigned(cp_sum1_fu_663_p2),64));
    cp_sum1_fu_663_p2 <= std_logic_vector(unsigned(tmp_12_fu_622_p1) + unsigned(tmp_38_cast_fu_658_p2));
    cp_sum2_cast_fu_686_p1 <= std_logic_vector(resize(unsigned(cp_sum2_fu_680_p2),64));
    cp_sum2_fu_680_p2 <= std_logic_vector(unsigned(tmp_12_fu_622_p1) + unsigned(tmp_40_cast_fu_674_p2));
    cp_sum9_cast_fu_653_p1 <= std_logic_vector(resize(unsigned(cp_sum9_fu_647_p2),64));
    cp_sum9_fu_647_p2 <= std_logic_vector(unsigned(tmp_12_fu_622_p1) + unsigned(tmp_37_cast_fu_643_p1));
    cp_sum_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(cp_sum_fu_626_p2),64));
    cp_sum_fu_626_p2 <= std_logic_vector(unsigned(tmp_12_fu_622_p1) + unsigned(tmp_32_fu_618_p1));
    exitcond1_fu_574_p2 <= "1" when (j_3_reg_226 = ap_const_lv8_80) else "0";
    exitcond2_fu_438_p2 <= "1" when (q_reg_182 = ap_const_lv4_8) else "0";
    exitcond3_fu_376_p2 <= "1" when (k_reg_159 = ap_const_lv9_100) else "0";
    exitcond_fu_595_p2 <= "1" when (k_1_reg_279 = ap_const_lv8_80) else "0";
    grp_fu_303_ce <= ap_const_logic_1;

    -- grp_fu_303_opcode assign process. --
    grp_fu_303_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then 
            grp_fu_303_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_303_opcode <= ap_const_lv2_0;
        else 
            grp_fu_303_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_303_p0 assign process. --
    grp_fu_303_p0_assign_proc : process(reg_339, reg_348, ap_sig_cseq_ST_st33_fsm_32, tmp_42_reg_845, tmp_34_reg_865, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_303_p0 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_303_p0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_303_p0 <= tmp_34_reg_865;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_303_p0 <= tmp_42_reg_845;
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_303_p1 assign process. --
    grp_fu_303_p1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, reg_357, reg_365, tmp_43_reg_850, ap_sig_cseq_ST_st27_fsm_26, tmp_35_reg_870, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_303_p1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_303_p1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_303_p1 <= tmp_35_reg_870;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_303_p1 <= tmp_43_reg_850;
        else 
            grp_fu_303_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_307_ce <= ap_const_logic_1;

    -- grp_fu_307_opcode assign process. --
    grp_fu_307_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_307_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then 
            grp_fu_307_opcode <= ap_const_lv2_0;
        else 
            grp_fu_307_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_307_p0 assign process. --
    grp_fu_307_p0_assign_proc : process(reg_339, reg_348, ap_sig_cseq_ST_st33_fsm_32, tmp_44_reg_855, ap_sig_cseq_ST_st27_fsm_26, tmp_36_reg_875, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_307_p0 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_307_p0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_307_p0 <= tmp_36_reg_875;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_307_p0 <= tmp_44_reg_855;
        else 
            grp_fu_307_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_307_p1 assign process. --
    grp_fu_307_p1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, reg_357, reg_365, tmp_45_reg_860, ap_sig_cseq_ST_st27_fsm_26, tmp_37_reg_880, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_307_p1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_307_p1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_307_p1 <= tmp_37_reg_880;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_307_p1 <= tmp_45_reg_860;
        else 
            grp_fu_307_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_311_ce <= ap_const_logic_1;

    -- grp_fu_311_p0 assign process. --
    grp_fu_311_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wr_reg_769, ap_sig_cseq_ST_st23_fsm_22, d_reg_249)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_311_p0 <= d_reg_249;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_311_p0 <= wr_reg_769;
        else 
            grp_fu_311_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_311_p1 assign process. --
    grp_fu_311_p1_assign_proc : process(c_q0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, d_reg_249)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_311_p1 <= c_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_311_p1 <= d_reg_249;
        else 
            grp_fu_311_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_316_ce <= ap_const_logic_1;

    -- grp_fu_316_p0 assign process. --
    grp_fu_316_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wi_reg_775, ap_sig_cseq_ST_st23_fsm_22, wik_reg_264)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_316_p0 <= wik_reg_264;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_316_p0 <= wi_reg_775;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_316_p1 assign process. --
    grp_fu_316_p1_assign_proc : process(c_q1, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, wik_reg_264)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_316_p1 <= c_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_316_p1 <= wik_reg_264;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_321_ce <= ap_const_logic_1;

    -- grp_fu_321_p0 assign process. --
    grp_fu_321_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wr_reg_769, ap_sig_cseq_ST_st23_fsm_22, d_reg_249)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_321_p0 <= d_reg_249;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_321_p0 <= wr_reg_769;
        else 
            grp_fu_321_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_321_p1 assign process. --
    grp_fu_321_p1_assign_proc : process(c_q1, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, wik_reg_264)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_321_p1 <= c_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_321_p1 <= wik_reg_264;
        else 
            grp_fu_321_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_326_ce <= ap_const_logic_1;

    -- grp_fu_326_p0 assign process. --
    grp_fu_326_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wi_reg_775, ap_sig_cseq_ST_st23_fsm_22, wik_reg_264)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_326_p0 <= wik_reg_264;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_326_p0 <= wi_reg_775;
        else 
            grp_fu_326_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_326_p1 assign process. --
    grp_fu_326_p1_assign_proc : process(c_q0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, d_reg_249)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_326_p1 <= c_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_326_p1 <= d_reg_249;
        else 
            grp_fu_326_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_532_ap_start assign process. --
    grp_fu_532_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_fu_526_p2)))) then 
            grp_fu_532_ap_start <= ap_const_logic_1;
        else 
            grp_fu_532_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_532_ce <= ap_const_logic_1;
    grp_fu_532_p0 <= ap_const_lv32_100(11 - 1 downto 0);
    grp_fu_532_p1 <= n_2_reg_214;
    i0_1_fu_612_p2 <= std_logic_vector(shift_left(unsigned(k_1_reg_279),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    i0_fu_394_p2 <= std_logic_vector(shift_left(unsigned(k_reg_159),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    i1_fu_416_p2 <= std_logic_vector(shift_left(unsigned(j_reg_170),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    icmp_fu_472_p2 <= "1" when (signed(tmp_10_fu_462_p4) > signed(ap_const_lv31_0)) else "0";
    j_2_fu_504_p3 <= 
        j_6_fu_484_p2 when (or_cond_fu_478_p2(0) = '1') else 
        j_1_reg_193;
    j_3_cast2_fu_570_p1 <= std_logic_vector(resize(unsigned(j_3_reg_226),32));
    j_4_fu_520_p2 <= std_logic_vector(unsigned(j_1_reg_193) + unsigned(n3_reg_203));
    j_5_fu_580_p2 <= std_logic_vector(unsigned(j_3_reg_226) + unsigned(ap_const_lv8_1));
    j_6_fu_484_p2 <= std_logic_vector(unsigned(j_1_reg_193) - unsigned(n3_reg_203));
    k_1_cast1_fu_591_p1 <= std_logic_vector(resize(unsigned(k_1_reg_279),31));
    k_3_fu_382_p2 <= std_logic_vector(unsigned(k_reg_159) + unsigned(ap_const_lv9_1));
    k_4_fu_601_p2 <= std_logic_vector(unsigned(k_1_reg_279) + unsigned(ap_const_lv8_1));
    k_cast3_fu_372_p1 <= std_logic_vector(resize(unsigned(k_reg_159),32));
    n_1_fu_512_p3 <= 
        n_3_fu_500_p1 when (or_cond_fu_478_p2(0) = '1') else 
        n3_reg_203;
    n_3_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_490_p4),32));
    n_fu_560_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_214),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    or_cond_fu_478_p2 <= (rev5_fu_456_p2 and icmp_fu_472_p2);
    q_1_fu_444_p2 <= std_logic_vector(unsigned(q_reg_182) + unsigned(ap_const_lv4_1));
    rev5_fu_456_p2 <= (slt_fu_450_p2 xor ap_const_lv1_1);
    sinVec_address0 <= tmp_23_fu_544_p1(8 - 1 downto 0);

    -- sinVec_ce0 assign process. --
    sinVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            sinVec_ce0 <= ap_const_logic_1;
        else 
            sinVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_450_p2 <= "1" when (signed(j_1_reg_193) < signed(n3_reg_203)) else "0";
    tmp_10_fu_462_p4 <= n3_reg_203(31 downto 1);
    tmp_12_fu_622_p1 <= cp_rec_reg_237(11 - 1 downto 0);
    tmp_22_fu_538_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(n_2_reg_214));
        tmp_23_fu_544_p1 <= std_logic_vector(resize(signed(tmp_22_fu_538_p2),64));

    tmp_24_fu_400_p1 <= std_logic_vector(resize(unsigned(i0_fu_394_p2),64));
    tmp_25_fu_405_p2 <= (i0_fu_394_p2 or ap_const_lv9_1);
    tmp_26_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_405_p2),64));
        tmp_27_fu_422_p1 <= std_logic_vector(resize(signed(i1_fu_416_p2),64));

    tmp_28_fu_427_p2 <= (i1_fu_416_p2 or ap_const_lv32_1);
        tmp_29_fu_433_p1 <= std_logic_vector(resize(signed(tmp_28_fu_427_p2),64));

    tmp_30_fu_586_p2 <= "1" when (signed(j_3_cast2_fu_570_p1) < signed(nb_reg_781)) else "0";
    tmp_31_fu_607_p2 <= "1" when (signed(k_1_cast1_fu_591_p1) < signed(tmp_3_reg_786)) else "0";
    tmp_32_fu_618_p1 <= std_logic_vector(resize(unsigned(i0_1_fu_612_p2),11));
    tmp_33_fu_637_p2 <= (i0_1_fu_612_p2 or ap_const_lv8_1);
    tmp_37_cast_fu_643_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_637_p2),11));
    tmp_38_cast_fu_658_p2 <= std_logic_vector(unsigned(tmp_7_reg_797) + unsigned(tmp_32_fu_618_p1));
    tmp_40_cast_fu_674_p2 <= (tmp_38_cast_fu_658_p2 or ap_const_lv11_1);
    tmp_5_fu_490_p4 <= n3_reg_203(31 downto 1);
    tmp_7_fu_566_p1 <= n_2_reg_214(11 - 1 downto 0);
    tmp_fu_388_p2 <= "1" when (signed(k_cast3_fu_372_p1) < signed(j_reg_170)) else "0";
    tmp_s_fu_526_p2 <= "1" when (signed(n_2_reg_214) < signed(ap_const_lv32_101)) else "0";
end behav;
