-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_processChunk is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sp : IN STD_LOGIC_VECTOR (12 downto 0);
    ret_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ret_ce0 : OUT STD_LOGIC;
    ret_we0 : OUT STD_LOGIC;
    ret_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_133 : IN STD_LOGIC_VECTOR (5 downto 0);
    inputSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    inputSound_ce0 : OUT STD_LOGIC;
    inputSound_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_processChunk is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3EB444F9 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101101000100010011111001";
    constant ap_const_lv32_C2F87377 : STD_LOGIC_VECTOR (31 downto 0) := "11000010111110000111001101110111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_3B800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111011100000000000000000000000";
    constant ap_const_lv32_34000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110100000000000000000000000000";
    constant ap_const_lv32_3FBFBF75 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101111111011111101110101";
    constant ap_const_lv32_3F317218 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001100010111001000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_3FDCE9A3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110111001110100110100011";
    constant ap_const_lv64_3FD1C01AA03BE89E : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010001110000000001101010100000001110111110100010011110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110011";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal c_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_ce1 : STD_LOGIC;
    signal c_we1 : STD_LOGIC;
    signal c_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal e_ce0 : STD_LOGIC;
    signal e_we0 : STD_LOGIC;
    signal e_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal spec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal spec_ce0 : STD_LOGIC;
    signal spec_we0 : STD_LOGIC;
    signal spec_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal spec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mell_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mell_ce0 : STD_LOGIC;
    signal mell_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dctMatrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal dctMatrix_ce0 : STD_LOGIC;
    signal dctMatrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_187 : BOOLEAN;
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal ap_sig_cseq_ST_st80_fsm_79 : STD_LOGIC;
    signal ap_sig_bdd_218 : BOOLEAN;
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_235 : BOOLEAN;
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_243 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_cseq_ST_st85_fsm_84 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_268 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_292 : BOOLEAN;
    signal reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_301 : BOOLEAN;
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_309 : BOOLEAN;
    signal i_4_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_894 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_326 : BOOLEAN;
    signal exitcond3_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_571_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_910 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_341 : BOOLEAN;
    signal exitcond2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_356 : BOOLEAN;
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_fu_604_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_cast_reg_942 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_368 : BOOLEAN;
    signal i_7_fu_614_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_951 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_reg_956 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mell_load_cast_cast_fu_629_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_cast_cast_reg_966 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_386 : BOOLEAN;
    signal tmp_80_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_402 : BOOLEAN;
    signal tmp_87_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_416 : BOOLEAN;
    signal e_addr_2_reg_998 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mellIdx_1_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_431 : BOOLEAN;
    signal p_mellIdx_fu_682_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_442 : BOOLEAN;
    signal i_6_fu_695_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1021 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_451 : BOOLEAN;
    signal e_addr_1_reg_1026 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_cast_fu_734_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr_cast_reg_1031 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_469 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_478 : BOOLEAN;
    signal tmp_41_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_492 : BOOLEAN;
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_501 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_509 : BOOLEAN;
    signal next_mul_fu_801_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_1070 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_518 : BOOLEAN;
    signal k_fu_813_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_1078 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_i_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_trn2_cast_fu_833_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_i_trn2_cast_reg_1088 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_fu_843_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_1096 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_536 : BOOLEAN;
    signal exitcond_i_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dctMatrix_addr4_fu_858_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dctMatrix_addr4_reg_1106 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_i_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_i_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr1_fu_864_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_reg_1116 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_559 : BOOLEAN;
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_i_reg_1131 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st91_fsm_90 : STD_LOGIC;
    signal ap_sig_bdd_568 : BOOLEAN;
    signal tmp_33_i_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_i_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st92_fsm_91 : STD_LOGIC;
    signal ap_sig_bdd_577 : BOOLEAN;
    signal grp_voicerec_FFT_fu_406_ap_start : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_ap_done : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_ap_idle : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_ap_ready : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_c_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_voicerec_FFT_fu_406_c_ce0 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_c_we0 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_FFT_fu_406_c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_FFT_fu_406_c_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_voicerec_FFT_fu_406_c_ce1 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_c_we1 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_406_c_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_FFT_fu_406_c_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_289 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_603 : BOOLEAN;
    signal i_1_reg_301 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_612 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_622 : BOOLEAN;
    signal i_2_reg_313 : STD_LOGIC_VECTOR (8 downto 0);
    signal mellIdx_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_637 : BOOLEAN;
    signal storemerge_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_360 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st93_fsm_92 : STD_LOGIC;
    signal ap_sig_bdd_653 : BOOLEAN;
    signal phi_mul_reg_371 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_i_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_voicerec_FFT_fu_406_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_741 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_748 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_755 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_763 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_771 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_778 : BOOLEAN;
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_786 : BOOLEAN;
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_800 : BOOLEAN;
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_807 : BOOLEAN;
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_814 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_821 : BOOLEAN;
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_fu_450_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_i_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st86_fsm_85 : STD_LOGIC;
    signal ap_sig_bdd_842 : BOOLEAN;
    signal i_cast7_fu_506_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_522_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_fu_532_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_577_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_fu_588_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_cast_fu_625_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mell_load_1_cast_cast_fu_653_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_2_cast_fu_673_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_706_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_717_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_713_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_724_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_assign_to_int_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mx_i_i_fu_779_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mx_i_i_cast_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_trn_cast_fu_854_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr1_cast_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_416_ce : STD_LOGIC;
    signal grp_fu_423_ce : STD_LOGIC;
    signal grp_fu_429_ce : STD_LOGIC;
    signal grp_fu_442_ce : STD_LOGIC;
    signal grp_fu_447_ce : STD_LOGIC;
    signal tmp_40_fu_457_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_462_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);

    component voicerec_FFT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        c_ce1 : OUT STD_LOGIC;
        c_we1 : OUT STD_LOGIC;
        c_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_sitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component voicerec_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_processChunk_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_processChunk_e IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_processChunk_spec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_processChunk_mell IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component voicerec_processChunk_dctMatrix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c_U : component voicerec_processChunk_c
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0,
        address1 => c_address1,
        ce1 => c_ce1,
        we1 => c_we1,
        d1 => c_d1,
        q1 => c_q1);

    e_U : component voicerec_processChunk_e
    generic map (
        DataWidth => 32,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_address0,
        ce0 => e_ce0,
        we0 => e_we0,
        d0 => e_d0,
        q0 => e_q0);

    spec_U : component voicerec_processChunk_spec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => spec_address0,
        ce0 => spec_ce0,
        we0 => spec_we0,
        d0 => spec_d0,
        q0 => spec_q0);

    mell_U : component voicerec_processChunk_mell
    generic map (
        DataWidth => 8,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mell_address0,
        ce0 => mell_ce0,
        q0 => mell_q0);

    dctMatrix_U : component voicerec_processChunk_dctMatrix
    generic map (
        DataWidth => 32,
        AddressRange => 676,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dctMatrix_address0,
        ce0 => dctMatrix_ce0,
        q0 => dctMatrix_q0);

    grp_voicerec_FFT_fu_406 : component voicerec_FFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_voicerec_FFT_fu_406_ap_start,
        ap_done => grp_voicerec_FFT_fu_406_ap_done,
        ap_idle => grp_voicerec_FFT_fu_406_ap_idle,
        ap_ready => grp_voicerec_FFT_fu_406_ap_ready,
        c_address0 => grp_voicerec_FFT_fu_406_c_address0,
        c_ce0 => grp_voicerec_FFT_fu_406_c_ce0,
        c_we0 => grp_voicerec_FFT_fu_406_c_we0,
        c_d0 => grp_voicerec_FFT_fu_406_c_d0,
        c_q0 => grp_voicerec_FFT_fu_406_c_q0,
        c_address1 => grp_voicerec_FFT_fu_406_c_address1,
        c_ce1 => grp_voicerec_FFT_fu_406_c_ce1,
        c_we1 => grp_voicerec_FFT_fu_406_c_we1,
        c_d1 => grp_voicerec_FFT_fu_406_c_d1,
        c_q1 => grp_voicerec_FFT_fu_406_c_q1);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U16 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p0,
        din1 => grp_fu_416_p1,
        opcode => grp_fu_416_opcode,
        ce => grp_fu_416_ce,
        dout => grp_fu_416_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U17 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_423_p0,
        din1 => grp_fu_423_p1,
        ce => grp_fu_423_ce,
        dout => grp_fu_423_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U18 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        ce => grp_fu_429_ce,
        dout => grp_fu_429_p2);

    voicerec_fdiv_32ns_32ns_32_16_U19 : component voicerec_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_442_p0,
        din1 => grp_fu_442_p1,
        ce => grp_fu_442_ce,
        dout => grp_fu_442_p2);

    voicerec_sitofp_64ns_32_6_U20 : component voicerec_sitofp_64ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_447_p0,
        ce => grp_fu_447_ce,
        dout => grp_fu_447_p1);

    voicerec_fptrunc_64ns_32_1_U21 : component voicerec_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_33_i_fu_450_p0,
        dout => tmp_33_i_fu_450_p1);

    voicerec_fpext_32ns_64_1_U22 : component voicerec_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_31_i_fu_453_p0,
        dout => tmp_31_i_fu_453_p1);

    voicerec_fcmp_32ns_32ns_1_1_U23 : component voicerec_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_40_fu_457_p0,
        din1 => tmp_40_fu_457_p1,
        opcode => tmp_40_fu_457_opcode,
        dout => tmp_40_fu_457_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U24 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_462_p0,
        din1 => grp_fu_462_p1,
        ce => grp_fu_462_ce,
        dout => grp_fu_462_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_voicerec_FFT_fu_406_ap_start_ap_start_reg assign process. --
    grp_voicerec_FFT_fu_406_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_voicerec_FFT_fu_406_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_510_p2 = ap_const_lv1_0)))) then 
                    grp_voicerec_FFT_fu_406_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_FFT_fu_406_ap_ready)) then 
                    grp_voicerec_FFT_fu_406_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_301 assign process. --
    i_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                i_1_reg_301 <= i_5_reg_910;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = grp_voicerec_FFT_fu_406_ap_done)))) then 
                i_1_reg_301 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- i_2_reg_313 assign process. --
    i_2_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)))) then 
                i_2_reg_313 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                i_2_reg_313 <= i_7_reg_951;
            end if; 
        end if;
    end process;

    -- i_3_reg_337 assign process. --
    i_3_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond1_fu_608_p2)))) then 
                i_3_reg_337 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
                i_3_reg_337 <= i_6_reg_1021;
            end if; 
        end if;
    end process;

    -- i_reg_289 assign process. --
    i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_289 <= i_4_reg_894;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_289 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- k_i_reg_360 assign process. --
    k_i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) and not((ap_const_lv1_0 = exitcond_fu_689_p2)))) then 
                k_i_reg_360 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92)) then 
                k_i_reg_360 <= k_reg_1078;
            end if; 
        end if;
    end process;

    -- mellIdx_reg_325 assign process. --
    mellIdx_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_565_p2)))) then 
                mellIdx_reg_325 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                mellIdx_reg_325 <= p_mellIdx_fu_682_p3;
            end if; 
        end if;
    end process;

    -- n_i_reg_395 assign process. --
    n_i_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st85_fsm_84)) then 
                n_i_reg_395 <= n_reg_1096;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = exitcond3_i_fu_807_p2))) then 
                n_i_reg_395 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_371 assign process. --
    phi_mul_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) and not((ap_const_lv1_0 = exitcond_fu_689_p2)))) then 
                phi_mul_reg_371 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92)) then 
                phi_mul_reg_371 <= next_mul_reg_1070;
            end if; 
        end if;
    end process;

    -- storemerge_reg_348 assign process. --
    storemerge_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and not((ap_const_lv1_0 = tmp_41_fu_774_p2)))) then 
                storemerge_reg_348 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
                storemerge_reg_348 <= grp_fu_423_p2;
            end if; 
        end if;
    end process;

    -- sum_i_reg_383 assign process. --
    sum_i_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st85_fsm_84)) then 
                sum_i_reg_383 <= grp_fu_416_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = exitcond3_i_fu_807_p2))) then 
                sum_i_reg_383 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_lv1_0 = exitcond_i_fu_837_p2))) then
                dctMatrix_addr4_reg_1106 <= dctMatrix_addr4_fu_858_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) and (ap_const_lv1_0 = exitcond_fu_689_p2))) then
                e_addr_1_reg_1026 <= tmp_81_fu_701_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = tmp_87_fu_657_p2))) then
                e_addr_2_reg_998 <= tmp_79_reg_956(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                    i_2_cast_reg_942(8 downto 0) <= i_2_cast_fu_604_p1(8 downto 0);
                i_7_reg_951 <= i_7_fu_614_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_894 <= i_4_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_5_reg_910 <= i_5_fu_571_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                i_6_reg_1021 <= i_6_fu_695_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then
                k_reg_1078 <= k_fu_813_p2;
                next_mul_reg_1070 <= next_mul_fu_801_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                mellIdx_1_reg_1003 <= grp_fu_467_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                    mell_load_cast_cast_reg_966(7 downto 0) <= mell_load_cast_cast_fu_629_p1(7 downto 0);
                tmp_80_reg_971 <= tmp_80_fu_633_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then
                n_reg_1096 <= n_fu_843_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and not((ap_const_lv1_0 = exitcond_i_fu_837_p2)))) then
                p_addr1_reg_1116 <= p_addr1_fu_864_p2;
                tmp_31_i_reg_1111 <= tmp_31_i_fu_453_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) and not((ap_const_lv1_0 = exitcond_fu_689_p2)))) then
                    p_addr_cast_reg_1031(11 downto 1) <= p_addr_cast_fu_734_p1(11 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53) or (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79))) then
                reg_473 <= grp_fu_423_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st85_fsm_84))) then
                reg_480 <= grp_fu_416_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then
                reg_488 <= spec_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72))) then
                reg_493 <= e_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58))) then
                reg_500 <= grp_fu_416_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_lv1_0 = exitcond3_i_fu_807_p2))) then
                    s_reg_1083(1 downto 0) <= s_fu_825_p3(1 downto 0);    s_reg_1083(7 downto 4) <= s_fu_825_p3(7 downto 4);    s_reg_1083(10) <= s_fu_825_p3(10);    s_reg_1083(16) <= s_fu_825_p3(16);    s_reg_1083(18) <= s_fu_825_p3(18);    s_reg_1083(21 downto 20) <= s_fu_825_p3(21 downto 20);    s_reg_1083(23) <= s_fu_825_p3(23);
                    tmp_26_i_trn2_cast_reg_1088(3 downto 0) <= tmp_26_i_trn2_cast_fu_833_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st91_fsm_90)) then
                tmp_32_i_reg_1131 <= grp_fu_462_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st92_fsm_91)) then
                tmp_33_i_reg_1136 <= tmp_33_i_fu_450_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and (ap_const_lv1_0 = tmp_41_fu_774_p2))) then
                    tmp_3_i_i_reg_1049(22 downto 0) <= tmp_3_i_i_fu_796_p1(22 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then
                tmp_40_reg_1036 <= tmp_40_fu_457_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_75_reg_937 <= grp_fu_429_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond1_fu_608_p2))) then
                tmp_79_reg_956 <= tmp_79_fu_620_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then
                tmp_7_i_i_reg_1060 <= grp_fu_442_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                tmp_84_reg_980 <= tmp_84_fu_643_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                tmp_87_reg_989 <= tmp_87_fu_657_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                y_reg_1055 <= grp_fu_447_p1;
            end if;
        end if;
    end process;
    i_2_cast_reg_942(9) <= '0';
    mell_load_cast_cast_reg_966(8) <= '0';
    p_addr_cast_reg_1031(0) <= '0';
    tmp_3_i_i_reg_1049(31 downto 23) <= "001111110";
    s_reg_1083(3 downto 2) <= "00";
    s_reg_1083(9 downto 8) <= "00";
    s_reg_1083(15 downto 11) <= "00000";
    s_reg_1083(17 downto 17) <= "0";
    s_reg_1083(19 downto 19) <= "0";
    s_reg_1083(22 downto 22) <= "0";
    s_reg_1083(31 downto 24) <= "00111111";
    tmp_26_i_trn2_cast_reg_1088(11 downto 4) <= "00000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_510_p2, exitcond2_fu_565_p2, exitcond1_fu_608_p2, tmp_80_fu_633_p2, tmp_84_fu_643_p2, tmp_87_fu_657_p2, exitcond_fu_689_p2, tmp_41_fu_774_p2, exitcond3_i_fu_807_p2, exitcond_i_fu_837_p2, grp_voicerec_FFT_fu_406_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_510_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_voicerec_FFT_fu_406_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_565_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_608_p2))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = tmp_80_fu_633_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                if ((ap_const_lv1_0 = tmp_84_fu_643_p2)) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st28_fsm_27 => 
                if (not((ap_const_lv1_0 = tmp_87_fu_657_p2))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st37_fsm_36 => 
                if (not((ap_const_lv1_0 = exitcond_fu_689_p2))) then
                    ap_NS_fsm <= ap_ST_st71_fsm_70;
                else
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                end if;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                if (not((ap_const_lv1_0 = tmp_41_fu_774_p2))) then
                    ap_NS_fsm <= ap_ST_st70_fsm_69;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                end if;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st71_fsm_70 => 
                if (not((ap_const_lv1_0 = exitcond3_i_fu_807_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_71;
                end if;
            when ap_ST_st72_fsm_71 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_837_p2))) then
                    ap_NS_fsm <= ap_ST_st86_fsm_85;
                else
                    ap_NS_fsm <= ap_ST_st73_fsm_72;
                end if;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st71_fsm_70, exitcond3_i_fu_807_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and not((ap_const_lv1_0 = exitcond3_i_fu_807_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, exitcond3_i_fu_807_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and not((ap_const_lv1_0 = exitcond3_i_fu_807_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_187 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_218 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_235 assign process. --
    ap_sig_bdd_235_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_235 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_243 assign process. --
    ap_sig_bdd_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_243 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_251 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(84 downto 84));
    end process;


    -- ap_sig_bdd_268 assign process. --
    ap_sig_bdd_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_268 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_284 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_292 assign process. --
    ap_sig_bdd_292_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_292 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_301 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_309 assign process. --
    ap_sig_bdd_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_309 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_326 assign process. --
    ap_sig_bdd_326_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_326 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_341 assign process. --
    ap_sig_bdd_341_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_341 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_356 assign process. --
    ap_sig_bdd_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_356 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_368 assign process. --
    ap_sig_bdd_368_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_368 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_386 assign process. --
    ap_sig_bdd_386_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_386 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_402 assign process. --
    ap_sig_bdd_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_402 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_416 assign process. --
    ap_sig_bdd_416_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_416 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_431 assign process. --
    ap_sig_bdd_431_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_431 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_442 assign process. --
    ap_sig_bdd_442_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_442 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_451 assign process. --
    ap_sig_bdd_451_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_451 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_469 assign process. --
    ap_sig_bdd_469_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_469 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_478 assign process. --
    ap_sig_bdd_478_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_478 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_492 assign process. --
    ap_sig_bdd_492_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_492 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_501 assign process. --
    ap_sig_bdd_501_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_501 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_509 assign process. --
    ap_sig_bdd_509_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_509 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_518 assign process. --
    ap_sig_bdd_518_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_518 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_536 assign process. --
    ap_sig_bdd_536_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_536 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_559 assign process. --
    ap_sig_bdd_559_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_559 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_568 assign process. --
    ap_sig_bdd_568_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_568 <= (ap_const_lv1_1 = ap_CS_fsm(90 downto 90));
    end process;


    -- ap_sig_bdd_577 assign process. --
    ap_sig_bdd_577_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_577 <= (ap_const_lv1_1 = ap_CS_fsm(91 downto 91));
    end process;


    -- ap_sig_bdd_603 assign process. --
    ap_sig_bdd_603_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_603 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_612 assign process. --
    ap_sig_bdd_612_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_612 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_622 assign process. --
    ap_sig_bdd_622_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_622 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_637 assign process. --
    ap_sig_bdd_637_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_637 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_653 assign process. --
    ap_sig_bdd_653_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_653 <= (ap_const_lv1_1 = ap_CS_fsm(92 downto 92));
    end process;


    -- ap_sig_bdd_741 assign process. --
    ap_sig_bdd_741_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_741 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_748 assign process. --
    ap_sig_bdd_748_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_748 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_755 assign process. --
    ap_sig_bdd_755_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_755 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_763 assign process. --
    ap_sig_bdd_763_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_763 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_771 assign process. --
    ap_sig_bdd_771_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_771 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_778 assign process. --
    ap_sig_bdd_778_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_778 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_786 assign process. --
    ap_sig_bdd_786_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_786 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_800 assign process. --
    ap_sig_bdd_800_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_800 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_807 assign process. --
    ap_sig_bdd_807_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_807 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_814 assign process. --
    ap_sig_bdd_814_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_814 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_821 assign process. --
    ap_sig_bdd_821_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_821 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_842 assign process. --
    ap_sig_bdd_842_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_842 <= (ap_const_lv1_1 = ap_CS_fsm(85 downto 85));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_741)
    begin
        if (ap_sig_bdd_741) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_800)
    begin
        if (ap_sig_bdd_800) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_622)
    begin
        if (ap_sig_bdd_622) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_368)
    begin
        if (ap_sig_bdd_368) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_386)
    begin
        if (ap_sig_bdd_386) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_268)
    begin
        if (ap_sig_bdd_268) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_748)
    begin
        if (ap_sig_bdd_748) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_235)
    begin
        if (ap_sig_bdd_235) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_402)
    begin
        if (ap_sig_bdd_402) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_416)
    begin
        if (ap_sig_bdd_416) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_326)
    begin
        if (ap_sig_bdd_326) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_755)
    begin
        if (ap_sig_bdd_755) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_301)
    begin
        if (ap_sig_bdd_301) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_431)
    begin
        if (ap_sig_bdd_431) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_442)
    begin
        if (ap_sig_bdd_442) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_451)
    begin
        if (ap_sig_bdd_451) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_284)
    begin
        if (ap_sig_bdd_284) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_469)
    begin
        if (ap_sig_bdd_469) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_603)
    begin
        if (ap_sig_bdd_603) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_478)
    begin
        if (ap_sig_bdd_478) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_243)
    begin
        if (ap_sig_bdd_243) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_492)
    begin
        if (ap_sig_bdd_492) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_807)
    begin
        if (ap_sig_bdd_807) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_612)
    begin
        if (ap_sig_bdd_612) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_763)
    begin
        if (ap_sig_bdd_763) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_814)
    begin
        if (ap_sig_bdd_814) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_54 assign process. --
    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_bdd_771)
    begin
        if (ap_sig_bdd_771) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st59_fsm_58 assign process. --
    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_bdd_309)
    begin
        if (ap_sig_bdd_309) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_341)
    begin
        if (ap_sig_bdd_341) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_59 assign process. --
    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_bdd_501)
    begin
        if (ap_sig_bdd_501) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_778)
    begin
        if (ap_sig_bdd_778) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_251)
    begin
        if (ap_sig_bdd_251) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_65 assign process. --
    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_bdd_821)
    begin
        if (ap_sig_bdd_821) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_509)
    begin
        if (ap_sig_bdd_509) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_356)
    begin
        if (ap_sig_bdd_356) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_637)
    begin
        if (ap_sig_bdd_637) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_518)
    begin
        if (ap_sig_bdd_518) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_71 assign process. --
    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_bdd_536)
    begin
        if (ap_sig_bdd_536) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_292)
    begin
        if (ap_sig_bdd_292) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_75 assign process. --
    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_559)
    begin
        if (ap_sig_bdd_559) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st80_fsm_79 assign process. --
    ap_sig_cseq_ST_st80_fsm_79_assign_proc : process(ap_sig_bdd_218)
    begin
        if (ap_sig_bdd_218) then 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st81_fsm_80 assign process. --
    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_bdd_786)
    begin
        if (ap_sig_bdd_786) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st85_fsm_84 assign process. --
    ap_sig_cseq_ST_st85_fsm_84_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st86_fsm_85 assign process. --
    ap_sig_cseq_ST_st86_fsm_85_assign_proc : process(ap_sig_bdd_842)
    begin
        if (ap_sig_bdd_842) then 
            ap_sig_cseq_ST_st86_fsm_85 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st86_fsm_85 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st91_fsm_90 assign process. --
    ap_sig_cseq_ST_st91_fsm_90_assign_proc : process(ap_sig_bdd_568)
    begin
        if (ap_sig_bdd_568) then 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st92_fsm_91 assign process. --
    ap_sig_cseq_ST_st92_fsm_91_assign_proc : process(ap_sig_bdd_577)
    begin
        if (ap_sig_bdd_577) then 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st93_fsm_92 assign process. --
    ap_sig_cseq_ST_st93_fsm_92_assign_proc : process(ap_sig_bdd_653)
    begin
        if (ap_sig_bdd_653) then 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_187)
    begin
        if (ap_sig_bdd_187) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_406_c_address0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_66_fu_538_p1, tmp_71_fu_583_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_66_fu_538_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= tmp_71_fu_583_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= grp_voicerec_FFT_fu_406_c_address0;
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_406_c_address1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_68_fu_549_p1, tmp_74_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_68_fu_549_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= tmp_74_fu_594_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= grp_voicerec_FFT_fu_406_c_address1;
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_406_c_ce0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_ce0 <= grp_voicerec_FFT_fu_406_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_406_c_ce1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_ce1 <= grp_voicerec_FFT_fu_406_c_ce1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(inputSound_q0, grp_voicerec_FFT_fu_406_c_d0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_d0 <= inputSound_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= grp_voicerec_FFT_fu_406_c_d0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(grp_voicerec_FFT_fu_406_c_d1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= grp_voicerec_FFT_fu_406_c_d1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(grp_voicerec_FFT_fu_406_c_we0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_we0 <= grp_voicerec_FFT_fu_406_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(grp_voicerec_FFT_fu_406_c_we1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_we1 <= grp_voicerec_FFT_fu_406_c_we1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dctMatrix_addr4_fu_858_p2 <= std_logic_vector(unsigned(tmp_28_i_trn_cast_fu_854_p1) + unsigned(phi_mul_reg_371));
    dctMatrix_address0 <= tmp_58_fu_868_p1(10 - 1 downto 0);

    -- dctMatrix_ce0 assign process. --
    dctMatrix_ce0_assign_proc : process(ap_sig_cseq_ST_st76_fsm_75)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75)) then 
            dctMatrix_ce0 <= ap_const_logic_1;
        else 
            dctMatrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- e_address0 assign process. --
    e_address0_assign_proc : process(tmp_79_reg_956, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, e_addr_2_reg_998, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st37_fsm_36, e_addr_1_reg_1026, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st70_fsm_69, tmp_70_fu_560_p1, tmp_81_fu_701_p1, tmp_28_i_fu_849_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            e_address0 <= e_addr_1_reg_1026;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            e_address0 <= e_addr_2_reg_998;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            e_address0 <= tmp_70_fu_560_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            e_address0 <= tmp_28_i_fu_849_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            e_address0 <= tmp_81_fu_701_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            e_address0 <= tmp_79_reg_956(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26))) then 
            e_address0 <= ap_const_lv5_0;
        else 
            e_address0 <= "XXXXX";
        end if; 
    end process;


    -- e_ce0 assign process. --
    e_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st70_fsm_69)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69))) then 
            e_ce0 <= ap_const_logic_1;
        else 
            e_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- e_d0 assign process. --
    e_d0_assign_proc : process(reg_480, reg_500, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st70_fsm_69, storemerge_reg_348)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            e_d0 <= storemerge_reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            e_d0 <= reg_500;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            e_d0 <= reg_480;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            e_d0 <= ap_const_lv32_0;
        else 
            e_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- e_we0 assign process. --
    e_we0_assign_proc : process(tmp_80_reg_971, tmp_84_reg_980, ap_sig_cseq_ST_st27_fsm_26, tmp_87_reg_989, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st70_fsm_69, tmp_69_fu_554_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_69_fu_554_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = tmp_80_reg_971))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and not((ap_const_lv1_0 = tmp_84_reg_980)) and (ap_const_lv1_0 = tmp_87_reg_989)))) then 
            e_we0 <= ap_const_logic_1;
        else 
            e_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_608_p2 <= "1" when (i_2_reg_313 = ap_const_lv9_100) else "0";
    exitcond2_fu_565_p2 <= "1" when (i_1_reg_301 = ap_const_lv9_100) else "0";
    exitcond3_fu_510_p2 <= "1" when (i_reg_289 = ap_const_lv9_100) else "0";
    exitcond3_i_fu_807_p2 <= "1" when (k_i_reg_360 = ap_const_lv4_E) else "0";
    exitcond_fu_689_p2 <= "1" when (i_3_reg_337 = ap_const_lv5_1A) else "0";
    exitcond_i_fu_837_p2 <= "1" when (n_i_reg_395 = ap_const_lv5_1A) else "0";
    grp_fu_416_ce <= ap_const_logic_1;

    -- grp_fu_416_opcode assign process. --
    grp_fu_416_opcode_assign_proc : process(ap_sig_cseq_ST_st40_fsm_39, tmp_41_fu_774_p2, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60))) then 
            grp_fu_416_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and (ap_const_lv1_0 = tmp_41_fu_774_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80))) then 
            grp_fu_416_opcode <= ap_const_lv2_0;
        else 
            grp_fu_416_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_416_p0 assign process. --
    grp_fu_416_p0_assign_proc : process(reg_473, reg_493, reg_500, ap_sig_cseq_ST_st40_fsm_39, tmp_3_i_i_fu_796_p1, sum_i_reg_383, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            grp_fu_416_p0 <= sum_i_reg_383;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60))) then 
            grp_fu_416_p0 <= reg_500;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            grp_fu_416_p0 <= tmp_3_i_i_fu_796_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_416_p0 <= reg_493;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_416_p0 <= reg_473;
        else 
            grp_fu_416_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_416_p1 assign process. --
    grp_fu_416_p1_assign_proc : process(reg_473, reg_488, tmp_75_reg_937, ap_sig_cseq_ST_st40_fsm_39, tmp_7_i_i_reg_1060, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            grp_fu_416_p1 <= tmp_7_i_i_reg_1060;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80))) then 
            grp_fu_416_p1 <= reg_473;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_416_p1 <= ap_const_lv32_C2F87377;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            grp_fu_416_p1 <= ap_const_lv32_3EB444F9;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_416_p1 <= reg_488;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_416_p1 <= tmp_75_reg_937;
        else 
            grp_fu_416_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_423_ce <= ap_const_logic_1;

    -- grp_fu_423_p0 assign process. --
    grp_fu_423_p0_assign_proc : process(c_q0, reg_473, reg_480, ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st6_fsm_5, tmp_3_i_i_reg_1049, y_reg_1055, s_reg_1083, ap_sig_cseq_ST_st77_fsm_76, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st66_fsm_65)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then 
            grp_fu_423_p0 <= reg_473;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then 
            grp_fu_423_p0 <= s_reg_1083;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_423_p0 <= tmp_3_i_i_reg_1049;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_423_p0 <= y_reg_1055;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65))) then 
            grp_fu_423_p0 <= reg_480;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_423_p0 <= c_q0;
        else 
            grp_fu_423_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_423_p1 assign process. --
    grp_fu_423_p1_assign_proc : process(c_q0, e_q0, dctMatrix_q0, ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st77_fsm_76, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st66_fsm_65)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then 
            grp_fu_423_p1 <= dctMatrix_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then 
            grp_fu_423_p1 <= e_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65)) then 
            grp_fu_423_p1 <= ap_const_lv32_3F317218;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_423_p1 <= ap_const_lv32_3FBFBF75;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_423_p1 <= ap_const_lv32_34000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            grp_fu_423_p1 <= ap_const_lv32_3B800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_423_p1 <= c_q0;
        else 
            grp_fu_423_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_429_ce <= ap_const_logic_1;
    grp_fu_429_p0 <= c_q1;
    grp_fu_429_p1 <= c_q1;
    grp_fu_442_ce <= ap_const_logic_1;
    grp_fu_442_p0 <= ap_const_lv32_3FDCE9A3;
    grp_fu_442_p1 <= reg_480;
    grp_fu_447_ce <= ap_const_logic_1;
    grp_fu_447_p0 <= std_logic_vector(resize(unsigned(x_assign_to_int_fu_738_p1),64));
    grp_fu_462_ce <= ap_const_logic_1;
    grp_fu_462_p0 <= tmp_31_i_reg_1111;
    grp_fu_462_p1 <= ap_const_lv64_3FD1C01AA03BE89E;
    grp_fu_467_p2 <= std_logic_vector(unsigned(mellIdx_reg_325) + unsigned(ap_const_lv32_1));
    grp_voicerec_FFT_fu_406_ap_start <= grp_voicerec_FFT_fu_406_ap_start_ap_start_reg;
    grp_voicerec_FFT_fu_406_c_q0 <= c_q0;
    grp_voicerec_FFT_fu_406_c_q1 <= c_q1;
    i_2_cast_fu_604_p1 <= std_logic_vector(resize(unsigned(i_2_reg_313),10));
    i_4_fu_516_p2 <= std_logic_vector(unsigned(i_reg_289) + unsigned(ap_const_lv9_1));
    i_5_fu_571_p2 <= std_logic_vector(unsigned(i_1_reg_301) + unsigned(ap_const_lv9_1));
    i_6_fu_695_p2 <= std_logic_vector(unsigned(i_3_reg_337) + unsigned(ap_const_lv5_1));
    i_7_fu_614_p2 <= std_logic_vector(unsigned(i_2_reg_313) + unsigned(ap_const_lv9_1));
    i_cast7_fu_506_p1 <= std_logic_vector(resize(unsigned(i_reg_289),13));
    inputSound_address0 <= tmp_s_fu_527_p1(13 - 1 downto 0);

    -- inputSound_ce0 assign process. --
    inputSound_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            inputSound_ce0 <= ap_const_logic_1;
        else 
            inputSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_fu_813_p2 <= std_logic_vector(unsigned(k_i_reg_360) + unsigned(ap_const_lv4_1));

    -- mell_address0 assign process. --
    mell_address0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, tmp_79_fu_620_p1, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st35_fsm_34, tmp_86_fu_648_p1, tmp_90_fu_668_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            mell_address0 <= tmp_90_fu_668_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            mell_address0 <= tmp_86_fu_648_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            mell_address0 <= tmp_79_fu_620_p1(5 - 1 downto 0);
        else 
            mell_address0 <= "XXXXX";
        end if; 
    end process;


    -- mell_ce0 assign process. --
    mell_ce0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34))) then 
            mell_ce0 <= ap_const_logic_1;
        else 
            mell_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mell_load_1_cast_cast_fu_653_p1 <= std_logic_vector(resize(unsigned(mell_q0),9));
    mell_load_2_cast_fu_673_p1 <= std_logic_vector(resize(unsigned(mell_q0),10));
    mell_load_cast_cast_fu_629_p1 <= std_logic_vector(resize(unsigned(mell_q0),9));
    mell_load_cast_fu_625_p1 <= std_logic_vector(resize(unsigned(mell_q0),10));
    mx_i_i_cast_fu_787_p1 <= std_logic_vector(resize(unsigned(mx_i_i_fu_779_p3),32));
    mx_i_i_fu_779_p3 <= (ap_const_lv7_7E & tmp_28_fu_752_p1);
    n_fu_843_p2 <= std_logic_vector(unsigned(n_i_reg_395) + unsigned(ap_const_lv5_1));
    next_mul_fu_801_p2 <= std_logic_vector(unsigned(phi_mul_reg_371) + unsigned(ap_const_lv9_1A));
    notlhs_fu_756_p2 <= "0" when (tmp_37_fu_742_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_762_p2 <= "1" when (tmp_28_fu_752_p1 = ap_const_lv23_0) else "0";
        p_addr1_cast_fu_872_p1 <= std_logic_vector(resize(signed(p_addr1_reg_1116),32));

    p_addr1_fu_864_p2 <= std_logic_vector(signed(p_addr_cast_reg_1031) + signed(tmp_26_i_trn2_cast_reg_1088));
        p_addr_cast_fu_734_p1 <= std_logic_vector(resize(signed(p_addr_fu_728_p2),12));

    p_addr_fu_728_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_713_p1) - unsigned(p_shl5_cast_fu_724_p1));
    p_mellIdx_fu_682_p3 <= 
        mellIdx_1_reg_1003 when (tmp_91_fu_677_p2(0) = '1') else 
        mellIdx_reg_325;
    p_shl5_cast_fu_724_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_717_p3),11));
    p_shl_cast_fu_713_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_706_p3),11));
    ret_address0 <= tmp_57_fu_875_p1(10 - 1 downto 0);

    -- ret_ce0 assign process. --
    ret_ce0_assign_proc : process(ap_sig_cseq_ST_st93_fsm_92)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92)) then 
            ret_ce0 <= ap_const_logic_1;
        else 
            ret_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_d0 <= tmp_33_i_reg_1136;

    -- ret_we0 assign process. --
    ret_we0_assign_proc : process(ap_sig_cseq_ST_st93_fsm_92)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92))) then 
            ret_we0 <= ap_const_logic_1;
        else 
            ret_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_825_p3 <= 
        ap_const_lv32_3F3504F3 when (tmp_i1_fu_819_p2(0) = '1') else 
        ap_const_lv32_3F800000;

    -- spec_address0 assign process. --
    spec_address0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st18_fsm_17, tmp_78_fu_599_p1, tmp_82_fu_638_p1, tmp_88_fu_663_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            spec_address0 <= tmp_78_fu_599_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            spec_address0 <= tmp_88_fu_663_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            spec_address0 <= tmp_82_fu_638_p1(8 - 1 downto 0);
        else 
            spec_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- spec_ce0 assign process. --
    spec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            spec_ce0 <= ap_const_logic_1;
        else 
            spec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spec_d0 <= grp_fu_423_p2;

    -- spec_we0 assign process. --
    spec_we0_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            spec_we0 <= ap_const_logic_1;
        else 
            spec_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_26_fu_532_p2 <= std_logic_vector(shift_left(unsigned(i_reg_289),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_26_i_trn2_cast_fu_833_p1 <= std_logic_vector(resize(unsigned(k_i_reg_360),12));
    tmp_27_fu_577_p2 <= std_logic_vector(shift_left(unsigned(i_1_reg_301),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_28_fu_752_p1 <= x_assign_to_int_fu_738_p1(23 - 1 downto 0);
    tmp_28_i_fu_849_p1 <= std_logic_vector(resize(unsigned(n_i_reg_395),64));
    tmp_28_i_trn_cast_fu_854_p1 <= std_logic_vector(resize(unsigned(n_i_reg_395),9));
    tmp_31_i_fu_453_p0 <= sum_i_reg_383;
    tmp_33_i_fu_450_p0 <= tmp_32_i_reg_1131;
    tmp_37_fu_742_p4 <= x_assign_to_int_fu_738_p1(30 downto 23);
    tmp_39_fu_768_p2 <= (notrhs_fu_762_p2 or notlhs_fu_756_p2);
    tmp_3_i_i_fu_796_p1 <= mx_i_i_cast_fu_787_p1;
    tmp_40_fu_457_opcode <= ap_const_lv5_5;
    tmp_40_fu_457_p0 <= reg_493;
    tmp_40_fu_457_p1 <= ap_const_lv32_0;
    tmp_41_fu_774_p2 <= (tmp_39_fu_768_p2 and tmp_40_reg_1036);
    tmp_55_fu_706_p3 <= (tmp_133 & ap_const_lv4_0);
    tmp_56_fu_717_p3 <= (tmp_133 & ap_const_lv1_0);
    tmp_57_fu_875_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_872_p1),64));
    tmp_58_fu_868_p1 <= std_logic_vector(resize(unsigned(dctMatrix_addr4_reg_1106),64));
    tmp_66_fu_538_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_532_p2),64));
    tmp_67_fu_543_p2 <= (tmp_26_fu_532_p2 or ap_const_lv9_1);
    tmp_68_fu_549_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_543_p2),64));
    tmp_69_fu_554_p2 <= "1" when (unsigned(i_reg_289) < unsigned(ap_const_lv9_1A)) else "0";
    tmp_70_fu_560_p1 <= std_logic_vector(resize(unsigned(i_reg_289),64));
    tmp_71_fu_583_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_577_p2),64));
    tmp_73_fu_588_p2 <= (tmp_27_fu_577_p2 or ap_const_lv9_1);
    tmp_74_fu_594_p1 <= std_logic_vector(resize(unsigned(tmp_73_fu_588_p2),64));
    tmp_78_fu_599_p1 <= std_logic_vector(resize(unsigned(i_1_reg_301),64));
        tmp_79_fu_620_p1 <= std_logic_vector(resize(signed(mellIdx_reg_325),64));

    tmp_80_fu_633_p2 <= "1" when (i_2_cast_reg_942 = mell_load_cast_fu_625_p1) else "0";
    tmp_81_fu_701_p1 <= std_logic_vector(resize(unsigned(i_3_reg_337),64));
    tmp_82_fu_638_p1 <= std_logic_vector(resize(unsigned(i_2_reg_313),64));
    tmp_84_fu_643_p2 <= "1" when (unsigned(i_2_reg_313) > unsigned(mell_load_cast_cast_reg_966)) else "0";
        tmp_86_fu_648_p1 <= std_logic_vector(resize(signed(grp_fu_467_p2),64));

    tmp_87_fu_657_p2 <= "1" when (unsigned(i_2_reg_313) > unsigned(mell_load_1_cast_cast_fu_653_p1)) else "0";
    tmp_88_fu_663_p1 <= std_logic_vector(resize(unsigned(i_2_reg_313),64));
        tmp_90_fu_668_p1 <= std_logic_vector(resize(signed(grp_fu_467_p2),64));

    tmp_91_fu_677_p2 <= "1" when (i_2_cast_reg_942 = mell_load_2_cast_fu_673_p1) else "0";
    tmp_fu_522_p2 <= std_logic_vector(unsigned(sp) + unsigned(i_cast7_fu_506_p1));
    tmp_i1_fu_819_p2 <= "1" when (k_i_reg_360 = ap_const_lv4_0) else "0";
    tmp_s_fu_527_p1 <= std_logic_vector(resize(unsigned(tmp_fu_522_p2),64));
    x_assign_to_int_fu_738_p1 <= reg_493;
end behav;
