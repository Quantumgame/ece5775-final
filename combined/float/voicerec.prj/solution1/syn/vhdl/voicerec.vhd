-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    new_sample : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "voicerec,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.575400,HLS_SYN_LAT=20807164,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=69,HLS_SYN_FF=13477,HLS_SYN_LUT=20312}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3E80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011111010000000";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_80 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal sampleCounter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inSound_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal inSound_ce0 : STD_LOGIC;
    signal inSound_we0 : STD_LOGIC;
    signal inSound_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inSound_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sampleCounter_assign_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_fu_224_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_1_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal i_1_fu_230_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_259 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal outSound_ce0 : STD_LOGIC;
    signal outSound_we0 : STD_LOGIC;
    signal outSound_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outSound_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_classifySound_fu_144_ap_start : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_144_ap_done : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_144_ap_idle : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_144_ap_ready : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_144_result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_voicerec_classifySound_fu_144_result_ce0 : STD_LOGIC;
    signal grp_voicerec_classifySound_fu_144_result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_classifySound_fu_144_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_processChunk_fu_161_ap_start : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_ap_done : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_ap_idle : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_ap_ready : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_sp : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_processChunk_fu_161_ret_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_voicerec_processChunk_fu_161_ret_ce0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_ret_we0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_ret_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_processChunk_fu_161_tmp_133 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_voicerec_processChunk_fu_161_inputSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_processChunk_fu_161_inputSound_ce0 : STD_LOGIC;
    signal grp_voicerec_processChunk_fu_161_inputSound_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_186_ap_start : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_ap_done : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_ap_idle : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_ap_ready : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_inSound_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_voicerec_preprocessSound_fu_186_inSound_ce0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_inSound_we0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_inSound_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_186_inSound_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_preprocessSound_fu_186_outSound_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_voicerec_preprocessSound_fu_186_outSound_ce0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_outSound_we0 : STD_LOGIC;
    signal grp_voicerec_preprocessSound_fu_186_outSound_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_99 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal index_reg_111 : STD_LOGIC_VECTOR (5 downto 0);
    signal sampleCounter_new_phi_fu_126_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sampleCounter_new_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal p_0_phi_fu_137_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_321 : BOOLEAN;
    signal tmp_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component voicerec_classifySound IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_processChunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sp : IN STD_LOGIC_VECTOR (12 downto 0);
        ret_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ret_ce0 : OUT STD_LOGIC;
        ret_we0 : OUT STD_LOGIC;
        ret_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_133 : IN STD_LOGIC_VECTOR (5 downto 0);
        inputSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        inputSound_ce0 : OUT STD_LOGIC;
        inputSound_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_preprocessSound IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inSound_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inSound_ce0 : OUT STD_LOGIC;
        inSound_we0 : OUT STD_LOGIC;
        inSound_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        inSound_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        outSound_ce0 : OUT STD_LOGIC;
        outSound_we0 : OUT STD_LOGIC;
        outSound_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_inSound IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_outSound IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inSound_U : component voicerec_inSound
    generic map (
        DataWidth => 32,
        AddressRange => 16000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inSound_address0,
        ce0 => inSound_ce0,
        we0 => inSound_we0,
        d0 => inSound_d0,
        q0 => inSound_q0);

    result_U : component voicerec_result
    generic map (
        DataWidth => 32,
        AddressRange => 882,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0);

    outSound_U : component voicerec_outSound
    generic map (
        DataWidth => 32,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outSound_address0,
        ce0 => outSound_ce0,
        we0 => outSound_we0,
        d0 => outSound_d0,
        q0 => outSound_q0);

    grp_voicerec_classifySound_fu_144 : component voicerec_classifySound
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_voicerec_classifySound_fu_144_ap_start,
        ap_done => grp_voicerec_classifySound_fu_144_ap_done,
        ap_idle => grp_voicerec_classifySound_fu_144_ap_idle,
        ap_ready => grp_voicerec_classifySound_fu_144_ap_ready,
        result_address0 => grp_voicerec_classifySound_fu_144_result_address0,
        result_ce0 => grp_voicerec_classifySound_fu_144_result_ce0,
        result_q0 => grp_voicerec_classifySound_fu_144_result_q0,
        ap_return => grp_voicerec_classifySound_fu_144_ap_return);

    grp_voicerec_processChunk_fu_161 : component voicerec_processChunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_voicerec_processChunk_fu_161_ap_start,
        ap_done => grp_voicerec_processChunk_fu_161_ap_done,
        ap_idle => grp_voicerec_processChunk_fu_161_ap_idle,
        ap_ready => grp_voicerec_processChunk_fu_161_ap_ready,
        sp => grp_voicerec_processChunk_fu_161_sp,
        ret_address0 => grp_voicerec_processChunk_fu_161_ret_address0,
        ret_ce0 => grp_voicerec_processChunk_fu_161_ret_ce0,
        ret_we0 => grp_voicerec_processChunk_fu_161_ret_we0,
        ret_d0 => grp_voicerec_processChunk_fu_161_ret_d0,
        tmp_133 => grp_voicerec_processChunk_fu_161_tmp_133,
        inputSound_address0 => grp_voicerec_processChunk_fu_161_inputSound_address0,
        inputSound_ce0 => grp_voicerec_processChunk_fu_161_inputSound_ce0,
        inputSound_q0 => grp_voicerec_processChunk_fu_161_inputSound_q0);

    grp_voicerec_preprocessSound_fu_186 : component voicerec_preprocessSound
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_voicerec_preprocessSound_fu_186_ap_start,
        ap_done => grp_voicerec_preprocessSound_fu_186_ap_done,
        ap_idle => grp_voicerec_preprocessSound_fu_186_ap_idle,
        ap_ready => grp_voicerec_preprocessSound_fu_186_ap_ready,
        inSound_address0 => grp_voicerec_preprocessSound_fu_186_inSound_address0,
        inSound_ce0 => grp_voicerec_preprocessSound_fu_186_inSound_ce0,
        inSound_we0 => grp_voicerec_preprocessSound_fu_186_inSound_we0,
        inSound_d0 => grp_voicerec_preprocessSound_fu_186_inSound_d0,
        inSound_q0 => grp_voicerec_preprocessSound_fu_186_inSound_q0,
        outSound_address0 => grp_voicerec_preprocessSound_fu_186_outSound_address0,
        outSound_ce0 => grp_voicerec_preprocessSound_fu_186_outSound_ce0,
        outSound_we0 => grp_voicerec_preprocessSound_fu_186_outSound_we0,
        outSound_d0 => grp_voicerec_preprocessSound_fu_186_outSound_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg assign process. --
    grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond_fu_218_p2 = ap_const_lv1_0)))) then 
                    grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_classifySound_fu_144_ap_ready)) then 
                    grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg assign process. --
    grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_preprocessSound_fu_186_ap_ready)) then 
                    grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg assign process. --
    grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_fu_218_p2 = ap_const_lv1_0))) then 
                    grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_processChunk_fu_161_ap_ready)) then 
                    grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_99 assign process. --
    i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_voicerec_processChunk_fu_161_ap_done)))) then 
                i_reg_99 <= i_1_reg_259;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_186_ap_done)))) then 
                i_reg_99 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    -- index_reg_111 assign process. --
    index_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_voicerec_processChunk_fu_161_ap_done)))) then 
                index_reg_111 <= index_1_reg_254;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_186_ap_done)))) then 
                index_reg_111 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- p_0_reg_133 assign process. --
    p_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0) and not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done))))) then 
                p_0_reg_133 <= grp_voicerec_classifySound_fu_144_ap_return;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_212_p2 = ap_const_lv1_0)))) then 
                p_0_reg_133 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    -- sampleCounter_new_reg_123 assign process. --
    sampleCounter_new_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0) and not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done))))) then 
                sampleCounter_new_reg_123 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_212_p2 = ap_const_lv1_0)))) then 
                sampleCounter_new_reg_123 <= sampleCounter_assign_fu_201_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_fu_218_p2 = ap_const_lv1_0))) then
                i_1_reg_259 <= i_1_fu_230_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                index_1_reg_254 <= index_1_fu_224_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done))))) then
                sampleCounter <= sampleCounter_new_phi_fu_126_p4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_s_reg_247 <= tmp_s_fu_212_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_s_fu_212_p2, tmp_s_reg_247, exitcond_fu_218_p2, grp_voicerec_classifySound_fu_144_ap_done, grp_voicerec_processChunk_fu_161_ap_done, grp_voicerec_preprocessSound_fu_186_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((tmp_s_fu_212_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((ap_start = ap_const_logic_0)) and (tmp_s_fu_212_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_voicerec_preprocessSound_fu_186_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond_fu_218_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_voicerec_processChunk_fu_161_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(tmp_s_reg_247, grp_voicerec_classifySound_fu_144_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_s_reg_247, grp_voicerec_classifySound_fu_144_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(((tmp_s_reg_247 = ap_const_lv1_0) and (ap_const_logic_0 = grp_voicerec_classifySound_fu_144_ap_done))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_phi_fu_137_p4;

    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_321 assign process. --
    ap_sig_bdd_321_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_321 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_321)
    begin
        if (ap_sig_bdd_321) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_218_p2 <= "1" when (index_reg_111 = ap_const_lv6_3D) else "0";
    grp_voicerec_classifySound_fu_144_ap_start <= grp_voicerec_classifySound_fu_144_ap_start_ap_start_reg;
    grp_voicerec_classifySound_fu_144_result_q0 <= result_q0;
    grp_voicerec_preprocessSound_fu_186_ap_start <= grp_voicerec_preprocessSound_fu_186_ap_start_ap_start_reg;
    grp_voicerec_preprocessSound_fu_186_inSound_q0 <= inSound_q0;
    grp_voicerec_processChunk_fu_161_ap_start <= grp_voicerec_processChunk_fu_161_ap_start_ap_start_reg;
    grp_voicerec_processChunk_fu_161_inputSound_q0 <= outSound_q0;
    grp_voicerec_processChunk_fu_161_sp <= i_reg_99;
    grp_voicerec_processChunk_fu_161_tmp_133 <= index_reg_111;
    i_1_fu_230_p2 <= std_logic_vector(unsigned(i_reg_99) + unsigned(ap_const_lv13_80));

    -- inSound_address0 assign process. --
    inSound_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_voicerec_preprocessSound_fu_186_inSound_address0, ap_sig_cseq_ST_st3_fsm_2, tmp_fu_207_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            inSound_address0 <= tmp_fu_207_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inSound_address0 <= grp_voicerec_preprocessSound_fu_186_inSound_address0;
        else 
            inSound_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- inSound_ce0 assign process. --
    inSound_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_voicerec_preprocessSound_fu_186_inSound_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            inSound_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inSound_ce0 <= grp_voicerec_preprocessSound_fu_186_inSound_ce0;
        else 
            inSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- inSound_d0 assign process. --
    inSound_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, new_sample, grp_voicerec_preprocessSound_fu_186_inSound_d0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            inSound_d0 <= new_sample;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inSound_d0 <= grp_voicerec_preprocessSound_fu_186_inSound_d0;
        else 
            inSound_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- inSound_we0 assign process. --
    inSound_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_voicerec_preprocessSound_fu_186_inSound_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))))) then 
            inSound_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inSound_we0 <= grp_voicerec_preprocessSound_fu_186_inSound_we0;
        else 
            inSound_we0 <= ap_const_logic_0;
        end if; 
    end process;

    index_1_fu_224_p2 <= std_logic_vector(unsigned(index_reg_111) + unsigned(ap_const_lv6_1));

    -- outSound_address0 assign process. --
    outSound_address0_assign_proc : process(grp_voicerec_processChunk_fu_161_inputSound_address0, grp_voicerec_preprocessSound_fu_186_outSound_address0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            outSound_address0 <= grp_voicerec_preprocessSound_fu_186_outSound_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            outSound_address0 <= grp_voicerec_processChunk_fu_161_inputSound_address0;
        else 
            outSound_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- outSound_ce0 assign process. --
    outSound_ce0_assign_proc : process(grp_voicerec_processChunk_fu_161_inputSound_ce0, grp_voicerec_preprocessSound_fu_186_outSound_ce0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            outSound_ce0 <= grp_voicerec_preprocessSound_fu_186_outSound_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            outSound_ce0 <= grp_voicerec_processChunk_fu_161_inputSound_ce0;
        else 
            outSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outSound_d0 <= grp_voicerec_preprocessSound_fu_186_outSound_d0;

    -- outSound_we0 assign process. --
    outSound_we0_assign_proc : process(grp_voicerec_preprocessSound_fu_186_outSound_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            outSound_we0 <= grp_voicerec_preprocessSound_fu_186_outSound_we0;
        else 
            outSound_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_0_phi_fu_137_p4 assign process. --
    p_0_phi_fu_137_p4_assign_proc : process(tmp_s_reg_247, grp_voicerec_classifySound_fu_144_ap_return, ap_sig_cseq_ST_st6_fsm_5, p_0_reg_133)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0))) then 
            p_0_phi_fu_137_p4 <= grp_voicerec_classifySound_fu_144_ap_return;
        else 
            p_0_phi_fu_137_p4 <= p_0_reg_133;
        end if; 
    end process;


    -- result_address0 assign process. --
    result_address0_assign_proc : process(tmp_s_reg_247, grp_voicerec_classifySound_fu_144_result_address0, grp_voicerec_processChunk_fu_161_ret_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            result_address0 <= grp_voicerec_processChunk_fu_161_ret_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0))) then 
            result_address0 <= grp_voicerec_classifySound_fu_144_result_address0;
        else 
            result_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- result_ce0 assign process. --
    result_ce0_assign_proc : process(tmp_s_reg_247, grp_voicerec_classifySound_fu_144_result_ce0, grp_voicerec_processChunk_fu_161_ret_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            result_ce0 <= grp_voicerec_processChunk_fu_161_ret_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0))) then 
            result_ce0 <= grp_voicerec_classifySound_fu_144_result_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= grp_voicerec_processChunk_fu_161_ret_d0;

    -- result_we0 assign process. --
    result_we0_assign_proc : process(grp_voicerec_processChunk_fu_161_ret_we0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            result_we0 <= grp_voicerec_processChunk_fu_161_ret_we0;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sampleCounter_assign_fu_201_p2 <= std_logic_vector(unsigned(sampleCounter) + unsigned(ap_const_lv32_1));

    -- sampleCounter_new_phi_fu_126_p4 assign process. --
    sampleCounter_new_phi_fu_126_p4_assign_proc : process(tmp_s_reg_247, sampleCounter_new_reg_123, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (tmp_s_reg_247 = ap_const_lv1_0))) then 
            sampleCounter_new_phi_fu_126_p4 <= ap_const_lv32_0;
        else 
            sampleCounter_new_phi_fu_126_p4 <= sampleCounter_new_reg_123;
        end if; 
    end process;

        tmp_fu_207_p1 <= std_logic_vector(resize(signed(sampleCounter),64));

    tmp_s_fu_212_p2 <= "1" when (signed(sampleCounter_assign_fu_201_p2) < signed(ap_const_lv32_3E80)) else "0";
end behav;
