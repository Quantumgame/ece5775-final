-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_preprocessSound is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inSound_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    inSound_ce0 : OUT STD_LOGIC;
    inSound_we0 : OUT STD_LOGIC;
    inSound_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    inSound_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    outSound_ce0 : OUT STD_LOGIC;
    outSound_we0 : OUT STD_LOGIC;
    outSound_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_preprocessSound is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_3FC3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000011001100110011001100110011001100110011001100110011";
    constant ap_const_lv64_3FC3333340000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000011001100110011001101000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_3E80 : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_1F40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111101000000";
    constant ap_const_lv32_1F3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111100111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal begins_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal begins_ce0 : STD_LOGIC;
    signal begins_we0 : STD_LOGIC;
    signal begins_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal begins_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ends_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ends_ce0 : STD_LOGIC;
    signal ends_we0 : STD_LOGIC;
    signal ends_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ends_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_341_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal first_4_cast4_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_4_cast4_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal i_4_fu_363_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_4_reg_845 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal tmp_18_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal firstSet_1_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal first_3_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_2_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal markBegin_load_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal markBegin_2_cast3_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal markBegin_2_cast3_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_473_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_5_reg_924 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_cond1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_516_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_reg_952 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal tmp_19_fu_520_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_19_reg_957 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_21_reg_962 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal tmp_24_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast2_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast2_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_184 : BOOLEAN;
    signal i_6_fu_661_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_6_reg_991 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal tmp_54_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal ends_addr_3_gep_fu_164_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_cond3_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_238 : BOOLEAN;
    signal inSound_load_2_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal tmp_20_fu_771_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_20_reg_1046 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_25_fu_775_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_25_reg_1051 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_33_reg_1056 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal firstSet_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_4_reg_257 : STD_LOGIC_VECTOR (13 downto 0);
    signal markBegin_2_reg_268 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_287 : BOOLEAN;
    signal i_3_reg_280 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_298 : BOOLEAN;
    signal tmp_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond4_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal deleteFlag_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_deleteFlag_fu_617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal markBegin_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal markBegin_1_cast_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_5_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_index_5_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_i_i_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_i_i2_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_to_int_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_382_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_392_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_2_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_539_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal notrhs1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal markBegin_1_fu_635_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_2_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_789_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal notrhs3_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_296_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component voicerec_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dcmp_64ns_64ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component voicerec_preprocessSound_begins IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    begins_U : component voicerec_preprocessSound_begins
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => begins_address0,
        ce0 => begins_ce0,
        we0 => begins_we0,
        d0 => begins_d0,
        q0 => begins_q0);

    ends_U : component voicerec_preprocessSound_begins
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ends_address0,
        ce0 => ends_ce0,
        we0 => ends_we0,
        d0 => ends_d0,
        q0 => ends_q0);

    voicerec_fpext_32ns_64_1_U1 : component voicerec_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_292_p0,
        dout => grp_fu_292_p1);

    voicerec_dcmp_64ns_64ns_1_1_U2 : component voicerec_dcmp_64ns_64ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        opcode => grp_fu_296_opcode,
        dout => grp_fu_296_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- count_fu_70 assign process. --
    count_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and not((ap_const_lv1_0 = tmp_24_fu_567_p2)))) then 
                count_fu_70 <= count_1_fu_605_p2;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_357_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2)))) then 
                count_fu_70 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- deleteFlag_fu_66 assign process. --
    deleteFlag_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and not((ap_const_lv1_0 = tmp_24_fu_567_p2)))) then 
                deleteFlag_fu_66 <= p_deleteFlag_fu_617_p3;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_357_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2)))) then 
                deleteFlag_fu_66 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- firstSet_reg_221 assign process. --
    firstSet_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_335_p2)))) then 
                firstSet_reg_221 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                firstSet_reg_221 <= firstSet_1_fu_437_p3;
            end if; 
        end if;
    end process;

    -- first_4_reg_257 assign process. --
    first_4_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_335_p2)))) then 
                first_4_reg_257 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                first_4_reg_257 <= i_4_reg_845;
            end if; 
        end if;
    end process;

    -- first_reg_245 assign process. --
    first_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_335_p2)))) then 
                first_reg_245 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                first_reg_245 <= last_2_fu_453_p3;
            end if; 
        end if;
    end process;

    -- i_3_reg_280 assign process. --
    i_3_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                i_3_reg_280 <= i_6_reg_991;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_467_p2)))) then 
                i_3_reg_280 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- i_reg_210 assign process. --
    i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_335_p2))) then 
                i_reg_210 <= i_2_fu_341_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_210 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- index_5_fu_78 assign process. --
    index_5_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (((ap_const_lv1_0 = tmp_54_reg_1011) and (ap_const_lv1_0 = tmp_52_reg_1007)) or ((ap_const_lv1_0 = tmp_52_reg_1007) and (ap_const_lv1_0 = tmp_57_reg_1020))))) then 
                index_5_fu_78 <= p_index_5_fu_704_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_467_p2)))) then 
                index_5_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- index_fu_62 assign process. --
    index_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2) and not((ap_const_lv1_0 = tmp_56_fu_576_p2)))) then 
                index_fu_62 <= index_1_fu_591_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_357_p2 = ap_const_lv1_0)))) then 
                index_fu_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_fu_82 assign process. --
    j_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = or_cond3_fu_739_p2)) and (ap_const_lv1_0 = or_cond4_fu_756_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = or_cond3_reg_1029) and not((ap_const_lv1_0 = tmp_36_fu_817_p2))))) then 
                j_fu_82 <= grp_fu_324_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_467_p2)))) then 
                j_fu_82 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- last_reg_233 assign process. --
    last_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_335_p2)))) then 
                last_reg_233 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                last_reg_233 <= first_3_fu_445_p3;
            end if; 
        end if;
    end process;

    -- markBegin_2_reg_268 assign process. --
    markBegin_2_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                markBegin_2_reg_268 <= i_5_reg_924;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_357_p2 = ap_const_lv1_0)))) then 
                markBegin_2_reg_268 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- markBegin_fu_74 assign process. --
    markBegin_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = or_cond1_reg_929) and not((ap_const_lv1_0 = tmp_50_reg_967)))) then 
                                markBegin_fu_74(13 downto 0) <= markBegin_1_cast_fu_642_p1(13 downto 0);
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_357_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2)))) then 
                markBegin_fu_74(0) <= '0';
                markBegin_fu_74(1) <= '0';
                markBegin_fu_74(2) <= '0';
                markBegin_fu_74(3) <= '0';
                markBegin_fu_74(4) <= '0';
                markBegin_fu_74(5) <= '0';
                markBegin_fu_74(6) <= '0';
                markBegin_fu_74(7) <= '0';
                markBegin_fu_74(8) <= '0';
                markBegin_fu_74(9) <= '0';
                markBegin_fu_74(10) <= '0';
                markBegin_fu_74(11) <= '0';
                markBegin_fu_74(12) <= '0';
                markBegin_fu_74(13) <= '0';
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    first_4_cast4_reg_836(13 downto 0) <= first_4_cast4_fu_353_p1(13 downto 0);
                i_4_reg_845 <= i_4_fu_363_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                    i_3_cast2_reg_979(13 downto 0) <= i_3_cast2_fu_651_p1(13 downto 0);
                i_6_reg_991 <= i_6_fu_661_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i_5_reg_924 <= i_5_fu_473_p2;
                    markBegin_2_cast3_reg_916(13 downto 0) <= markBegin_2_cast3_fu_463_p1(13 downto 0);
                    markBegin_load_reg_910(13 downto 0) <= markBegin_fu_74(13 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                inSound_load_2_reg_1041 <= inSound_q0;
                tmp_20_reg_1046 <= tmp_20_fu_771_p1;
                tmp_25_reg_1051 <= tmp_25_fu_775_p1;
                tmp_33_reg_1056 <= p_Val2_1_fu_767_p1(62 downto 52);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_467_p2))) then
                or_cond1_reg_929 <= or_cond1_fu_491_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                or_cond3_reg_1029 <= or_cond3_fu_739_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_15_reg_952 <= tmp_15_fu_516_p1;
                tmp_19_reg_957 <= tmp_19_fu_520_p1;
                tmp_21_reg_962 <= p_Val2_s_fu_512_p1(62 downto 52);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_18_reg_889 <= tmp_18_fu_414_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_24_reg_971 <= tmp_24_fu_567_p2;
                tmp_50_reg_967 <= tmp_50_fu_534_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_46_reg_883 <= grp_fu_292_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond3_fu_655_p2))) then
                tmp_51_reg_996 <= tmp_51_fu_667_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_52_reg_1007 <= tmp_52_fu_672_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_52_fu_672_p2))) then
                tmp_54_reg_1011 <= tmp_54_fu_678_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_54_reg_1011)))) then
                tmp_57_reg_1020 <= tmp_57_fu_683_p2;
            end if;
        end if;
    end process;
    first_4_cast4_reg_836(31 downto 14) <= "000000000000000000";
    markBegin_load_reg_910(31 downto 14) <= "000000000000000000";
    markBegin_2_cast3_reg_916(31 downto 14) <= "000000000000000000";
    i_3_cast2_reg_979(31 downto 14) <= "000000000000000000";
    markBegin_fu_74(31 downto 14) <= "000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_357_p2, or_cond1_fu_491_p2, exitcond2_fu_467_p2, exitcond3_fu_655_p2, tmp_52_fu_672_p2, or_cond3_fu_739_p2, exitcond_fu_335_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond_fu_335_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_357_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_467_p2))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                elsif (((ap_const_lv1_0 = exitcond2_fu_467_p2) and not((ap_const_lv1_0 = or_cond1_fu_491_p2)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_655_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = tmp_52_fu_672_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_lv1_0 = or_cond3_fu_739_p2))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_10, exitcond3_fu_655_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond3_fu_655_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond3_fu_655_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond3_fu_655_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_184 assign process. --
    ap_sig_bdd_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_184 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_238 assign process. --
    ap_sig_bdd_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_238 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_287 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_298 assign process. --
    ap_sig_bdd_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_298 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_287)
    begin
        if (ap_sig_bdd_287) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_184)
    begin
        if (ap_sig_bdd_184) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_238)
    begin
        if (ap_sig_bdd_238) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_298)
    begin
        if (ap_sig_bdd_298) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- begins_address0 assign process. --
    begins_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, tmp_51_fu_667_p1, tmp_fu_347_p1, tmp_59_fu_585_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            begins_address0 <= tmp_59_fu_585_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            begins_address0 <= tmp_fu_347_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            begins_address0 <= tmp_51_fu_667_p1(7 - 1 downto 0);
        else 
            begins_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- begins_ce0 assign process. --
    begins_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            begins_ce0 <= ap_const_logic_1;
        else 
            begins_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- begins_d0 assign process. --
    begins_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, markBegin_load_reg_910, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            begins_d0 <= markBegin_load_reg_910;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            begins_d0 <= ap_const_lv32_FFFFFFFF;
        else 
            begins_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- begins_we0 assign process. --
    begins_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_50_fu_534_p2, ap_sig_cseq_ST_st9_fsm_8, tmp_24_fu_567_p2, exitcond_fu_335_p2, tmp_56_fu_576_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_335_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2) and not((ap_const_lv1_0 = tmp_56_fu_576_p2))))) then 
            begins_we0 <= ap_const_logic_1;
        else 
            begins_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_605_p2 <= std_logic_vector(unsigned(count_fu_70) + unsigned(ap_const_lv32_1));
    ends_addr_3_gep_fu_164_p3 <= tmp_51_reg_996(7 - 1 downto 0);

    -- ends_address0 assign process. --
    ends_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, tmp_51_reg_996, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, ends_addr_3_gep_fu_164_p3, tmp_fu_347_p1, tmp_59_fu_585_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ends_address0 <= tmp_59_fu_585_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ends_address0 <= tmp_fu_347_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            ends_address0 <= ends_addr_3_gep_fu_164_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ends_address0 <= tmp_51_reg_996(7 - 1 downto 0);
        else 
            ends_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- ends_ce0 assign process. --
    ends_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            ends_ce0 <= ap_const_logic_1;
        else 
            ends_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ends_d0 assign process. --
    ends_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, markBegin_2_cast3_reg_916, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ends_d0 <= markBegin_2_cast3_reg_916;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ends_d0 <= ap_const_lv32_FFFFFFFF;
        else 
            ends_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- ends_we0 assign process. --
    ends_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_50_fu_534_p2, ap_sig_cseq_ST_st9_fsm_8, tmp_24_fu_567_p2, exitcond_fu_335_p2, tmp_56_fu_576_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_335_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_50_fu_534_p2) and (ap_const_lv1_0 = tmp_24_fu_567_p2) and not((ap_const_lv1_0 = tmp_56_fu_576_p2))))) then 
            ends_we0 <= ap_const_logic_1;
        else 
            ends_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_357_p2 <= "1" when (first_4_reg_257 = ap_const_lv14_3E80) else "0";
    exitcond2_fu_467_p2 <= "1" when (markBegin_2_reg_268 = ap_const_lv14_3E80) else "0";
    exitcond3_fu_655_p2 <= "1" when (i_3_reg_280 = ap_const_lv14_3E80) else "0";
    exitcond_fu_335_p2 <= "1" when (i_reg_210 = ap_const_lv7_50) else "0";
    firstSet_1_fu_437_p3 <= 
        ap_const_lv32_1 when (or_cond_fu_426_p2(0) = '1') else 
        firstSet_reg_221;
    first_2_fu_431_p3 <= 
        first_4_cast4_reg_836 when (tmp_18_reg_889(0) = '1') else 
        last_reg_233;
    first_3_fu_445_p3 <= 
        last_reg_233 when (or_cond_fu_426_p2(0) = '1') else 
        first_2_fu_431_p3;
    first_4_cast4_fu_353_p1 <= std_logic_vector(resize(unsigned(first_4_reg_257),32));
    grp_fu_292_p0 <= inSound_q0;

    -- grp_fu_296_opcode assign process. --
    grp_fu_296_opcode_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, or_cond3_reg_1029, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_296_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = or_cond3_reg_1029)))) then 
            grp_fu_296_opcode <= ap_const_lv5_2;
        else 
            grp_fu_296_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_296_p0 assign process. --
    grp_fu_296_p0_assign_proc : process(tmp_46_reg_883, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ret_i_i_i_i_i_fu_546_p1, ret_i_i_i_i_i2_fu_796_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_296_p0 <= ret_i_i_i_i_i2_fu_796_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_296_p0 <= ret_i_i_i_i_i_fu_546_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_296_p0 <= tmp_46_reg_883;
        else 
            grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_296_p1 assign process. --
    grp_fu_296_p1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_296_p1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_296_p1 <= ap_const_lv64_3FC3333340000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_296_p1 <= ap_const_lv64_3FC3333333333333;
        else 
            grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_324_p2 <= std_logic_vector(unsigned(j_fu_82) + unsigned(ap_const_lv32_1));
    i_2_fu_341_p2 <= std_logic_vector(unsigned(i_reg_210) + unsigned(ap_const_lv7_1));
    i_3_cast2_fu_651_p1 <= std_logic_vector(resize(unsigned(i_3_reg_280),32));
    i_4_fu_363_p2 <= std_logic_vector(unsigned(first_4_reg_257) + unsigned(ap_const_lv14_1));
    i_5_fu_473_p2 <= std_logic_vector(unsigned(markBegin_2_reg_268) + unsigned(ap_const_lv14_1));
    i_6_fu_661_p2 <= std_logic_vector(unsigned(i_3_reg_280) + unsigned(ap_const_lv14_1));

    -- inSound_address0 assign process. --
    inSound_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_s_fu_369_p1, tmp_53_fu_497_p1, tmp_60_fu_688_p1, tmp_65_fu_745_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            inSound_address0 <= tmp_60_fu_688_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            inSound_address0 <= tmp_65_fu_745_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            inSound_address0 <= tmp_53_fu_497_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inSound_address0 <= tmp_s_fu_369_p1(14 - 1 downto 0);
        else 
            inSound_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- inSound_ce0 assign process. --
    inSound_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            inSound_ce0 <= ap_const_logic_1;
        else 
            inSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inSound_d0 <= ap_const_lv32_0;

    -- inSound_we0 assign process. --
    inSound_we0_assign_proc : process(tmp_54_reg_1011, tmp_57_fu_683_p2, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_54_reg_1011)) and not((ap_const_lv1_0 = tmp_57_fu_683_p2))))) then 
            inSound_we0 <= ap_const_logic_1;
        else 
            inSound_we0 <= ap_const_logic_0;
        end if; 
    end process;

    index_1_fu_591_p2 <= std_logic_vector(unsigned(index_fu_62) + unsigned(ap_const_lv32_1));
    index_2_fu_698_p2 <= std_logic_vector(unsigned(index_5_fu_78) + unsigned(ap_const_lv32_1));
    last_2_fu_453_p3 <= 
        first_4_cast4_reg_836 when (or_cond_fu_426_p2(0) = '1') else 
        first_reg_245;
    markBegin_1_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(markBegin_1_fu_635_p3),32));
    markBegin_1_fu_635_p3 <= 
        markBegin_2_reg_268 when (tmp_24_reg_971(0) = '1') else 
        ap_const_lv14_0;
    markBegin_2_cast3_fu_463_p1 <= std_logic_vector(resize(unsigned(markBegin_2_reg_268),32));
    notlhs1_fu_551_p2 <= "0" when (tmp_21_reg_962 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_801_p2 <= "0" when (tmp_33_reg_1056 = ap_const_lv11_7FF) else "1";
    notlhs_fu_396_p2 <= "0" when (tmp_14_fu_382_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_556_p2 <= "1" when (tmp_19_reg_957 = ap_const_lv52_0) else "0";
    notrhs3_fu_806_p2 <= "1" when (tmp_25_reg_1051 = ap_const_lv52_0) else "0";
    notrhs_fu_402_p2 <= "1" when (tmp_13_fu_392_p1 = ap_const_lv52_0) else "0";
    or_cond1_fu_491_p2 <= (tmp_48_fu_479_p2 or tmp_49_fu_485_p2);
    or_cond3_fu_739_p2 <= (tmp1_fu_733_p2 or tmp_61_fu_717_p2);
    or_cond4_fu_756_p2 <= (tmp_64_fu_750_p2 or tmp_62_fu_723_p2);
    or_cond_fu_426_p2 <= (tmp_18_reg_889 and tmp_47_fu_420_p2);

    -- outSound_address0 assign process. --
    outSound_address0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15, tmp_66_fu_762_p1, tmp_67_fu_823_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            outSound_address0 <= tmp_67_fu_823_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            outSound_address0 <= tmp_66_fu_762_p1(13 - 1 downto 0);
        else 
            outSound_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- outSound_ce0 assign process. --
    outSound_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            outSound_ce0 <= ap_const_logic_1;
        else 
            outSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- outSound_d0 assign process. --
    outSound_d0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, inSound_load_2_reg_1041, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            outSound_d0 <= inSound_load_2_reg_1041;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            outSound_d0 <= ap_const_lv32_0;
        else 
            outSound_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- outSound_we0 assign process. --
    outSound_we0_assign_proc : process(or_cond3_fu_739_p2, or_cond3_reg_1029, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15, or_cond4_fu_756_p2, tmp_36_fu_817_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = or_cond3_fu_739_p2)) and (ap_const_lv1_0 = or_cond4_fu_756_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = or_cond3_reg_1029) and not((ap_const_lv1_0 = tmp_36_fu_817_p2))))) then 
            outSound_we0 <= ap_const_logic_1;
        else 
            outSound_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_789_p3 <= (ap_const_lv1_0 & tmp_20_reg_1046);
    p_Result_s_fu_539_p3 <= (ap_const_lv1_0 & tmp_15_reg_952);
    p_Val2_1_fu_767_p1 <= grp_fu_292_p1;
    p_Val2_s_fu_512_p1 <= grp_fu_292_p1;
    p_deleteFlag_fu_617_p3 <= 
        ap_const_lv32_1 when (tmp_55_fu_611_p2(0) = '1') else 
        deleteFlag_fu_66;
    p_index_5_fu_704_p3 <= 
        index_2_fu_698_p2 when (tmp_58_fu_693_p2(0) = '1') else 
        index_5_fu_78;
    ret_i_i_i_i_i2_fu_796_p1 <= p_Result_1_fu_789_p3;
    ret_i_i_i_i_i_fu_546_p1 <= p_Result_s_fu_539_p3;
    tmp1_fu_733_p2 <= (tmp_62_fu_723_p2 or tmp_63_fu_728_p2);
    tmp_13_fu_392_p1 <= tmp_53_to_int_fu_379_p1(52 - 1 downto 0);
    tmp_14_fu_382_p4 <= tmp_53_to_int_fu_379_p1(62 downto 52);
    tmp_15_fu_516_p1 <= p_Val2_s_fu_512_p1(63 - 1 downto 0);
    tmp_16_fu_408_p2 <= (notrhs_fu_402_p2 or notlhs_fu_396_p2);
    tmp_18_fu_414_p2 <= (tmp_16_fu_408_p2 and grp_fu_296_p2);
    tmp_19_fu_520_p1 <= p_Val2_s_fu_512_p1(52 - 1 downto 0);
    tmp_20_fu_771_p1 <= p_Val2_1_fu_767_p1(63 - 1 downto 0);
    tmp_22_fu_561_p2 <= (notrhs1_fu_556_p2 or notlhs1_fu_551_p2);
    tmp_24_fu_567_p2 <= (tmp_22_fu_561_p2 and grp_fu_296_p2);
    tmp_25_fu_775_p1 <= p_Val2_1_fu_767_p1(52 - 1 downto 0);
    tmp_34_fu_811_p2 <= (notrhs3_fu_806_p2 or notlhs2_fu_801_p2);
    tmp_36_fu_817_p2 <= (tmp_34_fu_811_p2 and grp_fu_296_p2);
    tmp_47_fu_420_p2 <= "1" when (firstSet_reg_221 = ap_const_lv32_0) else "0";
    tmp_48_fu_479_p2 <= "1" when (signed(markBegin_2_cast3_fu_463_p1) < signed(first_reg_245)) else "0";
    tmp_49_fu_485_p2 <= "1" when (signed(markBegin_2_cast3_fu_463_p1) > signed(last_reg_233)) else "0";
    tmp_50_fu_534_p2 <= "1" when (markBegin_load_reg_910 = ap_const_lv32_0) else "0";
        tmp_51_fu_667_p1 <= std_logic_vector(resize(signed(index_5_fu_78),64));

    tmp_52_fu_672_p2 <= "1" when (begins_q0 = ap_const_lv32_FFFFFFFF) else "0";
    tmp_53_fu_497_p1 <= std_logic_vector(resize(unsigned(markBegin_2_reg_268),64));
    tmp_53_to_int_fu_379_p1 <= tmp_46_reg_883;
    tmp_54_fu_678_p2 <= "1" when (signed(i_3_cast2_reg_979) > signed(begins_q0)) else "0";
    tmp_55_fu_611_p2 <= "1" when (count_1_fu_605_p2 = ap_const_lv32_C8) else "0";
    tmp_56_fu_576_p2 <= "1" when (deleteFlag_fu_66 = ap_const_lv32_1) else "0";
    tmp_57_fu_683_p2 <= "1" when (signed(i_3_cast2_reg_979) < signed(ends_q0)) else "0";
    tmp_58_fu_693_p2 <= "1" when (i_3_cast2_reg_979 = ends_q0) else "0";
        tmp_59_fu_585_p1 <= std_logic_vector(resize(signed(index_fu_62),64));

    tmp_60_fu_688_p1 <= std_logic_vector(resize(unsigned(i_3_reg_280),64));
    tmp_61_fu_717_p2 <= "1" when (j_fu_82 = ap_const_lv32_1F40) else "0";
    tmp_62_fu_723_p2 <= "1" when (signed(i_3_cast2_reg_979) < signed(first_reg_245)) else "0";
    tmp_63_fu_728_p2 <= "1" when (signed(i_3_cast2_reg_979) > signed(last_reg_233)) else "0";
    tmp_64_fu_750_p2 <= "1" when (signed(j_fu_82) > signed(ap_const_lv32_1F3F)) else "0";
    tmp_65_fu_745_p1 <= std_logic_vector(resize(unsigned(i_3_reg_280),64));
        tmp_66_fu_762_p1 <= std_logic_vector(resize(signed(j_fu_82),64));

        tmp_67_fu_823_p1 <= std_logic_vector(resize(signed(j_fu_82),64));

    tmp_fu_347_p1 <= std_logic_vector(resize(unsigned(i_reg_210),64));
    tmp_s_fu_369_p1 <= std_logic_vector(resize(unsigned(first_4_reg_257),64));
end behav;
