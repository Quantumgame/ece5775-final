// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __voicerec_feedForward_weightHO_H__
#define __voicerec_feedForward_weightHO_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct voicerec_feedForward_weightHO_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(voicerec_feedForward_weightHO_ram) {
        ram[0] = "0b10111101100011100110110011000101";
        ram[1] = "0b10111110110101001110111010111111";
        ram[2] = "0b00111111001010011100000111000110";
        ram[3] = "0b10111101111100011111010011110101";
        ram[4] = "0b00111111001101010000111000100100";
        ram[5] = "0b10111110101100110011110000111110";
        ram[6] = "0b10111110110100101000001110010000";
        ram[7] = "0b10111110010011001100010010101100";
        ram[8] = "0b00111110001001011000010101111011";
        ram[9] = "0b00111110110010001010110011000001";
        ram[10] = "0b00111101010111110101010011111010";
        ram[11] = "0b10111111010100000001100101011101";
        ram[12] = "0b00111110111111000110111111011111";
        ram[13] = "0b10111111010101010000111011101101";
        ram[14] = "0b00111111001010001000011001011001";
        ram[15] = "0b10111111000011101100000101001100";
        ram[16] = "0b10111111001011111001000110110100";
        ram[17] = "0b10111110110111101110011111000101";
        ram[18] = "0b00111110110110000001111010001010";
        ram[19] = "0b00111110110100000101100011011110";
        ram[20] = "0b10111110101110110110011000110000";
        ram[21] = "0b00111110110110001011001010100111";
        ram[22] = "0b00111110110101001101111110101101";
        ram[23] = "0b10111111001100011110100101111101";
        ram[24] = "0b10111110100001101110011000010000";
        ram[25] = "0b10111110101111001000000101101111";
        ram[26] = "0b10111110110000100001000100000010";
        ram[27] = "0b00111100111110010001111100000101";
        ram[28] = "0b10111110111110100110111100111111";
        ram[29] = "0b00111111001110101100100001100000";
        ram[30] = "0b10111111011100011110010010110100";
        ram[31] = "0b00111110111001110110111000111111";
        ram[32] = "0b00111110111100110110110100000001";
        ram[33] = "0b10111111001001010010011001010010";
        ram[34] = "0b10111110110100010011010111111100";
        ram[35] = "0b00111111000010110000100011001100";
        ram[36] = "0b00111101101010110010110000100110";
        ram[37] = "0b00111110000011011001011110110011";
        ram[38] = "0b00111101100101001111100011111001";
        ram[39] = "0b00111101100011011010110011101111";
        ram[40] = "0b00111101111100111010101000110111";
        ram[41] = "0b00111111010010011011000101100100";
        ram[42] = "0b10111111010001011011001011110110";
        ram[43] = "0b10111111001001101111110110101000";
        ram[44] = "0b10111111010111011110110000101101";
        ram[45] = "0b00111110011110001100110100100001";
        ram[46] = "0b10111110000011001100110111011001";
        ram[47] = "0b00111101100001001001111101000100";
        ram[48] = "0b10111010110110101100101010111100";
        ram[49] = "0b00111110110010110001111111001101";
        ram[50] = "0b00111110000001000111100001000010";
        ram[51] = "0b10111111010000000010011100110001";
        ram[52] = "0b10111110100001101000010001001001";
        ram[53] = "0b00111111010000101111110000110111";
        ram[54] = "0b00111100100100000101001110100000";
        ram[55] = "0b10111110010001000100111111100011";
        ram[56] = "0b00111111001110111101110000000101";
        ram[57] = "0b10111111000000011111001001100111";
        ram[58] = "0b10111110010110010010110001001001";
        ram[59] = "0b10111110010000011110110110011110";
        ram[60] = "0b00111111001100001101111010110001";
        ram[61] = "0b10111110111000000111100011111011";
        ram[62] = "0b10111110011011011111100011110100";
        ram[63] = "0b00111101011001001010010000111111";
        ram[64] = "0b10111111000101110011000100111100";
        ram[65] = "0b10111111011010001101011111001111";
        ram[66] = "0b00111110101101000011110101000111";
        ram[67] = "0b00111111000000001001111000110100";
        ram[68] = "0b00111110001001100111001100111111";
        ram[69] = "0b00111110101000101110000100000101";
        ram[70] = "0b00111110100000100000101111100101";
        ram[71] = "0b10111111001001111011110101011010";
        ram[72] = "0b10111110001110110001000110000100";
        ram[73] = "0b10111110100111000111110011111010";
        ram[74] = "0b10111110110000001010001111111001";
        ram[75] = "0b10111101001011001100011100001000";
        ram[76] = "0b10111101101011000011010101100011";
        ram[77] = "0b10111110101100111101100101100110";
        ram[78] = "0b10111110111001000101000000100111";
        ram[79] = "0b00111111001111000000010010100111";
        ram[80] = "0b00111110000111011101110111110100";
        ram[81] = "0b00111101110101010010011011011001";
        ram[82] = "0b10111100001010001001010101001010";
        ram[83] = "0b00111101000011010101100100110100";
        ram[84] = "0b10111110010011001001100010100010";
        ram[85] = "0b10111111000100111111101010100000";
        ram[86] = "0b00111111011000111111000011111110";
        ram[87] = "0b10111110110101101000110101110110";
        ram[88] = "0b10111101110111000010010101001010";
        ram[89] = "0b10111110000100100000000111001101";
        ram[90] = "0b00111111010010010001010011000010";
        ram[91] = "0b10111110001011001011100011100001";
        ram[92] = "0b10111110101001011101110100101011";
        ram[93] = "0b10111110010111010101001001111110";
        ram[94] = "0b10111110110000100110111011111100";
        ram[95] = "0b10111101001011111011011101100011";
        ram[96] = "0b10111110100000000001100111010010";
        ram[97] = "0b10111110100100110101101100001100";
        ram[98] = "0b10111110101110001010100011110100";
        ram[99] = "0b00111110010010101010011101011001";
        ram[100] = "0b00111110100100110101110001011011";
        ram[101] = "0b00111110101111110100000110001101";
        ram[102] = "0b00111110101110110110000100010011";
        ram[103] = "0b00111101101001000010111100111010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(voicerec_feedForward_weightHO) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


voicerec_feedForward_weightHO_ram* meminst;


SC_CTOR(voicerec_feedForward_weightHO) {
meminst = new voicerec_feedForward_weightHO_ram("voicerec_feedForward_weightHO_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~voicerec_feedForward_weightHO() {
    delete meminst;
}


};//endmodule
#endif
