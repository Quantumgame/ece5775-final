-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity voicerec_feedForward_weightHO_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of voicerec_feedForward_weightHO_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011100110110011000101", 
    1 => "10111110110101001110111010111111", 
    2 => "00111111001010011100000111000110", 
    3 => "10111101111100011111010011110101", 
    4 => "00111111001101010000111000100100", 
    5 => "10111110101100110011110000111110", 
    6 => "10111110110100101000001110010000", 
    7 => "10111110010011001100010010101100", 
    8 => "00111110001001011000010101111011", 
    9 => "00111110110010001010110011000001", 
    10 => "00111101010111110101010011111010", 
    11 => "10111111010100000001100101011101", 
    12 => "00111110111111000110111111011111", 
    13 => "10111111010101010000111011101101", 
    14 => "00111111001010001000011001011001", 
    15 => "10111111000011101100000101001100", 
    16 => "10111111001011111001000110110100", 
    17 => "10111110110111101110011111000101", 
    18 => "00111110110110000001111010001010", 
    19 => "00111110110100000101100011011110", 
    20 => "10111110101110110110011000110000", 
    21 => "00111110110110001011001010100111", 
    22 => "00111110110101001101111110101101", 
    23 => "10111111001100011110100101111101", 
    24 => "10111110100001101110011000010000", 
    25 => "10111110101111001000000101101111", 
    26 => "10111110110000100001000100000010", 
    27 => "00111100111110010001111100000101", 
    28 => "10111110111110100110111100111111", 
    29 => "00111111001110101100100001100000", 
    30 => "10111111011100011110010010110100", 
    31 => "00111110111001110110111000111111", 
    32 => "00111110111100110110110100000001", 
    33 => "10111111001001010010011001010010", 
    34 => "10111110110100010011010111111100", 
    35 => "00111111000010110000100011001100", 
    36 => "00111101101010110010110000100110", 
    37 => "00111110000011011001011110110011", 
    38 => "00111101100101001111100011111001", 
    39 => "00111101100011011010110011101111", 
    40 => "00111101111100111010101000110111", 
    41 => "00111111010010011011000101100100", 
    42 => "10111111010001011011001011110110", 
    43 => "10111111001001101111110110101000", 
    44 => "10111111010111011110110000101101", 
    45 => "00111110011110001100110100100001", 
    46 => "10111110000011001100110111011001", 
    47 => "00111101100001001001111101000100", 
    48 => "10111010110110101100101010111100", 
    49 => "00111110110010110001111111001101", 
    50 => "00111110000001000111100001000010", 
    51 => "10111111010000000010011100110001", 
    52 => "10111110100001101000010001001001", 
    53 => "00111111010000101111110000110111", 
    54 => "00111100100100000101001110100000", 
    55 => "10111110010001000100111111100011", 
    56 => "00111111001110111101110000000101", 
    57 => "10111111000000011111001001100111", 
    58 => "10111110010110010010110001001001", 
    59 => "10111110010000011110110110011110", 
    60 => "00111111001100001101111010110001", 
    61 => "10111110111000000111100011111011", 
    62 => "10111110011011011111100011110100", 
    63 => "00111101011001001010010000111111", 
    64 => "10111111000101110011000100111100", 
    65 => "10111111011010001101011111001111", 
    66 => "00111110101101000011110101000111", 
    67 => "00111111000000001001111000110100", 
    68 => "00111110001001100111001100111111", 
    69 => "00111110101000101110000100000101", 
    70 => "00111110100000100000101111100101", 
    71 => "10111111001001111011110101011010", 
    72 => "10111110001110110001000110000100", 
    73 => "10111110100111000111110011111010", 
    74 => "10111110110000001010001111111001", 
    75 => "10111101001011001100011100001000", 
    76 => "10111101101011000011010101100011", 
    77 => "10111110101100111101100101100110", 
    78 => "10111110111001000101000000100111", 
    79 => "00111111001111000000010010100111", 
    80 => "00111110000111011101110111110100", 
    81 => "00111101110101010010011011011001", 
    82 => "10111100001010001001010101001010", 
    83 => "00111101000011010101100100110100", 
    84 => "10111110010011001001100010100010", 
    85 => "10111111000100111111101010100000", 
    86 => "00111111011000111111000011111110", 
    87 => "10111110110101101000110101110110", 
    88 => "10111101110111000010010101001010", 
    89 => "10111110000100100000000111001101", 
    90 => "00111111010010010001010011000010", 
    91 => "10111110001011001011100011100001", 
    92 => "10111110101001011101110100101011", 
    93 => "10111110010111010101001001111110", 
    94 => "10111110110000100110111011111100", 
    95 => "10111101001011111011011101100011", 
    96 => "10111110100000000001100111010010", 
    97 => "10111110100100110101101100001100", 
    98 => "10111110101110001010100011110100", 
    99 => "00111110010010101010011101011001", 
    100 => "00111110100100110101110001011011", 
    101 => "00111110101111110100000110001101", 
    102 => "00111110101110110110000100010011", 
    103 => "00111101101001000010111100111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity voicerec_feedForward_weightHO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of voicerec_feedForward_weightHO is
    component voicerec_feedForward_weightHO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    voicerec_feedForward_weightHO_rom_U :  component voicerec_feedForward_weightHO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


