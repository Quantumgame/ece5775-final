-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal cosVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cosVec_ce0 : STD_LOGIC;
    signal cosVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinVec_ce0 : STD_LOGIC;
    signal sinVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal tmp_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_712 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_1_reg_717 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_2_reg_722 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_3_reg_727 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_1_fu_443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal j_2_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal wr_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal wi_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_785 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_796 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_6_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_6_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal k_3_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_3_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_237 : BOOLEAN;
    signal c_addr_4_reg_824 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_5_reg_829 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_6_reg_834 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_7_reg_839 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_261 : BOOLEAN;
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal tmp_24_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal wrk_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_286 : BOOLEAN;
    signal wik_1_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_addr_rec_fu_694_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_297 : BOOLEAN;
    signal k_reg_157 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_315 : BOOLEAN;
    signal j_1_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal n3_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_rec_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_349 : BOOLEAN;
    signal wik_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_277 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_s_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum_cast_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum9_cast_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum1_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum2_cast_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_378 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_392 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_406 : BOOLEAN;
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_422 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_429 : BOOLEAN;
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast3_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_fu_393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_461_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rev5_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_489_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_3_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_515 : BOOLEAN;
    signal grp_fu_531_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_cast2_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast1_fu_590_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i0_1_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_621_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum_fu_625_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_cast_fu_642_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum9_fu_646_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_cast_fu_657_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum1_fu_662_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_cast_fu_673_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum2_fu_679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_cast_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_302_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_302_ce : STD_LOGIC;
    signal grp_fu_306_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_310_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal grp_fu_320_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal tmp_s_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start : STD_LOGIC;
    signal grp_fu_531_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component voicerec_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_sdiv_11ns_32ns_32_15_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_cosVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_sinVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cosVec_U : component voicerec_FFT_cosVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosVec_address0,
        ce0 => cosVec_ce0,
        q0 => cosVec_q0);

    sinVec_U : component voicerec_FFT_sinVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinVec_address0,
        ce0 => sinVec_ce0,
        q0 => sinVec_q0);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U5 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_302_p0,
        din1 => grp_fu_302_p1,
        opcode => grp_fu_302_opcode,
        ce => grp_fu_302_ce,
        dout => grp_fu_302_p2);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U6 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        opcode => grp_fu_306_opcode,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U7 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_310_p0,
        din1 => grp_fu_310_p1,
        ce => grp_fu_310_ce,
        dout => grp_fu_310_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U8 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U9 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U10 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    voicerec_sdiv_11ns_32ns_32_15_seq_U11 : component voicerec_sdiv_11ns_32ns_32_15_seq
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start,
        din0 => grp_fu_531_p0,
        din1 => grp_fu_531_p1,
        ce => grp_fu_531_ce,
        dout => grp_fu_531_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- cp_rec_reg_235 assign process. --
    cp_rec_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                cp_rec_reg_235 <= cp_addr_rec_fu_694_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                cp_rec_reg_235 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- cp_s_reg_290 assign process. --
    cp_s_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond_fu_594_p2)))) then 
                cp_s_reg_290(2) <= n_reg_790(2);
                cp_s_reg_290(3) <= n_reg_790(3);
                cp_s_reg_290(4) <= n_reg_790(4);
                cp_s_reg_290(5) <= n_reg_790(5);
                cp_s_reg_290(6) <= n_reg_790(6);
                cp_s_reg_290(7) <= n_reg_790(7);
                cp_s_reg_290(8) <= n_reg_790(8);
                cp_s_reg_290(9) <= n_reg_790(9);
                cp_s_reg_290(10) <= n_reg_790(10);
                cp_s_reg_290(11) <= n_reg_790(11);
                cp_s_reg_290(12) <= n_reg_790(12);
                cp_s_reg_290(13) <= n_reg_790(13);
                cp_s_reg_290(14) <= n_reg_790(14);
                cp_s_reg_290(15) <= n_reg_790(15);
                cp_s_reg_290(16) <= n_reg_790(16);
                cp_s_reg_290(17) <= n_reg_790(17);
                cp_s_reg_290(18) <= n_reg_790(18);
                cp_s_reg_290(19) <= n_reg_790(19);
                cp_s_reg_290(20) <= n_reg_790(20);
                cp_s_reg_290(21) <= n_reg_790(21);
                cp_s_reg_290(22) <= n_reg_790(22);
                cp_s_reg_290(23) <= n_reg_790(23);
                cp_s_reg_290(24) <= n_reg_790(24);
                cp_s_reg_290(25) <= n_reg_790(25);
                cp_s_reg_290(26) <= n_reg_790(26);
                cp_s_reg_290(27) <= n_reg_790(27);
                cp_s_reg_290(28) <= n_reg_790(28);
                cp_s_reg_290(29) <= n_reg_790(29);
                cp_s_reg_290(30) <= n_reg_790(30);
                cp_s_reg_290(31) <= n_reg_790(31);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_573_p2) and (ap_const_lv1_0 = tmp_19_fu_585_p2))) then 
                cp_s_reg_290(2) <= '0';
                cp_s_reg_290(3) <= '0';
                cp_s_reg_290(4) <= '0';
                cp_s_reg_290(5) <= '0';
                cp_s_reg_290(6) <= '0';
                cp_s_reg_290(7) <= '0';
                cp_s_reg_290(8) <= '0';
                cp_s_reg_290(9) <= '0';
                cp_s_reg_290(10) <= '0';
                cp_s_reg_290(11) <= '0';
                cp_s_reg_290(12) <= '0';
                cp_s_reg_290(13) <= '0';
                cp_s_reg_290(14) <= '0';
                cp_s_reg_290(15) <= '0';
                cp_s_reg_290(16) <= '0';
                cp_s_reg_290(17) <= '0';
                cp_s_reg_290(18) <= '0';
                cp_s_reg_290(19) <= '0';
                cp_s_reg_290(20) <= '0';
                cp_s_reg_290(21) <= '0';
                cp_s_reg_290(22) <= '0';
                cp_s_reg_290(23) <= '0';
                cp_s_reg_290(24) <= '0';
                cp_s_reg_290(25) <= '0';
                cp_s_reg_290(26) <= '0';
                cp_s_reg_290(27) <= '0';
                cp_s_reg_290(28) <= '0';
                cp_s_reg_290(29) <= '0';
                cp_s_reg_290(30) <= '0';
                cp_s_reg_290(31) <= '0';
            end if; 
        end if;
    end process;

    -- d_reg_247 assign process. --
    d_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_594_p2) and (ap_const_lv1_0 = tmp_20_fu_606_p2))) then 
                d_reg_247 <= d_reg_247;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                d_reg_247 <= wrk_reg_884;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_573_p2) and not((ap_const_lv1_0 = tmp_19_fu_585_p2)))) then 
                d_reg_247 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- j_1_reg_191 assign process. --
    j_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_437_p2))) then 
                j_1_reg_191 <= j_2_fu_503_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_1_reg_191 <= j_reg_168;
            end if; 
        end if;
    end process;

    -- j_3_reg_224 assign process. --
    j_3_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                j_3_reg_224 <= j_6_reg_804;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                j_3_reg_224 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- j_reg_168 assign process. --
    j_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_437_p2)))) then 
                j_reg_168 <= j_4_fu_519_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_277 assign process. --
    k_1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_594_p2) and (ap_const_lv1_0 = tmp_20_fu_606_p2))) then 
                k_1_reg_277 <= k_3_fu_600_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                k_1_reg_277 <= k_3_reg_815;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_573_p2) and not((ap_const_lv1_0 = tmp_19_fu_585_p2)))) then 
                k_1_reg_277 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- k_reg_157 assign process. --
    k_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_437_p2)))) then 
                k_reg_157 <= k_2_reg_703;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_157 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- n3_reg_201 assign process. --
    n3_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_437_p2))) then 
                n3_reg_201 <= n_1_fu_511_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                n3_reg_201 <= ap_const_lv32_80;
            end if; 
        end if;
    end process;

    -- n_2_reg_212 assign process. --
    n_2_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond1_fu_573_p2)))) then 
                n_2_reg_212(1) <= n_reg_790(1);
                n_2_reg_212(2) <= n_reg_790(2);
                n_2_reg_212(3) <= n_reg_790(3);
                n_2_reg_212(4) <= n_reg_790(4);
                n_2_reg_212(5) <= n_reg_790(5);
                n_2_reg_212(6) <= n_reg_790(6);
                n_2_reg_212(7) <= n_reg_790(7);
                n_2_reg_212(8) <= n_reg_790(8);
                n_2_reg_212(9) <= n_reg_790(9);
                n_2_reg_212(10) <= n_reg_790(10);
                n_2_reg_212(11) <= n_reg_790(11);
                n_2_reg_212(12) <= n_reg_790(12);
                n_2_reg_212(13) <= n_reg_790(13);
                n_2_reg_212(14) <= n_reg_790(14);
                n_2_reg_212(15) <= n_reg_790(15);
                n_2_reg_212(16) <= n_reg_790(16);
                n_2_reg_212(17) <= n_reg_790(17);
                n_2_reg_212(18) <= n_reg_790(18);
                n_2_reg_212(19) <= n_reg_790(19);
                n_2_reg_212(20) <= n_reg_790(20);
                n_2_reg_212(21) <= n_reg_790(21);
                n_2_reg_212(22) <= n_reg_790(22);
                n_2_reg_212(23) <= n_reg_790(23);
                n_2_reg_212(24) <= n_reg_790(24);
                n_2_reg_212(25) <= n_reg_790(25);
                n_2_reg_212(26) <= n_reg_790(26);
                n_2_reg_212(27) <= n_reg_790(27);
                n_2_reg_212(28) <= n_reg_790(28);
                n_2_reg_212(29) <= n_reg_790(29);
                n_2_reg_212(30) <= n_reg_790(30);
                n_2_reg_212(31) <= n_reg_790(31);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_375_p2 = ap_const_lv1_0)))) then 
                n_2_reg_212(1) <= '1';
                n_2_reg_212(2) <= '0';
                n_2_reg_212(3) <= '0';
                n_2_reg_212(4) <= '0';
                n_2_reg_212(5) <= '0';
                n_2_reg_212(6) <= '0';
                n_2_reg_212(7) <= '0';
                n_2_reg_212(8) <= '0';
                n_2_reg_212(9) <= '0';
                n_2_reg_212(10) <= '0';
                n_2_reg_212(11) <= '0';
                n_2_reg_212(12) <= '0';
                n_2_reg_212(13) <= '0';
                n_2_reg_212(14) <= '0';
                n_2_reg_212(15) <= '0';
                n_2_reg_212(16) <= '0';
                n_2_reg_212(17) <= '0';
                n_2_reg_212(18) <= '0';
                n_2_reg_212(19) <= '0';
                n_2_reg_212(20) <= '0';
                n_2_reg_212(21) <= '0';
                n_2_reg_212(22) <= '0';
                n_2_reg_212(23) <= '0';
                n_2_reg_212(24) <= '0';
                n_2_reg_212(25) <= '0';
                n_2_reg_212(26) <= '0';
                n_2_reg_212(27) <= '0';
                n_2_reg_212(28) <= '0';
                n_2_reg_212(29) <= '0';
                n_2_reg_212(30) <= '0';
                n_2_reg_212(31) <= '0';
            end if; 
        end if;
    end process;

    -- q_reg_180 assign process. --
    q_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_437_p2))) then 
                q_reg_180 <= q_1_fu_443_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                q_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- wik_reg_262 assign process. --
    wik_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_594_p2) and (ap_const_lv1_0 = tmp_20_fu_606_p2))) then 
                wik_reg_262 <= wik_reg_262;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                wik_reg_262 <= wik_1_reg_889;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_573_p2) and not((ap_const_lv1_0 = tmp_19_fu_585_p2)))) then 
                wik_reg_262 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_375_p2 = ap_const_lv1_0) and not((tmp_fu_387_p2 = ap_const_lv1_0)))) then
                c_addr_1_reg_717(1) <= tmp_10_fu_410_p1(9 - 1 downto 0)(1);
    c_addr_1_reg_717(2) <= tmp_10_fu_410_p1(9 - 1 downto 0)(2);
    c_addr_1_reg_717(3) <= tmp_10_fu_410_p1(9 - 1 downto 0)(3);
    c_addr_1_reg_717(4) <= tmp_10_fu_410_p1(9 - 1 downto 0)(4);
    c_addr_1_reg_717(5) <= tmp_10_fu_410_p1(9 - 1 downto 0)(5);
    c_addr_1_reg_717(6) <= tmp_10_fu_410_p1(9 - 1 downto 0)(6);
    c_addr_1_reg_717(7) <= tmp_10_fu_410_p1(9 - 1 downto 0)(7);
    c_addr_1_reg_717(8) <= tmp_10_fu_410_p1(9 - 1 downto 0)(8);
                c_addr_reg_712(1) <= tmp_8_fu_399_p1(9 - 1 downto 0)(1);
    c_addr_reg_712(2) <= tmp_8_fu_399_p1(9 - 1 downto 0)(2);
    c_addr_reg_712(3) <= tmp_8_fu_399_p1(9 - 1 downto 0)(3);
    c_addr_reg_712(4) <= tmp_8_fu_399_p1(9 - 1 downto 0)(4);
    c_addr_reg_712(5) <= tmp_8_fu_399_p1(9 - 1 downto 0)(5);
    c_addr_reg_712(6) <= tmp_8_fu_399_p1(9 - 1 downto 0)(6);
    c_addr_reg_712(7) <= tmp_8_fu_399_p1(9 - 1 downto 0)(7);
    c_addr_reg_712(8) <= tmp_8_fu_399_p1(9 - 1 downto 0)(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                c_addr_2_reg_722(1) <= tmp_11_fu_421_p1(9 - 1 downto 0)(1);
    c_addr_2_reg_722(2) <= tmp_11_fu_421_p1(9 - 1 downto 0)(2);
    c_addr_2_reg_722(3) <= tmp_11_fu_421_p1(9 - 1 downto 0)(3);
    c_addr_2_reg_722(4) <= tmp_11_fu_421_p1(9 - 1 downto 0)(4);
    c_addr_2_reg_722(5) <= tmp_11_fu_421_p1(9 - 1 downto 0)(5);
    c_addr_2_reg_722(6) <= tmp_11_fu_421_p1(9 - 1 downto 0)(6);
    c_addr_2_reg_722(7) <= tmp_11_fu_421_p1(9 - 1 downto 0)(7);
    c_addr_2_reg_722(8) <= tmp_11_fu_421_p1(9 - 1 downto 0)(8);
                c_addr_3_reg_727(1) <= tmp_13_fu_432_p1(9 - 1 downto 0)(1);
    c_addr_3_reg_727(2) <= tmp_13_fu_432_p1(9 - 1 downto 0)(2);
    c_addr_3_reg_727(3) <= tmp_13_fu_432_p1(9 - 1 downto 0)(3);
    c_addr_3_reg_727(4) <= tmp_13_fu_432_p1(9 - 1 downto 0)(4);
    c_addr_3_reg_727(5) <= tmp_13_fu_432_p1(9 - 1 downto 0)(5);
    c_addr_3_reg_727(6) <= tmp_13_fu_432_p1(9 - 1 downto 0)(6);
    c_addr_3_reg_727(7) <= tmp_13_fu_432_p1(9 - 1 downto 0)(7);
    c_addr_3_reg_727(8) <= tmp_13_fu_432_p1(9 - 1 downto 0)(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_594_p2) and not((ap_const_lv1_0 = tmp_20_fu_606_p2)))) then
                c_addr_4_reg_824 <= cp_sum_cast_fu_631_p1(9 - 1 downto 0);
                c_addr_5_reg_829 <= cp_sum9_cast_fu_652_p1(9 - 1 downto 0);
                c_addr_6_reg_834 <= cp_sum1_cast_fu_668_p1(9 - 1 downto 0);
                c_addr_7_reg_839 <= cp_sum2_cast_fu_685_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                j_6_reg_804 <= j_6_fu_579_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                k_2_reg_703 <= k_2_fu_381_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                k_3_reg_815 <= k_3_fu_600_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                n_reg_790(2) <= n_fu_559_p2(2);
    n_reg_790(3) <= n_fu_559_p2(3);
    n_reg_790(4) <= n_fu_559_p2(4);
    n_reg_790(5) <= n_fu_559_p2(5);
    n_reg_790(6) <= n_fu_559_p2(6);
    n_reg_790(7) <= n_fu_559_p2(7);
    n_reg_790(8) <= n_fu_559_p2(8);
    n_reg_790(9) <= n_fu_559_p2(9);
    n_reg_790(10) <= n_fu_559_p2(10);
    n_reg_790(11) <= n_fu_559_p2(11);
    n_reg_790(12) <= n_fu_559_p2(12);
    n_reg_790(13) <= n_fu_559_p2(13);
    n_reg_790(14) <= n_fu_559_p2(14);
    n_reg_790(15) <= n_fu_559_p2(15);
    n_reg_790(16) <= n_fu_559_p2(16);
    n_reg_790(17) <= n_fu_559_p2(17);
    n_reg_790(18) <= n_fu_559_p2(18);
    n_reg_790(19) <= n_fu_559_p2(19);
    n_reg_790(20) <= n_fu_559_p2(20);
    n_reg_790(21) <= n_fu_559_p2(21);
    n_reg_790(22) <= n_fu_559_p2(22);
    n_reg_790(23) <= n_fu_559_p2(23);
    n_reg_790(24) <= n_fu_559_p2(24);
    n_reg_790(25) <= n_fu_559_p2(25);
    n_reg_790(26) <= n_fu_559_p2(26);
    n_reg_790(27) <= n_fu_559_p2(27);
    n_reg_790(28) <= n_fu_559_p2(28);
    n_reg_790(29) <= n_fu_559_p2(29);
    n_reg_790(30) <= n_fu_559_p2(30);
    n_reg_790(31) <= n_fu_559_p2(31);
                nb_reg_780 <= grp_fu_531_p2;
                tmp_3_reg_785 <= n_2_reg_212(31 downto 1);
                tmp_7_reg_796(1) <= tmp_7_fu_565_p1(1);
    tmp_7_reg_796(2) <= tmp_7_fu_565_p1(2);
    tmp_7_reg_796(3) <= tmp_7_fu_565_p1(3);
    tmp_7_reg_796(4) <= tmp_7_fu_565_p1(4);
    tmp_7_reg_796(5) <= tmp_7_fu_565_p1(5);
    tmp_7_reg_796(6) <= tmp_7_fu_565_p1(6);
    tmp_7_reg_796(7) <= tmp_7_fu_565_p1(7);
    tmp_7_reg_796(8) <= tmp_7_fu_565_p1(8);
    tmp_7_reg_796(9) <= tmp_7_fu_565_p1(9);
    tmp_7_reg_796(10) <= tmp_7_fu_565_p1(10);
                wi_reg_774 <= sinVec_q0;
                wr_reg_768 <= cosVec_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                reg_338 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32))) then
                reg_347 <= c_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_356 <= grp_fu_302_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_364 <= grp_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                tmp_23_reg_864 <= grp_fu_310_p2;
                tmp_24_reg_869 <= grp_fu_315_p2;
                tmp_25_reg_874 <= grp_fu_320_p2;
                tmp_26_reg_879 <= grp_fu_325_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                tmp_29_reg_894 <= grp_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                tmp_31_reg_844 <= grp_fu_310_p2;
                tmp_32_reg_849 <= grp_fu_315_p2;
                tmp_33_reg_854 <= grp_fu_320_p2;
                tmp_34_reg_859 <= grp_fu_325_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_375_p2 = ap_const_lv1_0))) then
                tmp_reg_708 <= tmp_fu_387_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                wik_1_reg_889 <= grp_fu_306_p2;
                wrk_reg_884 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    c_addr_reg_712(0) <= '0';
    c_addr_1_reg_717(0) <= '1';
    c_addr_2_reg_722(0) <= '0';
    c_addr_3_reg_727(0) <= '1';
    n_reg_790(1 downto 0) <= "00";
    tmp_7_reg_796(0) <= '0';
    n_2_reg_212(0) <= '0';
    cp_s_reg_290(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_387_p2, exitcond3_fu_375_p2, exitcond2_fu_437_p2, exitcond_fu_594_p2, tmp_20_fu_606_p2, exitcond1_fu_573_p2, tmp_19_fu_585_p2, tmp_s_fu_525_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (tmp_fu_387_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and not((tmp_fu_387_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_437_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_s_fu_525_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if (((ap_const_lv1_0 = exitcond1_fu_573_p2) and (ap_const_lv1_0 = tmp_19_fu_585_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                elsif (((ap_const_lv1_0 = exitcond1_fu_573_p2) and not((ap_const_lv1_0 = tmp_19_fu_585_p2)))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st23_fsm_22 => 
                if (((ap_const_lv1_0 = exitcond_fu_594_p2) and not((ap_const_lv1_0 = tmp_20_fu_606_p2)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                elsif (((ap_const_lv1_0 = exitcond_fu_594_p2) and (ap_const_lv1_0 = tmp_20_fu_606_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_525_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_525_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_525_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_525_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_140 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_237 assign process. --
    ap_sig_bdd_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_237 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_261 assign process. --
    ap_sig_bdd_261_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_261 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_286 assign process. --
    ap_sig_bdd_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_286 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_297 assign process. --
    ap_sig_bdd_297_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_297 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_315 assign process. --
    ap_sig_bdd_315_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_315 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_349 assign process. --
    ap_sig_bdd_349_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_349 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_378 assign process. --
    ap_sig_bdd_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_378 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_392 assign process. --
    ap_sig_bdd_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_392 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_406 assign process. --
    ap_sig_bdd_406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_406 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_422 assign process. --
    ap_sig_bdd_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_422 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_429 assign process. --
    ap_sig_bdd_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_429 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_515 assign process. --
    ap_sig_bdd_515_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_515 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_237)
    begin
        if (ap_sig_bdd_237) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_261)
    begin
        if (ap_sig_bdd_261) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_422)
    begin
        if (ap_sig_bdd_422) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_286)
    begin
        if (ap_sig_bdd_286) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_429)
    begin
        if (ap_sig_bdd_429) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_140)
    begin
        if (ap_sig_bdd_140) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_406)
    begin
        if (ap_sig_bdd_406) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_392)
    begin
        if (ap_sig_bdd_392) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_349)
    begin
        if (ap_sig_bdd_349) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_297)
    begin
        if (ap_sig_bdd_297) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_378)
    begin
        if (ap_sig_bdd_378) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_315)
    begin
        if (ap_sig_bdd_315) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_515)
    begin
        if (ap_sig_bdd_515) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st2_fsm_1, c_addr_reg_712, c_addr_2_reg_722, ap_sig_cseq_ST_st23_fsm_22, c_addr_4_reg_824, c_addr_6_reg_834, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st5_fsm_4, tmp_8_fu_399_p1, tmp_11_fu_421_p1, cp_sum1_cast_fu_668_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            c_address0 <= c_addr_6_reg_834;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= c_addr_2_reg_722;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= c_addr_reg_712;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            c_address0 <= c_addr_4_reg_824;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address0 <= cp_sum1_cast_fu_668_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_11_fu_421_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address0 <= tmp_8_fu_399_p1(9 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st2_fsm_1, c_addr_1_reg_717, c_addr_3_reg_727, ap_sig_cseq_ST_st23_fsm_22, c_addr_5_reg_829, c_addr_7_reg_839, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, tmp_10_fu_410_p1, tmp_13_fu_432_p1, cp_sum2_cast_fu_685_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            c_address1 <= c_addr_7_reg_839;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= c_addr_3_reg_727;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= c_addr_1_reg_717;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_address1 <= c_addr_5_reg_829;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address1 <= cp_sum2_cast_fu_685_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_13_fu_432_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address1 <= tmp_10_fu_410_p1(9 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(c_q0, reg_338, reg_356, ap_sig_cseq_ST_st38_fsm_37, tmp_29_reg_894, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            c_d0 <= tmp_29_reg_894;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            c_d0 <= reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d0 <= reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= c_q0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(c_q1, reg_347, reg_356, reg_364, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            c_d1 <= reg_364;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            c_d1 <= reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d1 <= reg_347;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= c_q1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, tmp_reg_708, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_708 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(tmp_reg_708, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_708 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cosVec_address0 <= tmp_15_fu_543_p1(8 - 1 downto 0);

    -- cosVec_ce0 assign process. --
    cosVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            cosVec_ce0 <= ap_const_logic_1;
        else 
            cosVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cp_addr_rec_fu_694_p2 <= std_logic_vector(signed(cp_cast_fu_690_p1) + signed(cp_rec_reg_235));
        cp_cast_fu_690_p1 <= std_logic_vector(resize(signed(cp_s_reg_290),64));

    cp_sum1_cast_fu_668_p1 <= std_logic_vector(resize(unsigned(cp_sum1_fu_662_p2),64));
    cp_sum1_fu_662_p2 <= std_logic_vector(unsigned(tmp_36_fu_621_p1) + unsigned(tmp_24_cast_fu_657_p2));
    cp_sum2_cast_fu_685_p1 <= std_logic_vector(resize(unsigned(cp_sum2_fu_679_p2),64));
    cp_sum2_fu_679_p2 <= std_logic_vector(unsigned(tmp_36_fu_621_p1) + unsigned(tmp_26_cast_fu_673_p2));
    cp_sum9_cast_fu_652_p1 <= std_logic_vector(resize(unsigned(cp_sum9_fu_646_p2),64));
    cp_sum9_fu_646_p2 <= std_logic_vector(unsigned(tmp_36_fu_621_p1) + unsigned(tmp_23_cast_fu_642_p1));
    cp_sum_cast_fu_631_p1 <= std_logic_vector(resize(unsigned(cp_sum_fu_625_p2),64));
    cp_sum_fu_625_p2 <= std_logic_vector(unsigned(tmp_36_fu_621_p1) + unsigned(tmp_35_fu_617_p1));
    exitcond1_fu_573_p2 <= "1" when (j_3_reg_224 = ap_const_lv8_80) else "0";
    exitcond2_fu_437_p2 <= "1" when (q_reg_180 = ap_const_lv4_8) else "0";
    exitcond3_fu_375_p2 <= "1" when (k_reg_157 = ap_const_lv9_100) else "0";
    exitcond_fu_594_p2 <= "1" when (k_1_reg_277 = ap_const_lv8_80) else "0";
    grp_fu_302_ce <= ap_const_logic_1;

    -- grp_fu_302_opcode assign process. --
    grp_fu_302_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then 
            grp_fu_302_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_302_opcode <= ap_const_lv2_0;
        else 
            grp_fu_302_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_302_p0 assign process. --
    grp_fu_302_p0_assign_proc : process(reg_338, reg_347, ap_sig_cseq_ST_st33_fsm_32, tmp_31_reg_844, tmp_23_reg_864, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_302_p0 <= reg_347;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_302_p0 <= reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_302_p0 <= tmp_23_reg_864;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_302_p0 <= tmp_31_reg_844;
        else 
            grp_fu_302_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_302_p1 assign process. --
    grp_fu_302_p1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, reg_356, reg_364, tmp_32_reg_849, ap_sig_cseq_ST_st27_fsm_26, tmp_24_reg_869, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_302_p1 <= reg_364;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_302_p1 <= reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_302_p1 <= tmp_24_reg_869;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_302_p1 <= tmp_32_reg_849;
        else 
            grp_fu_302_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_306_ce <= ap_const_logic_1;

    -- grp_fu_306_opcode assign process. --
    grp_fu_306_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_306_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then 
            grp_fu_306_opcode <= ap_const_lv2_0;
        else 
            grp_fu_306_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_306_p0 assign process. --
    grp_fu_306_p0_assign_proc : process(reg_338, reg_347, ap_sig_cseq_ST_st33_fsm_32, tmp_33_reg_854, ap_sig_cseq_ST_st27_fsm_26, tmp_25_reg_874, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_306_p0 <= reg_347;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_306_p0 <= reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_306_p0 <= tmp_25_reg_874;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_306_p0 <= tmp_33_reg_854;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_306_p1 assign process. --
    grp_fu_306_p1_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, reg_356, reg_364, tmp_34_reg_859, ap_sig_cseq_ST_st27_fsm_26, tmp_26_reg_879, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_306_p1 <= reg_364;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_306_p1 <= reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_306_p1 <= tmp_26_reg_879;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_306_p1 <= tmp_34_reg_859;
        else 
            grp_fu_306_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_310_ce <= ap_const_logic_1;

    -- grp_fu_310_p0 assign process. --
    grp_fu_310_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wr_reg_768, ap_sig_cseq_ST_st23_fsm_22, d_reg_247)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_310_p0 <= d_reg_247;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_310_p0 <= wr_reg_768;
        else 
            grp_fu_310_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_310_p1 assign process. --
    grp_fu_310_p1_assign_proc : process(c_q0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, d_reg_247)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_310_p1 <= c_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_310_p1 <= d_reg_247;
        else 
            grp_fu_310_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_315_ce <= ap_const_logic_1;

    -- grp_fu_315_p0 assign process. --
    grp_fu_315_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wi_reg_774, ap_sig_cseq_ST_st23_fsm_22, wik_reg_262)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_315_p0 <= wik_reg_262;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_315_p0 <= wi_reg_774;
        else 
            grp_fu_315_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_315_p1 assign process. --
    grp_fu_315_p1_assign_proc : process(c_q1, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, wik_reg_262)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_315_p1 <= c_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_315_p1 <= wik_reg_262;
        else 
            grp_fu_315_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_320_ce <= ap_const_logic_1;

    -- grp_fu_320_p0 assign process. --
    grp_fu_320_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wr_reg_768, ap_sig_cseq_ST_st23_fsm_22, d_reg_247)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_320_p0 <= d_reg_247;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_320_p0 <= wr_reg_768;
        else 
            grp_fu_320_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_320_p1 assign process. --
    grp_fu_320_p1_assign_proc : process(c_q1, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, wik_reg_262)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_320_p1 <= c_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_320_p1 <= wik_reg_262;
        else 
            grp_fu_320_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_325_ce <= ap_const_logic_1;

    -- grp_fu_325_p0 assign process. --
    grp_fu_325_p0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, wi_reg_774, ap_sig_cseq_ST_st23_fsm_22, wik_reg_262)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_325_p0 <= wik_reg_262;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_325_p0 <= wi_reg_774;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_325_p1 assign process. --
    grp_fu_325_p1_assign_proc : process(c_q0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st23_fsm_22, d_reg_247)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_325_p1 <= c_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_325_p1 <= d_reg_247;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_531_ce <= ap_const_logic_1;
    grp_fu_531_p0 <= ap_const_lv32_100(11 - 1 downto 0);
    grp_fu_531_p1 <= n_2_reg_212;
    i0_1_fu_611_p2 <= std_logic_vector(shift_left(unsigned(k_1_reg_277),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    i0_fu_393_p2 <= std_logic_vector(shift_left(unsigned(k_reg_157),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    i1_fu_415_p2 <= std_logic_vector(shift_left(unsigned(j_reg_168),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    icmp_fu_471_p2 <= "1" when (signed(tmp_18_fu_461_p4) > signed(ap_const_lv31_0)) else "0";
    j_2_fu_503_p3 <= 
        j_5_fu_483_p2 when (or_cond_fu_477_p2(0) = '1') else 
        j_1_reg_191;
    j_3_cast2_fu_569_p1 <= std_logic_vector(resize(unsigned(j_3_reg_224),32));
    j_4_fu_519_p2 <= std_logic_vector(unsigned(j_1_reg_191) + unsigned(n3_reg_201));
    j_5_fu_483_p2 <= std_logic_vector(unsigned(j_1_reg_191) - unsigned(n3_reg_201));
    j_6_fu_579_p2 <= std_logic_vector(unsigned(j_3_reg_224) + unsigned(ap_const_lv8_1));
    k_1_cast1_fu_590_p1 <= std_logic_vector(resize(unsigned(k_1_reg_277),31));
    k_2_fu_381_p2 <= std_logic_vector(unsigned(k_reg_157) + unsigned(ap_const_lv9_1));
    k_3_fu_600_p2 <= std_logic_vector(unsigned(k_1_reg_277) + unsigned(ap_const_lv8_1));
    k_cast3_fu_371_p1 <= std_logic_vector(resize(unsigned(k_reg_157),32));
    n_1_fu_511_p3 <= 
        n_3_fu_499_p1 when (or_cond_fu_477_p2(0) = '1') else 
        n3_reg_201;
    n_3_fu_499_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_489_p4),32));
    n_fu_559_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_212),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    or_cond_fu_477_p2 <= (rev5_fu_455_p2 and icmp_fu_471_p2);
    q_1_fu_443_p2 <= std_logic_vector(unsigned(q_reg_180) + unsigned(ap_const_lv4_1));
    rev5_fu_455_p2 <= (slt_fu_449_p2 xor ap_const_lv1_1);
    sinVec_address0 <= tmp_15_fu_543_p1(8 - 1 downto 0);

    -- sinVec_ce0 assign process. --
    sinVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            sinVec_ce0 <= ap_const_logic_1;
        else 
            sinVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_449_p2 <= "1" when (signed(j_1_reg_191) < signed(n3_reg_201)) else "0";
    tmp_10_fu_410_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_404_p2),64));
        tmp_11_fu_421_p1 <= std_logic_vector(resize(signed(i1_fu_415_p2),64));

    tmp_12_fu_426_p2 <= (i1_fu_415_p2 or ap_const_lv32_1);
        tmp_13_fu_432_p1 <= std_logic_vector(resize(signed(tmp_12_fu_426_p2),64));

    tmp_14_fu_537_p2 <= std_logic_vector(unsigned(n_2_reg_212) + unsigned(ap_const_lv32_FFFFFFFF));
        tmp_15_fu_543_p1 <= std_logic_vector(resize(signed(tmp_14_fu_537_p2),64));

    tmp_18_fu_461_p4 <= n3_reg_201(31 downto 1);
    tmp_19_fu_585_p2 <= "1" when (signed(j_3_cast2_fu_569_p1) < signed(nb_reg_780)) else "0";
    tmp_20_fu_606_p2 <= "1" when (signed(k_1_cast1_fu_590_p1) < signed(tmp_3_reg_785)) else "0";
    tmp_22_fu_636_p2 <= (i0_1_fu_611_p2 or ap_const_lv8_1);
    tmp_23_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_636_p2),11));
    tmp_24_cast_fu_657_p2 <= std_logic_vector(unsigned(tmp_35_fu_617_p1) + unsigned(tmp_7_reg_796));
    tmp_26_cast_fu_673_p2 <= (tmp_24_cast_fu_657_p2 or ap_const_lv11_1);
    tmp_35_fu_617_p1 <= std_logic_vector(resize(unsigned(i0_1_fu_611_p2),11));
    tmp_36_fu_621_p1 <= cp_rec_reg_235(11 - 1 downto 0);
    tmp_5_fu_489_p4 <= n3_reg_201(31 downto 1);
    tmp_7_fu_565_p1 <= n_2_reg_212(11 - 1 downto 0);
    tmp_8_fu_399_p1 <= std_logic_vector(resize(unsigned(i0_fu_393_p2),64));
    tmp_9_fu_404_p2 <= (i0_fu_393_p2 or ap_const_lv9_1);
    tmp_fu_387_p2 <= "1" when (signed(k_cast3_fu_371_p1) < signed(j_reg_168)) else "0";
    tmp_s_fu_525_p2 <= "1" when (signed(n_2_reg_212) < signed(ap_const_lv32_101)) else "0";

    -- voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start assign process. --
    voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_525_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_fu_525_p2)))) then 
            voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start <= ap_const_logic_1;
        else 
            voicerec_sdiv_11ns_32ns_32_15_seq_U11_ap_start <= ap_const_logic_0;
        end if; 
    end process;

end behav;
