-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_feedForward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pattern_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pattern_ce0 : OUT STD_LOGIC;
    pattern_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_feedForward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st110_fsm_109 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st111_fsm_110 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st112_fsm_111 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st113_fsm_112 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st114_fsm_113 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st115_fsm_114 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st116_fsm_115 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st117_fsm_116 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st118_fsm_117 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st119_fsm_118 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st120_fsm_119 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st121_fsm_120 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st122_fsm_121 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st123_fsm_122 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st124_fsm_123 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st125_fsm_124 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st126_fsm_125 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st127_fsm_126 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st128_fsm_127 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st129_fsm_128 : STD_LOGIC_VECTOR (138 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st130_fsm_129 : STD_LOGIC_VECTOR (138 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st131_fsm_130 : STD_LOGIC_VECTOR (138 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st132_fsm_131 : STD_LOGIC_VECTOR (138 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st133_fsm_132 : STD_LOGIC_VECTOR (138 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st134_fsm_133 : STD_LOGIC_VECTOR (138 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st135_fsm_134 : STD_LOGIC_VECTOR (138 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st136_fsm_135 : STD_LOGIC_VECTOR (138 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st137_fsm_136 : STD_LOGIC_VECTOR (138 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st138_fsm_137 : STD_LOGIC_VECTOR (138 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st139_fsm_138 : STD_LOGIC_VECTOR (138 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv10_372 : STD_LOGIC_VECTOR (9 downto 0) := "1101110010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_373 : STD_LOGIC_VECTOR (9 downto 0) := "1101110011";
    constant ap_const_lv15_19 : STD_LOGIC_VECTOR (14 downto 0) := "000000000011001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (138 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_we0 : STD_LOGIC;
    signal input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hidden_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hidden_ce0 : STD_LOGIC;
    signal hidden_we0 : STD_LOGIC;
    signal hidden_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hidden_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightIH_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal weightIH_ce0 : STD_LOGIC;
    signal weightIH_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightHO_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weightHO_ce0 : STD_LOGIC;
    signal weightHO_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_281 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_216 : BOOLEAN;
    signal exitcond2_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal exitcond_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_242 : BOOLEAN;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_249 : BOOLEAN;
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal ap_sig_cseq_ST_st82_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_266 : BOOLEAN;
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_276 : BOOLEAN;
    signal ap_sig_cseq_ST_st101_fsm_100 : STD_LOGIC;
    signal ap_sig_bdd_283 : BOOLEAN;
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_293 : BOOLEAN;
    signal ap_sig_cseq_ST_st106_fsm_105 : STD_LOGIC;
    signal ap_sig_bdd_300 : BOOLEAN;
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal ap_sig_cseq_ST_st137_fsm_136 : STD_LOGIC;
    signal ap_sig_bdd_317 : BOOLEAN;
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_327 : BOOLEAN;
    signal ap_sig_cseq_ST_st138_fsm_137 : STD_LOGIC;
    signal ap_sig_bdd_334 : BOOLEAN;
    signal j_2_fu_326_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_484 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_344 : BOOLEAN;
    signal tmp_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_489 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_343_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_360 : BOOLEAN;
    signal hidden_addr_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_trn_cast_fu_354_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_trn_cast_reg_512 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_1_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_520 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_530 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_384 : BOOLEAN;
    signal j_4_fu_412_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_553 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_394 : BOOLEAN;
    signal output_addr_reg_558 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_trn_cast_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_trn_cast_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_2_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_571 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_416 : BOOLEAN;
    signal j_reg_155 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_430 : BOOLEAN;
    signal j1_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_439 : BOOLEAN;
    signal tmp_4_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_451 : BOOLEAN;
    signal k_reg_189 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_200 : STD_LOGIC_VECTOR (14 downto 0);
    signal j2_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st139_fsm_138 : STD_LOGIC;
    signal ap_sig_bdd_465 : BOOLEAN;
    signal tmp_1_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st83_fsm_82 : STD_LOGIC;
    signal ap_sig_bdd_477 : BOOLEAN;
    signal k3_reg_234 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_508 : BOOLEAN;
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_515 : BOOLEAN;
    signal grp_fu_252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_532 : BOOLEAN;
    signal ap_sig_cseq_ST_st102_fsm_101 : STD_LOGIC;
    signal ap_sig_bdd_539 : BOOLEAN;
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_549 : BOOLEAN;
    signal ap_sig_cseq_ST_st107_fsm_106 : STD_LOGIC;
    signal ap_sig_bdd_556 : BOOLEAN;
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_565 : BOOLEAN;
    signal ap_sig_cseq_ST_st84_fsm_83 : STD_LOGIC;
    signal ap_sig_bdd_572 : BOOLEAN;
    signal weightIH_addr2_fu_381_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_115_to_int_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_neg_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_444_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal weightHO_addr3_cast_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightHO_addr4_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_125_to_int_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_125_neg_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_266_ce : STD_LOGIC;
    signal grp_fu_271_ce : STD_LOGIC;
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (138 downto 0);

    component voicerec_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_ddiv_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dexp_64ns_64ns_64_18_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_feedForward_input_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_processChunk_e IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_feedForward_weightIH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_feedForward_weightHO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_r_U : component voicerec_feedForward_input_r
    generic map (
        DataWidth => 32,
        AddressRange => 883,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_r_address0,
        ce0 => input_r_ce0,
        we0 => input_r_we0,
        d0 => input_r_d0,
        q0 => input_r_q0);

    hidden_U : component voicerec_processChunk_e
    generic map (
        DataWidth => 32,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hidden_address0,
        ce0 => hidden_ce0,
        we0 => hidden_we0,
        d0 => hidden_d0,
        q0 => hidden_q0);

    weightIH_U : component voicerec_feedForward_weightIH
    generic map (
        DataWidth => 32,
        AddressRange => 22075,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightIH_address0,
        ce0 => weightIH_ce0,
        q0 => weightIH_q0);

    weightHO_U : component voicerec_feedForward_weightHO
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightHO_address0,
        ce0 => weightHO_ce0,
        q0 => weightHO_q0);

    voicerec_fadd_32ns_32ns_32_5_full_dsp_U33 : component voicerec_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_246_p0,
        din1 => grp_fu_246_p1,
        ce => grp_fu_246_ce,
        dout => grp_fu_246_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U34 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_252_p0,
        din1 => grp_fu_252_p1,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);

    voicerec_fptrunc_64ns_32_1_U35 : component voicerec_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_260_p0,
        dout => grp_fu_260_p1);

    voicerec_fpext_32ns_64_1_U36 : component voicerec_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_263_p0,
        dout => grp_fu_263_p1);

    voicerec_dadd_64ns_64ns_64_5_full_dsp_U37 : component voicerec_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => grp_fu_266_ce,
        dout => grp_fu_266_p2);

    voicerec_ddiv_64ns_64ns_64_31_U38 : component voicerec_ddiv_64ns_64ns_64_31
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => grp_fu_271_p1,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    voicerec_dexp_64ns_64ns_64_18_full_dsp_U39 : component voicerec_dexp_64ns_64ns_64_18_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- j1_reg_166 assign process. --
    j1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_320_p2)))) then 
                j1_reg_166 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
                j1_reg_166 <= j_3_reg_502;
            end if; 
        end if;
    end process;

    -- j2_reg_211 assign process. --
    j2_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_337_p2)))) then 
                j2_reg_211 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138)) then 
                j2_reg_211 <= j_4_reg_553;
            end if; 
        end if;
    end process;

    -- j_reg_155 assign process. --
    j_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_155 <= j_2_reg_484;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_155 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- k3_reg_234 assign process. --
    k3_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then 
                k3_reg_234 <= k_2_reg_571;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_lv1_0 = exitcond1_fu_406_p2))) then 
                k3_reg_234 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_reg_189 assign process. --
    k_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                k_reg_189 <= k_1_reg_520;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_337_p2))) then 
                k_reg_189 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_200 assign process. --
    phi_mul_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                phi_mul_reg_200 <= next_mul_reg_530;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_337_p2))) then 
                phi_mul_reg_200 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    -- tmp_1_reg_222 assign process. --
    tmp_1_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then 
                tmp_1_reg_222 <= reg_291;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_lv1_0 = exitcond1_fu_406_p2))) then 
                tmp_1_reg_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- tmp_4_reg_177 assign process. --
    tmp_4_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                tmp_4_reg_177 <= reg_291;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_337_p2))) then 
                tmp_4_reg_177 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_337_p2))) then
                hidden_addr_reg_507 <= tmp_s_fu_349_p1(5 - 1 downto 0);
                tmp_trn_cast_reg_512(0) <= tmp_trn_cast_fu_354_p1(0);
    tmp_trn_cast_reg_512(1) <= tmp_trn_cast_fu_354_p1(1);
    tmp_trn_cast_reg_512(2) <= tmp_trn_cast_fu_354_p1(2);
    tmp_trn_cast_reg_512(3) <= tmp_trn_cast_fu_354_p1(3);
    tmp_trn_cast_reg_512(4) <= tmp_trn_cast_fu_354_p1(4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                j_2_reg_484 <= j_2_fu_326_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_3_reg_502 <= j_3_fu_343_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then
                j_4_reg_553 <= j_4_fu_412_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                k_1_reg_520 <= k_1_fu_364_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then
                k_2_reg_571 <= k_2_fu_433_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (exitcond2_fu_358_p2 = ap_const_lv1_0))) then
                next_mul_reg_530 <= next_mul_fu_375_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_lv1_0 = exitcond1_fu_406_p2))) then
                output_addr_reg_558 <= tmp_5_fu_418_p1(2 - 1 downto 0);
                tmp_5_trn_cast_reg_563(0) <= tmp_5_trn_cast_fu_423_p1(0);
    tmp_5_trn_cast_reg_563(1) <= tmp_5_trn_cast_fu_423_p1(1);
    tmp_5_trn_cast_reg_563(2) <= tmp_5_trn_cast_fu_423_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((exitcond2_fu_358_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72) and not((ap_const_lv1_0 = exitcond_fu_427_p2))))) then
                reg_281 <= grp_fu_263_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76))) then
                reg_286 <= grp_fu_252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81))) then
                reg_291 <= grp_fu_246_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st101_fsm_100))) then
                reg_299 <= grp_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_105))) then
                reg_304 <= grp_fu_266_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st137_fsm_136))) then
                reg_309 <= grp_fu_271_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) or (ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_137))) then
                reg_314 <= grp_fu_260_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_320_p2))) then
                tmp_reg_489(0) <= tmp_fu_332_p1(0);
    tmp_reg_489(1) <= tmp_fu_332_p1(1);
    tmp_reg_489(2) <= tmp_fu_332_p1(2);
    tmp_reg_489(3) <= tmp_fu_332_p1(3);
    tmp_reg_489(4) <= tmp_fu_332_p1(4);
    tmp_reg_489(5) <= tmp_fu_332_p1(5);
    tmp_reg_489(6) <= tmp_fu_332_p1(6);
    tmp_reg_489(7) <= tmp_fu_332_p1(7);
    tmp_reg_489(8) <= tmp_fu_332_p1(8);
    tmp_reg_489(9) <= tmp_fu_332_p1(9);
            end if;
        end if;
    end process;
    tmp_reg_489(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_trn_cast_reg_512(14 downto 5) <= "0000000000";
    tmp_5_trn_cast_reg_563(7 downto 3) <= "00000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_358_p2, exitcond_fu_427_p2, exitcond4_fu_320_p2, exitcond3_fu_337_p2, exitcond1_fu_406_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond3_fu_337_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_71;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((exitcond2_fu_358_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st72_fsm_71 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_406_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st73_fsm_72;
                end if;
            when ap_ST_st73_fsm_72 => 
                if (not((ap_const_lv1_0 = exitcond_fu_427_p2))) then
                    ap_NS_fsm <= ap_ST_st84_fsm_83;
                else
                    ap_NS_fsm <= ap_ST_st74_fsm_73;
                end if;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st106_fsm_105;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st109_fsm_108;
            when ap_ST_st109_fsm_108 => 
                ap_NS_fsm <= ap_ST_st110_fsm_109;
            when ap_ST_st110_fsm_109 => 
                ap_NS_fsm <= ap_ST_st111_fsm_110;
            when ap_ST_st111_fsm_110 => 
                ap_NS_fsm <= ap_ST_st112_fsm_111;
            when ap_ST_st112_fsm_111 => 
                ap_NS_fsm <= ap_ST_st113_fsm_112;
            when ap_ST_st113_fsm_112 => 
                ap_NS_fsm <= ap_ST_st114_fsm_113;
            when ap_ST_st114_fsm_113 => 
                ap_NS_fsm <= ap_ST_st115_fsm_114;
            when ap_ST_st115_fsm_114 => 
                ap_NS_fsm <= ap_ST_st116_fsm_115;
            when ap_ST_st116_fsm_115 => 
                ap_NS_fsm <= ap_ST_st117_fsm_116;
            when ap_ST_st117_fsm_116 => 
                ap_NS_fsm <= ap_ST_st118_fsm_117;
            when ap_ST_st118_fsm_117 => 
                ap_NS_fsm <= ap_ST_st119_fsm_118;
            when ap_ST_st119_fsm_118 => 
                ap_NS_fsm <= ap_ST_st120_fsm_119;
            when ap_ST_st120_fsm_119 => 
                ap_NS_fsm <= ap_ST_st121_fsm_120;
            when ap_ST_st121_fsm_120 => 
                ap_NS_fsm <= ap_ST_st122_fsm_121;
            when ap_ST_st122_fsm_121 => 
                ap_NS_fsm <= ap_ST_st123_fsm_122;
            when ap_ST_st123_fsm_122 => 
                ap_NS_fsm <= ap_ST_st124_fsm_123;
            when ap_ST_st124_fsm_123 => 
                ap_NS_fsm <= ap_ST_st125_fsm_124;
            when ap_ST_st125_fsm_124 => 
                ap_NS_fsm <= ap_ST_st126_fsm_125;
            when ap_ST_st126_fsm_125 => 
                ap_NS_fsm <= ap_ST_st127_fsm_126;
            when ap_ST_st127_fsm_126 => 
                ap_NS_fsm <= ap_ST_st128_fsm_127;
            when ap_ST_st128_fsm_127 => 
                ap_NS_fsm <= ap_ST_st129_fsm_128;
            when ap_ST_st129_fsm_128 => 
                ap_NS_fsm <= ap_ST_st130_fsm_129;
            when ap_ST_st130_fsm_129 => 
                ap_NS_fsm <= ap_ST_st131_fsm_130;
            when ap_ST_st131_fsm_130 => 
                ap_NS_fsm <= ap_ST_st132_fsm_131;
            when ap_ST_st132_fsm_131 => 
                ap_NS_fsm <= ap_ST_st133_fsm_132;
            when ap_ST_st133_fsm_132 => 
                ap_NS_fsm <= ap_ST_st134_fsm_133;
            when ap_ST_st134_fsm_133 => 
                ap_NS_fsm <= ap_ST_st135_fsm_134;
            when ap_ST_st135_fsm_134 => 
                ap_NS_fsm <= ap_ST_st136_fsm_135;
            when ap_ST_st136_fsm_135 => 
                ap_NS_fsm <= ap_ST_st137_fsm_136;
            when ap_ST_st137_fsm_136 => 
                ap_NS_fsm <= ap_ST_st138_fsm_137;
            when ap_ST_st138_fsm_137 => 
                ap_NS_fsm <= ap_ST_st139_fsm_138;
            when ap_ST_st139_fsm_138 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st72_fsm_71, exitcond1_fu_406_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and not((ap_const_lv1_0 = exitcond1_fu_406_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st72_fsm_71, exitcond1_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and not((ap_const_lv1_0 = exitcond1_fu_406_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_216 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_242 assign process. --
    ap_sig_bdd_242_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_242 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_249 assign process. --
    ap_sig_bdd_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_249 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_266 assign process. --
    ap_sig_bdd_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_266 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_276 assign process. --
    ap_sig_bdd_276_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_276 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_283 assign process. --
    ap_sig_bdd_283_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_283 <= (ap_const_lv1_1 = ap_CS_fsm(100 downto 100));
    end process;


    -- ap_sig_bdd_293 assign process. --
    ap_sig_bdd_293_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_293 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_300 <= (ap_const_lv1_1 = ap_CS_fsm(105 downto 105));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_317 assign process. --
    ap_sig_bdd_317_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_317 <= (ap_const_lv1_1 = ap_CS_fsm(136 downto 136));
    end process;


    -- ap_sig_bdd_327 assign process. --
    ap_sig_bdd_327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_327 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_334 assign process. --
    ap_sig_bdd_334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_334 <= (ap_const_lv1_1 = ap_CS_fsm(137 downto 137));
    end process;


    -- ap_sig_bdd_344 assign process. --
    ap_sig_bdd_344_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_344 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_360 assign process. --
    ap_sig_bdd_360_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_360 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_384 assign process. --
    ap_sig_bdd_384_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_384 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_394 assign process. --
    ap_sig_bdd_394_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_394 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_416 assign process. --
    ap_sig_bdd_416_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_416 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_430 assign process. --
    ap_sig_bdd_430_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_430 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_439 assign process. --
    ap_sig_bdd_439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_439 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_451 assign process. --
    ap_sig_bdd_451_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_451 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_465 assign process. --
    ap_sig_bdd_465_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_465 <= (ap_const_lv1_1 = ap_CS_fsm(138 downto 138));
    end process;


    -- ap_sig_bdd_477 assign process. --
    ap_sig_bdd_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_477 <= (ap_const_lv1_1 = ap_CS_fsm(82 downto 82));
    end process;


    -- ap_sig_bdd_508 assign process. --
    ap_sig_bdd_508_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_508 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_515 assign process. --
    ap_sig_bdd_515_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_515 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_532 assign process. --
    ap_sig_bdd_532_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_532 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_539 assign process. --
    ap_sig_bdd_539_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_539 <= (ap_const_lv1_1 = ap_CS_fsm(101 downto 101));
    end process;


    -- ap_sig_bdd_549 assign process. --
    ap_sig_bdd_549_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_549 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_556 assign process. --
    ap_sig_bdd_556_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_556 <= (ap_const_lv1_1 = ap_CS_fsm(106 downto 106));
    end process;


    -- ap_sig_bdd_565 assign process. --
    ap_sig_bdd_565_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_565 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_572 assign process. --
    ap_sig_bdd_572_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_572 <= (ap_const_lv1_1 = ap_CS_fsm(83 downto 83));
    end process;


    -- ap_sig_cseq_ST_st101_fsm_100 assign process. --
    ap_sig_cseq_ST_st101_fsm_100_assign_proc : process(ap_sig_bdd_283)
    begin
        if (ap_sig_bdd_283) then 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st102_fsm_101 assign process. --
    ap_sig_cseq_ST_st102_fsm_101_assign_proc : process(ap_sig_bdd_539)
    begin
        if (ap_sig_bdd_539) then 
            ap_sig_cseq_ST_st102_fsm_101 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st102_fsm_101 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st106_fsm_105 assign process. --
    ap_sig_cseq_ST_st106_fsm_105_assign_proc : process(ap_sig_bdd_300)
    begin
        if (ap_sig_bdd_300) then 
            ap_sig_cseq_ST_st106_fsm_105 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st106_fsm_105 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st107_fsm_106 assign process. --
    ap_sig_cseq_ST_st107_fsm_106_assign_proc : process(ap_sig_bdd_556)
    begin
        if (ap_sig_bdd_556) then 
            ap_sig_cseq_ST_st107_fsm_106 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st107_fsm_106 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_508)
    begin
        if (ap_sig_bdd_508) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st137_fsm_136 assign process. --
    ap_sig_cseq_ST_st137_fsm_136_assign_proc : process(ap_sig_bdd_317)
    begin
        if (ap_sig_bdd_317) then 
            ap_sig_cseq_ST_st137_fsm_136 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st137_fsm_136 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st138_fsm_137 assign process. --
    ap_sig_cseq_ST_st138_fsm_137_assign_proc : process(ap_sig_bdd_334)
    begin
        if (ap_sig_bdd_334) then 
            ap_sig_cseq_ST_st138_fsm_137 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st138_fsm_137 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st139_fsm_138 assign process. --
    ap_sig_cseq_ST_st139_fsm_138_assign_proc : process(ap_sig_bdd_465)
    begin
        if (ap_sig_bdd_465) then 
            ap_sig_cseq_ST_st139_fsm_138 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st139_fsm_138 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_451)
    begin
        if (ap_sig_bdd_451) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_565)
    begin
        if (ap_sig_bdd_565) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_344)
    begin
        if (ap_sig_bdd_344) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_276)
    begin
        if (ap_sig_bdd_276) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_532)
    begin
        if (ap_sig_bdd_532) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_293)
    begin
        if (ap_sig_bdd_293) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_549)
    begin
        if (ap_sig_bdd_549) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_430)
    begin
        if (ap_sig_bdd_430) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_360)
    begin
        if (ap_sig_bdd_360) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_384)
    begin
        if (ap_sig_bdd_384) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_327)
    begin
        if (ap_sig_bdd_327) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_439)
    begin
        if (ap_sig_bdd_439) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_71 assign process. --
    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_bdd_394)
    begin
        if (ap_sig_bdd_394) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st74_fsm_73 assign process. --
    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_bdd_416)
    begin
        if (ap_sig_bdd_416) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_249)
    begin
        if (ap_sig_bdd_249) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st78_fsm_77 assign process. --
    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_bdd_515)
    begin
        if (ap_sig_bdd_515) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st82_fsm_81 assign process. --
    ap_sig_cseq_ST_st82_fsm_81_assign_proc : process(ap_sig_bdd_266)
    begin
        if (ap_sig_bdd_266) then 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st83_fsm_82 assign process. --
    ap_sig_cseq_ST_st83_fsm_82_assign_proc : process(ap_sig_bdd_477)
    begin
        if (ap_sig_bdd_477) then 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st84_fsm_83 assign process. --
    ap_sig_cseq_ST_st84_fsm_83_assign_proc : process(ap_sig_bdd_572)
    begin
        if (ap_sig_bdd_572) then 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_242)
    begin
        if (ap_sig_bdd_242) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_406_p2 <= "1" when (j2_reg_211 = ap_const_lv3_4) else "0";
    exitcond2_fu_358_p2 <= "1" when (k_reg_189 = ap_const_lv10_373) else "0";
    exitcond3_fu_337_p2 <= "1" when (j1_reg_166 = ap_const_lv5_19) else "0";
    exitcond4_fu_320_p2 <= "1" when (j_reg_155 = ap_const_lv10_372) else "0";
    exitcond_fu_427_p2 <= "1" when (k3_reg_234 = ap_const_lv5_1A) else "0";
    grp_fu_246_ce <= ap_const_logic_1;

    -- grp_fu_246_p0 assign process. --
    grp_fu_246_p0_assign_proc : process(tmp_4_reg_177, tmp_1_reg_222, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st78_fsm_77)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77)) then 
            grp_fu_246_p0 <= tmp_1_reg_222;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_246_p0 <= tmp_4_reg_177;
        else 
            grp_fu_246_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_246_p1 <= reg_286;
    grp_fu_252_ce <= ap_const_logic_1;

    -- grp_fu_252_p0 assign process. --
    grp_fu_252_p0_assign_proc : process(input_r_q0, hidden_q0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st74_fsm_73)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then 
            grp_fu_252_p0 <= hidden_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_252_p0 <= input_r_q0;
        else 
            grp_fu_252_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_252_p1 assign process. --
    grp_fu_252_p1_assign_proc : process(weightIH_q0, weightHO_q0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st74_fsm_73)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then 
            grp_fu_252_p1 <= weightHO_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_252_p1 <= weightIH_q0;
        else 
            grp_fu_252_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_260_p0 <= reg_309;

    -- grp_fu_263_p0 assign process. --
    grp_fu_263_p0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st73_fsm_72, tmp_6_fu_401_p1, tmp_13_fu_476_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then 
            grp_fu_263_p0 <= tmp_13_fu_476_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_263_p0 <= tmp_6_fu_401_p1;
        else 
            grp_fu_263_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_266_ce <= ap_const_logic_1;
    grp_fu_266_p0 <= reg_299;
    grp_fu_266_p1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_271_ce <= ap_const_logic_1;
    grp_fu_271_p0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_271_p1 <= reg_304;
    grp_fu_276_ce <= ap_const_logic_1;
    grp_fu_276_p0 <= ap_const_lv64_0;
    grp_fu_276_p1 <= reg_281;

    -- hidden_address0 assign process. --
    hidden_address0_assign_proc : process(ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st4_fsm_3, hidden_addr_reg_507, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st15_fsm_14, tmp_s_fu_349_p1, tmp_19_fu_439_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            hidden_address0 <= hidden_addr_reg_507;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            hidden_address0 <= tmp_s_fu_349_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then 
            hidden_address0 <= tmp_19_fu_439_p1(5 - 1 downto 0);
        else 
            hidden_address0 <= "XXXXX";
        end if; 
    end process;


    -- hidden_ce0 assign process. --
    hidden_ce0_assign_proc : process(ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            hidden_ce0 <= ap_const_logic_1;
        else 
            hidden_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- hidden_d0 assign process. --
    hidden_d0_assign_proc : process(reg_291, reg_314, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            hidden_d0 <= reg_314;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            hidden_d0 <= reg_291;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            hidden_d0 <= ap_const_lv32_0;
        else 
            hidden_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- hidden_we0 assign process. --
    hidden_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_337_p2, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_337_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            hidden_we0 <= ap_const_logic_1;
        else 
            hidden_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- input_r_address0 assign process. --
    input_r_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_reg_489, ap_sig_cseq_ST_st3_fsm_2, tmp_10_fu_370_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_address0 <= tmp_reg_489(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            input_r_address0 <= tmp_10_fu_370_p1(10 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- input_r_ce0 assign process. --
    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_d0 <= pattern_q0;

    -- input_r_we0 assign process. --
    input_r_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            input_r_we0 <= ap_const_logic_1;
        else 
            input_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_326_p2 <= std_logic_vector(unsigned(j_reg_155) + unsigned(ap_const_lv10_1));
    j_3_fu_343_p2 <= std_logic_vector(unsigned(j1_reg_166) + unsigned(ap_const_lv5_1));
    j_4_fu_412_p2 <= std_logic_vector(unsigned(j2_reg_211) + unsigned(ap_const_lv3_1));
    k_1_fu_364_p2 <= std_logic_vector(unsigned(k_reg_189) + unsigned(ap_const_lv10_1));
    k_2_fu_433_p2 <= std_logic_vector(unsigned(k3_reg_234) + unsigned(ap_const_lv5_1));
    next_mul_fu_375_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(ap_const_lv15_19));

    -- output_r_address0 assign process. --
    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st72_fsm_71, output_addr_reg_558, ap_sig_cseq_ST_st139_fsm_138, ap_sig_cseq_ST_st83_fsm_82, tmp_5_fu_418_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138) or (ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82))) then 
            output_r_address0 <= output_addr_reg_558;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            output_r_address0 <= tmp_5_fu_418_p1(2 - 1 downto 0);
        else 
            output_r_address0 <= "XX";
        end if; 
    end process;


    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st139_fsm_138, ap_sig_cseq_ST_st83_fsm_82)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138) or (ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_d0 assign process. --
    output_r_d0_assign_proc : process(reg_291, reg_314, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st139_fsm_138, ap_sig_cseq_ST_st83_fsm_82)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138)) then 
            output_r_d0 <= reg_314;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then 
            output_r_d0 <= reg_291;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            output_r_d0 <= ap_const_lv32_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st72_fsm_71, exitcond1_fu_406_p2, ap_sig_cseq_ST_st139_fsm_138, ap_sig_cseq_ST_st83_fsm_82)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_lv1_0 = exitcond1_fu_406_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_138) or (ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pattern_address0 <= tmp_fu_332_p1(10 - 1 downto 0);

    -- pattern_ce0 assign process. --
    pattern_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            pattern_ce0 <= ap_const_logic_1;
        else 
            pattern_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_370_p1 <= std_logic_vector(resize(unsigned(k_reg_189),64));
    tmp_115_neg_fu_395_p2 <= (tmp_115_to_int_fu_391_p1 xor ap_const_lv32_80000000);
    tmp_115_to_int_fu_391_p1 <= tmp_4_reg_177;
    tmp_125_neg_fu_470_p2 <= (tmp_125_to_int_fu_466_p1 xor ap_const_lv32_80000000);
    tmp_125_to_int_fu_466_p1 <= tmp_1_reg_222;
    tmp_13_fu_476_p1 <= tmp_125_neg_fu_470_p2;
    tmp_19_fu_439_p1 <= std_logic_vector(resize(unsigned(k3_reg_234),64));
    tmp_22_fu_386_p1 <= std_logic_vector(resize(unsigned(weightIH_addr2_fu_381_p2),64));
    tmp_23_fu_444_p3 <= (k3_reg_234 & ap_const_lv2_0);
    tmp_24_fu_461_p1 <= std_logic_vector(resize(unsigned(weightHO_addr4_fu_456_p2),64));
    tmp_5_fu_418_p1 <= std_logic_vector(resize(unsigned(j2_reg_211),64));
    tmp_5_trn_cast_fu_423_p1 <= std_logic_vector(resize(unsigned(j2_reg_211),8));
    tmp_6_fu_401_p1 <= tmp_115_neg_fu_395_p2;
    tmp_fu_332_p1 <= std_logic_vector(resize(unsigned(j_reg_155),64));
    tmp_s_fu_349_p1 <= std_logic_vector(resize(unsigned(j1_reg_166),64));
    tmp_trn_cast_fu_354_p1 <= std_logic_vector(resize(unsigned(j1_reg_166),15));
    weightHO_addr3_cast_fu_452_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_444_p3),8));
    weightHO_addr4_fu_456_p2 <= std_logic_vector(unsigned(weightHO_addr3_cast_fu_452_p1) + unsigned(tmp_5_trn_cast_reg_563));
    weightHO_address0 <= tmp_24_fu_461_p1(7 - 1 downto 0);

    -- weightHO_ce0 assign process. --
    weightHO_ce0_assign_proc : process(ap_sig_cseq_ST_st73_fsm_72)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then 
            weightHO_ce0 <= ap_const_logic_1;
        else 
            weightHO_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weightIH_addr2_fu_381_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(tmp_trn_cast_reg_512));
    weightIH_address0 <= tmp_22_fu_386_p1(15 - 1 downto 0);

    -- weightIH_ce0 assign process. --
    weightIH_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            weightIH_ce0 <= ap_const_logic_1;
        else 
            weightIH_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
