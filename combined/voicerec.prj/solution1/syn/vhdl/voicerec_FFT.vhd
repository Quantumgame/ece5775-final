-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    N : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of voicerec_FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal cosVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cosVec_ce0 : STD_LOGIC;
    signal cosVec_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sinVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinVec_ce0 : STD_LOGIC;
    signal sinVec_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_327 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_fu_343_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_3_reg_644 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal tmp_s_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_653 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_1_reg_658 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_2_reg_663 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_3_reg_668 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal j_4_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal wr_reg_704 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_238 : BOOLEAN;
    signal grp_fu_466_ap_done : STD_LOGIC;
    signal wi_1_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wi_1_reg_710 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_721 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_2_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_513_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_31_cast_reg_731 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_fu_517_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_736 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_6_fu_530_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_6_reg_744 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_263 : BOOLEAN;
    signal k_4_fu_545_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal k_4_reg_752 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_272 : BOOLEAN;
    signal c_addr_4_reg_757 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_33_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_5_reg_762 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_6_reg_767 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_7_reg_772 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_rec_fu_628_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_296 : BOOLEAN;
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_reg_787 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_reg_792 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_reg_797 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_reg_802 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal tmp_36_reg_807 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_reg_817 : STD_LOGIC_VECTOR (63 downto 0);
    signal wrk_reg_822 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_321 : BOOLEAN;
    signal wik_1_reg_827 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_157 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_337 : BOOLEAN;
    signal n_0_in_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_211 : STD_LOGIC_VECTOR (30 downto 0);
    signal cp_0_rec_reg_222 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_1_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_359 : BOOLEAN;
    signal k_1_reg_246 : STD_LOGIC_VECTOR (29 downto 0);
    signal wik_phi_fu_261_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal wik_reg_257 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_385 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_397 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_406 : BOOLEAN;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_420 : BOOLEAN;
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_436 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_443 : BOOLEAN;
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_450 : BOOLEAN;
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_461 : BOOLEAN;
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_fu_355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_401_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_415_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev6_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_526 : BOOLEAN;
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wi_1_to_int_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wi_1_neg_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_cast_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast_fu_536_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_551_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_555_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_563_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum8_fu_567_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_cast_fu_578_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_584_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_cast_fu_595_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_fu_600_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_cast_fu_611_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum2_fu_617_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_269_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_269_ce : STD_LOGIC;
    signal grp_fu_273_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_292_ce : STD_LOGIC;
    signal tmp_22_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_466_ap_start : STD_LOGIC;
    signal grp_fu_466_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);

    component voicerec_dadddsub_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_sdiv_32ns_32ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_cosVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_FFT_sinVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    cosVec_U : component voicerec_FFT_cosVec
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosVec_address0,
        ce0 => cosVec_ce0,
        q0 => cosVec_q0);

    sinVec_U : component voicerec_FFT_sinVec
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinVec_address0,
        ce0 => sinVec_ce0,
        q0 => sinVec_q0);

    voicerec_dadddsub_64ns_64ns_64_5_full_dsp_U4 : component voicerec_dadddsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_269_p0,
        din1 => grp_fu_269_p1,
        opcode => grp_fu_269_opcode,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p2);

    voicerec_dadddsub_64ns_64ns_64_5_full_dsp_U5 : component voicerec_dadddsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_273_p0,
        din1 => grp_fu_273_p1,
        opcode => grp_fu_273_opcode,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U6 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U7 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U8 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => grp_fu_287_p1,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U9 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => grp_fu_292_ce,
        dout => grp_fu_292_p2);

    voicerec_sdiv_32ns_32ns_32_36_seq_U10 : component voicerec_sdiv_32ns_32ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_466_ap_start,
        done => grp_fu_466_ap_done,
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        ce => grp_fu_466_ce,
        dout => grp_fu_466_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- cp_0_rec_reg_222 assign process. --
    cp_0_rec_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = tmp_33_fu_540_p2))) then 
                cp_0_rec_reg_222 <= p_rec_fu_628_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not((ap_const_logic_0 = grp_fu_466_ap_done)))) then 
                cp_0_rec_reg_222 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    -- d_1_reg_234 assign process. --
    d_1_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_lv1_0 = tmp_32_fu_525_p2)))) then 
                d_1_reg_234 <= ap_const_lv64_3FF0000000000000;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
                d_1_reg_234 <= wrk_reg_822;
            end if; 
        end if;
    end process;

    -- j_1_reg_180 assign process. --
    j_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_31_fu_443_p2)))) then 
                j_1_reg_180 <= j_4_fu_449_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_1_reg_180 <= j_reg_168;
            end if; 
        end if;
    end process;

    -- j_2_reg_211 assign process. --
    j_2_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = tmp_33_fu_540_p2))) then 
                j_2_reg_211 <= j_6_reg_744;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not((ap_const_logic_0 = grp_fu_466_ap_done)))) then 
                j_2_reg_211 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- j_reg_168 assign process. --
    j_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_31_fu_443_p2))) then 
                j_reg_168 <= j_5_fu_455_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_246 assign process. --
    k_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_lv1_0 = tmp_32_fu_525_p2)))) then 
                k_1_reg_246 <= ap_const_lv30_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
                k_1_reg_246 <= k_4_reg_752;
            end if; 
        end if;
    end process;

    -- k_reg_157 assign process. --
    k_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_31_fu_443_p2))) then 
                k_reg_157 <= k_3_reg_644;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_157 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- n_0_in_reg_190 assign process. --
    n_0_in_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_31_fu_443_p2)))) then 
                n_0_in_reg_190 <= n_fu_411_p1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                n_0_in_reg_190 <= N;
            end if; 
        end if;
    end process;

    -- n_1_reg_199 assign process. --
    n_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and (ap_const_lv1_0 = tmp_32_fu_525_p2))) then 
                                n_1_reg_199(31 downto 1) <= n_2_reg_726(31 downto 1);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_338_p2 = ap_const_lv1_0))) then 
                n_1_reg_199(1) <= '1';
                n_1_reg_199(2) <= '0';
                n_1_reg_199(3) <= '0';
                n_1_reg_199(4) <= '0';
                n_1_reg_199(5) <= '0';
                n_1_reg_199(6) <= '0';
                n_1_reg_199(7) <= '0';
                n_1_reg_199(8) <= '0';
                n_1_reg_199(9) <= '0';
                n_1_reg_199(10) <= '0';
                n_1_reg_199(11) <= '0';
                n_1_reg_199(12) <= '0';
                n_1_reg_199(13) <= '0';
                n_1_reg_199(14) <= '0';
                n_1_reg_199(15) <= '0';
                n_1_reg_199(16) <= '0';
                n_1_reg_199(17) <= '0';
                n_1_reg_199(18) <= '0';
                n_1_reg_199(19) <= '0';
                n_1_reg_199(20) <= '0';
                n_1_reg_199(21) <= '0';
                n_1_reg_199(22) <= '0';
                n_1_reg_199(23) <= '0';
                n_1_reg_199(24) <= '0';
                n_1_reg_199(25) <= '0';
                n_1_reg_199(26) <= '0';
                n_1_reg_199(27) <= '0';
                n_1_reg_199(28) <= '0';
                n_1_reg_199(29) <= '0';
                n_1_reg_199(30) <= '0';
                n_1_reg_199(31) <= '0';
            end if; 
        end if;
    end process;

    -- wik_reg_257 assign process. --
    wik_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_lv1_0 = tmp_32_fu_525_p2)))) then 
                wik_reg_257 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
                wik_reg_257 <= wik_1_reg_827;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_338_p2 = ap_const_lv1_0)) and not((tmp_s_fu_349_p2 = ap_const_lv1_0)))) then
                    c_addr_1_reg_658(8 downto 1) <= tmp_25_fu_374_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_reg_653(8 downto 1) <= tmp_23_fu_363_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    c_addr_2_reg_663(8 downto 1) <= tmp_26_fu_385_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_3_reg_668(8 downto 1) <= tmp_28_fu_396_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = tmp_33_fu_540_p2)))) then
                c_addr_4_reg_757 <= sum8_cast_fu_573_p1(9 - 1 downto 0);
                c_addr_5_reg_762 <= sum_cast_fu_590_p1(9 - 1 downto 0);
                c_addr_6_reg_767 <= sum1_cast_fu_606_p1(9 - 1 downto 0);
                c_addr_7_reg_772 <= sum2_cast_fu_623_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then
                j_6_reg_744 <= j_6_fu_530_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                k_3_reg_644 <= k_3_fu_343_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                k_4_reg_752 <= k_4_fu_545_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not((ap_const_logic_0 = grp_fu_466_ap_done)))) then
                    n_2_reg_726(31 downto 2) <= n_2_fu_507_p2(31 downto 2);
                nb_reg_716 <= grp_fu_466_p2;
                    tmp_10_reg_736(10 downto 1) <= tmp_10_fu_517_p1(10 downto 1);
                    tmp_31_cast_reg_731(62 downto 2) <= tmp_31_cast_fu_513_p1(62 downto 2);
                tmp_3_reg_721 <= n_1_reg_199(31 downto 1);
                wi_1_reg_710 <= wi_1_fu_493_p1;
                wr_reg_704 <= cosVec_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55))) then
                reg_301 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56))) then
                reg_310 <= c_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61))) then
                reg_319 <= grp_fu_269_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61))) then
                reg_327 <= grp_fu_273_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                tmp_35_reg_802 <= grp_fu_277_p2;
                tmp_36_reg_807 <= grp_fu_282_p2;
                tmp_37_reg_812 <= grp_fu_287_p2;
                tmp_38_reg_817 <= grp_fu_292_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then
                tmp_41_reg_832 <= grp_fu_273_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                tmp_43_reg_782 <= grp_fu_277_p2;
                tmp_44_reg_787 <= grp_fu_282_p2;
                tmp_45_reg_792 <= grp_fu_287_p2;
                tmp_46_reg_797 <= grp_fu_292_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_338_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_649 <= tmp_s_fu_349_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then
                wik_1_reg_827 <= grp_fu_273_p2;
                wrk_reg_822 <= grp_fu_269_p2;
            end if;
        end if;
    end process;
    c_addr_reg_653(0) <= '0';
    c_addr_1_reg_658(0) <= '1';
    c_addr_2_reg_663(0) <= '0';
    c_addr_3_reg_668(0) <= '1';
    n_2_reg_726(1 downto 0) <= "00";
    tmp_31_cast_reg_731(1 downto 0) <= "00";
    tmp_10_reg_736(0) <= '0';
    n_1_reg_199(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_s_fu_349_p2, tmp_fu_338_p2, tmp_31_fu_443_p2, grp_fu_466_ap_done, tmp_33_fu_540_p2, tmp_32_fu_525_p2, tmp_22_fu_461_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((tmp_fu_338_p2 = ap_const_lv1_0)) and (tmp_s_fu_349_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((tmp_fu_338_p2 = ap_const_lv1_0)) and not((tmp_s_fu_349_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = tmp_31_fu_443_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp_22_fu_461_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                if (not((ap_const_logic_0 = grp_fu_466_ap_done))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st43_fsm_42 => 
                if (not((ap_const_lv1_0 = tmp_32_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st44_fsm_43 => 
                if ((ap_const_lv1_0 = tmp_33_fu_540_p2)) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, tmp_22_fu_461_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_22_fu_461_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_22_fu_461_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_22_fu_461_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_238 assign process. --
    ap_sig_bdd_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_238 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_263 assign process. --
    ap_sig_bdd_263_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_263 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_272 assign process. --
    ap_sig_bdd_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_272 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_296 assign process. --
    ap_sig_bdd_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_296 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_321 assign process. --
    ap_sig_bdd_321_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_321 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_337 assign process. --
    ap_sig_bdd_337_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_337 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_359 assign process. --
    ap_sig_bdd_359_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_359 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_385 assign process. --
    ap_sig_bdd_385_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_385 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_397 assign process. --
    ap_sig_bdd_397_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_397 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_406 assign process. --
    ap_sig_bdd_406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_406 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_420 assign process. --
    ap_sig_bdd_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_420 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_436 assign process. --
    ap_sig_bdd_436_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_436 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_443 assign process. --
    ap_sig_bdd_443_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_443 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_450 assign process. --
    ap_sig_bdd_450_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_450 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_461 assign process. --
    ap_sig_bdd_461_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_461 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_526 assign process. --
    ap_sig_bdd_526_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_526 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_238)
    begin
        if (ap_sig_bdd_238) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_263)
    begin
        if (ap_sig_bdd_263) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_272)
    begin
        if (ap_sig_bdd_272) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_461)
    begin
        if (ap_sig_bdd_461) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_296)
    begin
        if (ap_sig_bdd_296) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_385)
    begin
        if (ap_sig_bdd_385) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_436)
    begin
        if (ap_sig_bdd_436) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_443)
    begin
        if (ap_sig_bdd_443) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_321)
    begin
        if (ap_sig_bdd_321) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_54 assign process. --
    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_bdd_397)
    begin
        if (ap_sig_bdd_397) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_55 assign process. --
    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_450)
    begin
        if (ap_sig_bdd_450) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_337)
    begin
        if (ap_sig_bdd_337) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st63_fsm_62 assign process. --
    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_bdd_420)
    begin
        if (ap_sig_bdd_420) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_406)
    begin
        if (ap_sig_bdd_406) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_359)
    begin
        if (ap_sig_bdd_359) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_526)
    begin
        if (ap_sig_bdd_526) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st2_fsm_1, c_addr_reg_653, c_addr_2_reg_663, ap_sig_cseq_ST_st44_fsm_43, c_addr_4_reg_757, c_addr_6_reg_767, ap_sig_cseq_ST_st5_fsm_4, tmp_23_fu_363_p1, tmp_26_fu_385_p1, sum1_cast_fu_606_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            c_address0 <= c_addr_6_reg_767;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= c_addr_2_reg_663;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= c_addr_reg_653;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            c_address0 <= c_addr_4_reg_757;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            c_address0 <= sum1_cast_fu_606_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_26_fu_385_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address0 <= tmp_23_fu_363_p1(9 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st56_fsm_55, ap_sig_cseq_ST_st2_fsm_1, c_addr_1_reg_658, c_addr_3_reg_668, ap_sig_cseq_ST_st44_fsm_43, c_addr_5_reg_762, c_addr_7_reg_772, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st65_fsm_64, tmp_25_fu_374_p1, tmp_28_fu_396_p1, sum2_cast_fu_623_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st63_fsm_62)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
            c_address1 <= c_addr_7_reg_772;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= c_addr_3_reg_668;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= c_addr_1_reg_658;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62))) then 
            c_address1 <= c_addr_5_reg_762;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            c_address1 <= sum2_cast_fu_623_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_28_fu_396_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address1 <= tmp_25_fu_374_p1(9 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st56_fsm_55, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st63_fsm_62)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(c_q0, reg_301, reg_319, ap_sig_cseq_ST_st62_fsm_61, tmp_41_reg_832, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            c_d0 <= tmp_41_reg_832;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            c_d0 <= reg_319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d0 <= reg_301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= c_q0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(c_q1, reg_310, reg_319, reg_327, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st63_fsm_62)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
            c_d1 <= reg_327;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62)) then 
            c_d1 <= reg_319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= c_q1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(ap_sig_cseq_ST_st62_fsm_61, tmp_s_reg_649, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_s_reg_649 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(tmp_s_reg_649, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st63_fsm_62)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_s_reg_649 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cosVec_address0 <= tmp_30_fu_477_p1(8 - 1 downto 0);

    -- cosVec_ce0 assign process. --
    cosVec_ce0_assign_proc : process(ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            cosVec_ce0 <= ap_const_logic_1;
        else 
            cosVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_269_ce <= ap_const_logic_1;

    -- grp_fu_269_opcode assign process. --
    grp_fu_269_opcode_assign_proc : process(ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            grp_fu_269_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57))) then 
            grp_fu_269_opcode <= ap_const_lv2_0;
        else 
            grp_fu_269_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_269_p0 assign process. --
    grp_fu_269_p0_assign_proc : process(reg_301, reg_310, ap_sig_cseq_ST_st57_fsm_56, tmp_43_reg_782, tmp_35_reg_802, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_269_p0 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            grp_fu_269_p0 <= reg_301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_269_p0 <= tmp_35_reg_802;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_269_p0 <= tmp_43_reg_782;
        else 
            grp_fu_269_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_269_p1 assign process. --
    grp_fu_269_p1_assign_proc : process(ap_sig_cseq_ST_st57_fsm_56, reg_319, reg_327, tmp_44_reg_787, tmp_36_reg_807, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_269_p1 <= reg_327;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            grp_fu_269_p1 <= reg_319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_269_p1 <= tmp_36_reg_807;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_269_p1 <= tmp_44_reg_787;
        else 
            grp_fu_269_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_273_ce <= ap_const_logic_1;

    -- grp_fu_273_opcode assign process. --
    grp_fu_273_opcode_assign_proc : process(ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57))) then 
            grp_fu_273_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            grp_fu_273_opcode <= ap_const_lv2_0;
        else 
            grp_fu_273_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_273_p0 assign process. --
    grp_fu_273_p0_assign_proc : process(reg_301, reg_310, ap_sig_cseq_ST_st57_fsm_56, tmp_45_reg_792, tmp_37_reg_812, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_273_p0 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            grp_fu_273_p0 <= reg_301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_273_p0 <= tmp_37_reg_812;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_273_p0 <= tmp_45_reg_792;
        else 
            grp_fu_273_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_273_p1 assign process. --
    grp_fu_273_p1_assign_proc : process(ap_sig_cseq_ST_st57_fsm_56, reg_319, reg_327, tmp_46_reg_797, tmp_38_reg_817, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_273_p1 <= reg_327;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
            grp_fu_273_p1 <= reg_319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_273_p1 <= tmp_38_reg_817;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_273_p1 <= tmp_46_reg_797;
        else 
            grp_fu_273_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_277_ce <= ap_const_logic_1;

    -- grp_fu_277_p0 assign process. --
    grp_fu_277_p0_assign_proc : process(wr_reg_704, ap_sig_cseq_ST_st44_fsm_43, d_1_reg_234, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_277_p0 <= d_1_reg_234;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_277_p0 <= wr_reg_704;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_277_p1 assign process. --
    grp_fu_277_p1_assign_proc : process(reg_301, ap_sig_cseq_ST_st44_fsm_43, d_1_reg_234, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_277_p1 <= reg_301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_277_p1 <= d_1_reg_234;
        else 
            grp_fu_277_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_282_ce <= ap_const_logic_1;

    -- grp_fu_282_p0 assign process. --
    grp_fu_282_p0_assign_proc : process(ap_sig_cseq_ST_st44_fsm_43, wik_phi_fu_261_p4, wik_reg_257, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_282_p0 <= wik_reg_257;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_282_p0 <= wik_phi_fu_261_p4;
        else 
            grp_fu_282_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_282_p1 assign process. --
    grp_fu_282_p1_assign_proc : process(reg_310, wi_1_reg_710, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_282_p1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_282_p1 <= wi_1_reg_710;
        else 
            grp_fu_282_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_287_ce <= ap_const_logic_1;

    -- grp_fu_287_p0 assign process. --
    grp_fu_287_p0_assign_proc : process(wr_reg_704, ap_sig_cseq_ST_st44_fsm_43, d_1_reg_234, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_287_p0 <= d_1_reg_234;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_287_p0 <= wr_reg_704;
        else 
            grp_fu_287_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_287_p1 assign process. --
    grp_fu_287_p1_assign_proc : process(reg_310, ap_sig_cseq_ST_st44_fsm_43, wik_reg_257, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_287_p1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_287_p1 <= wik_reg_257;
        else 
            grp_fu_287_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_292_ce <= ap_const_logic_1;

    -- grp_fu_292_p0 assign process. --
    grp_fu_292_p0_assign_proc : process(ap_sig_cseq_ST_st44_fsm_43, d_1_reg_234, wik_reg_257, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_292_p0 <= wik_reg_257;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_292_p0 <= d_1_reg_234;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_292_p1 assign process. --
    grp_fu_292_p1_assign_proc : process(reg_301, wi_1_reg_710, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st46_fsm_45)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            grp_fu_292_p1 <= reg_301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_292_p1 <= wi_1_reg_710;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_466_ap_start assign process. --
    grp_fu_466_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_22_fu_461_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_22_fu_461_p2))) then 
            grp_fu_466_ap_start <= ap_const_logic_1;
        else 
            grp_fu_466_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_466_ce <= ap_const_logic_1;
    grp_fu_466_p0 <= N;
    grp_fu_466_p1 <= n_1_reg_199;
    i0_fu_355_p3 <= (k_reg_157 & ap_const_lv1_0);
    i1_fu_379_p2 <= std_logic_vector(shift_left(unsigned(j_reg_168),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    icmp_fu_425_p2 <= "1" when (signed(tmp_11_fu_415_p4) > signed(ap_const_lv30_0)) else "0";
    j_2_cast_fu_521_p1 <= std_logic_vector(resize(unsigned(j_2_reg_211),32));
    j_4_fu_449_p2 <= std_logic_vector(unsigned(j_1_reg_180) - unsigned(n_fu_411_p1));
    j_5_fu_455_p2 <= std_logic_vector(unsigned(j_1_reg_180) + unsigned(n_fu_411_p1));
    j_6_fu_530_p2 <= std_logic_vector(unsigned(j_2_reg_211) + unsigned(ap_const_lv31_1));
    k_1_cast_fu_536_p1 <= std_logic_vector(resize(unsigned(k_1_reg_246),31));
    k_3_fu_343_p2 <= std_logic_vector(unsigned(k_reg_157) + unsigned(ap_const_lv31_1));
    k_4_fu_545_p2 <= std_logic_vector(unsigned(k_1_reg_246) + unsigned(ap_const_lv30_1));
    k_cast_fu_334_p1 <= std_logic_vector(resize(unsigned(k_reg_157),32));
    n_2_fu_507_p2 <= std_logic_vector(shift_left(unsigned(n_1_reg_199),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
        n_fu_411_p1 <= std_logic_vector(resize(signed(tmp_5_fu_401_p4),32));

    p_rec_fu_628_p2 <= std_logic_vector(signed(tmp_31_cast_reg_731) + signed(cp_0_rec_reg_222));
    rev6_fu_437_p2 <= (slt_fu_431_p2 xor ap_const_lv1_1);
    sinVec_address0 <= tmp_30_fu_477_p1(8 - 1 downto 0);

    -- sinVec_ce0 assign process. --
    sinVec_ce0_assign_proc : process(ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            sinVec_ce0 <= ap_const_logic_1;
        else 
            sinVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_431_p2 <= "1" when (signed(j_1_reg_180) < signed(n_fu_411_p1)) else "0";
    sum1_cast_fu_606_p1 <= std_logic_vector(resize(unsigned(sum1_fu_600_p2),64));
    sum1_fu_600_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_595_p2) + unsigned(tmp_13_fu_563_p1));
    sum2_cast_fu_623_p1 <= std_logic_vector(resize(unsigned(sum2_fu_617_p2),64));
    sum2_fu_617_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_611_p2) + unsigned(tmp_13_fu_563_p1));
    sum8_cast_fu_573_p1 <= std_logic_vector(resize(unsigned(sum8_fu_567_p2),64));
    sum8_fu_567_p2 <= std_logic_vector(unsigned(tmp_34_fu_555_p3) + unsigned(tmp_13_fu_563_p1));
    sum_cast_fu_590_p1 <= std_logic_vector(resize(unsigned(sum_fu_584_p2),64));
    sum_fu_584_p2 <= std_logic_vector(unsigned(tmp_39_cast_fu_578_p2) + unsigned(tmp_13_fu_563_p1));
    tmp_10_fu_517_p1 <= n_1_reg_199(11 - 1 downto 0);
    tmp_11_fu_415_p4 <= n_0_in_reg_190(31 downto 2);
    tmp_12_fu_551_p1 <= k_1_reg_246(10 - 1 downto 0);
    tmp_13_fu_563_p1 <= cp_0_rec_reg_222(11 - 1 downto 0);
    tmp_22_fu_461_p2 <= "1" when (signed(n_1_reg_199) > signed(N)) else "0";
        tmp_23_fu_363_p1 <= std_logic_vector(resize(signed(i0_fu_355_p3),64));

    tmp_24_fu_368_p2 <= (i0_fu_355_p3 or ap_const_lv32_1);
        tmp_25_fu_374_p1 <= std_logic_vector(resize(signed(tmp_24_fu_368_p2),64));

        tmp_26_fu_385_p1 <= std_logic_vector(resize(signed(i1_fu_379_p2),64));

    tmp_27_fu_390_p2 <= (i1_fu_379_p2 or ap_const_lv32_1);
        tmp_28_fu_396_p1 <= std_logic_vector(resize(signed(tmp_27_fu_390_p2),64));

    tmp_29_fu_471_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(n_1_reg_199));
        tmp_30_fu_477_p1 <= std_logic_vector(resize(signed(tmp_29_fu_471_p2),64));

        tmp_31_cast_fu_513_p1 <= std_logic_vector(resize(signed(n_2_fu_507_p2),63));

    tmp_31_fu_443_p2 <= (icmp_fu_425_p2 and rev6_fu_437_p2);
    tmp_32_fu_525_p2 <= "1" when (signed(j_2_cast_fu_521_p1) < signed(nb_reg_716)) else "0";
    tmp_33_fu_540_p2 <= "1" when (signed(k_1_cast_fu_536_p1) < signed(tmp_3_reg_721)) else "0";
    tmp_34_fu_555_p3 <= (tmp_12_fu_551_p1 & ap_const_lv1_0);
    tmp_39_cast_fu_578_p2 <= (tmp_34_fu_555_p3 or ap_const_lv11_1);
    tmp_40_cast_fu_595_p2 <= std_logic_vector(unsigned(tmp_34_fu_555_p3) + unsigned(tmp_10_reg_736));
    tmp_42_cast_fu_611_p2 <= (tmp_40_cast_fu_595_p2 or ap_const_lv11_1);
    tmp_5_fu_401_p4 <= n_0_in_reg_190(31 downto 1);
    tmp_fu_338_p2 <= "1" when (signed(k_cast_fu_334_p1) < signed(N)) else "0";
    tmp_s_fu_349_p2 <= "1" when (signed(k_cast_fu_334_p1) < signed(j_reg_168)) else "0";
    wi_1_fu_493_p1 <= wi_1_neg_fu_487_p2;
    wi_1_neg_fu_487_p2 <= (wi_1_to_int_fu_483_p1 xor ap_const_lv64_8000000000000000);
    wi_1_to_int_fu_483_p1 <= sinVec_q0;
    wik_phi_fu_261_p4 <= wik_reg_257;
end behav;
