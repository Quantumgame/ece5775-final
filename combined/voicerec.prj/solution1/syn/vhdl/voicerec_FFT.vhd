-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of voicerec_FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_63 : BOOLEAN;
    signal cosVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cosVec_ce0 : STD_LOGIC;
    signal cosVec_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sinVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinVec_ce0 : STD_LOGIC;
    signal sinVec_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal reg_348 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_fu_382_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_3_reg_718 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal tmp_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_727 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_1_reg_732 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_2_reg_737 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_3_reg_742 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_1_fu_444_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal j_2_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_203 : BOOLEAN;
    signal wr_reg_783 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal grp_fu_532_ap_done : STD_LOGIC;
    signal wi_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wi_1_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_800 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_3_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_3_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_580_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_811 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_5_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal k_4_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_4_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal c_addr_4_reg_839 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_5_reg_844 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_6_reg_849 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_7_reg_854 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_269 : BOOLEAN;
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_reg_864 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_reg_879 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_283 : BOOLEAN;
    signal tmp_35_reg_884 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_reg_889 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal wrk_reg_899 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_294 : BOOLEAN;
    signal wik_1_reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_addr_rec_fu_709_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_305 : BOOLEAN;
    signal k_reg_163 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_323 : BOOLEAN;
    signal j_1_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_rec_reg_241 : STD_LOGIC_VECTOR (38 downto 0);
    signal d_1_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_357 : BOOLEAN;
    signal wik_phi_fu_272_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal wik_reg_268 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_s_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum_cast_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum9_cast_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum1_cast_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum2_cast_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_399 : BOOLEAN;
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_408 : BOOLEAN;
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_422 : BOOLEAN;
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_445 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_452 : BOOLEAN;
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_463 : BOOLEAN;
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast3_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_462_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rev5_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_490_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_4_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_546 : BOOLEAN;
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wi_1_to_int_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wi_1_neg_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_3_cast2_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast1_fu_605_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i0_1_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_636_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_632_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_cast_fu_657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum9_fu_661_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_cast_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum1_fu_677_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_cast_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum2_fu_694_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_cast_fu_705_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_307_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_311_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_311_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal grp_fu_320_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal tmp_s_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_532_ap_start : STD_LOGIC;
    signal grp_fu_532_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component voicerec_dadddsub_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_sdiv_11ns_32ns_32_15_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_FFT_cosVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_FFT_sinVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    cosVec_U : component voicerec_FFT_cosVec
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosVec_address0,
        ce0 => cosVec_ce0,
        q0 => cosVec_q0);

    sinVec_U : component voicerec_FFT_sinVec
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinVec_address0,
        ce0 => sinVec_ce0,
        q0 => sinVec_q0);

    voicerec_dadddsub_64ns_64ns_64_5_full_dsp_U4 : component voicerec_dadddsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        opcode => grp_fu_307_opcode,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    voicerec_dadddsub_64ns_64ns_64_5_full_dsp_U5 : component voicerec_dadddsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        opcode => grp_fu_311_opcode,
        ce => grp_fu_311_ce,
        dout => grp_fu_311_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U6 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U7 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U8 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U9 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    voicerec_sdiv_11ns_32ns_32_15_seq_U10 : component voicerec_sdiv_11ns_32ns_32_15_seq
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_532_ap_start,
        done => grp_fu_532_ap_done,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        ce => grp_fu_532_ce,
        dout => grp_fu_532_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- cp_rec_reg_241 assign process. --
    cp_rec_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
                cp_rec_reg_241 <= cp_addr_rec_fu_709_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then 
                cp_rec_reg_241 <= ap_const_lv39_0;
            end if; 
        end if;
    end process;

    -- cp_s_reg_296 assign process. --
    cp_s_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond_fu_609_p2)))) then 
                                cp_s_reg_296(31 downto 2) <= n_3_reg_805(31 downto 2);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_588_p2) and (ap_const_lv1_0 = tmp_30_fu_600_p2))) then 
                cp_s_reg_296(2) <= '0';
                cp_s_reg_296(3) <= '0';
                cp_s_reg_296(4) <= '0';
                cp_s_reg_296(5) <= '0';
                cp_s_reg_296(6) <= '0';
                cp_s_reg_296(7) <= '0';
                cp_s_reg_296(8) <= '0';
                cp_s_reg_296(9) <= '0';
                cp_s_reg_296(10) <= '0';
                cp_s_reg_296(11) <= '0';
                cp_s_reg_296(12) <= '0';
                cp_s_reg_296(13) <= '0';
                cp_s_reg_296(14) <= '0';
                cp_s_reg_296(15) <= '0';
                cp_s_reg_296(16) <= '0';
                cp_s_reg_296(17) <= '0';
                cp_s_reg_296(18) <= '0';
                cp_s_reg_296(19) <= '0';
                cp_s_reg_296(20) <= '0';
                cp_s_reg_296(21) <= '0';
                cp_s_reg_296(22) <= '0';
                cp_s_reg_296(23) <= '0';
                cp_s_reg_296(24) <= '0';
                cp_s_reg_296(25) <= '0';
                cp_s_reg_296(26) <= '0';
                cp_s_reg_296(27) <= '0';
                cp_s_reg_296(28) <= '0';
                cp_s_reg_296(29) <= '0';
                cp_s_reg_296(30) <= '0';
                cp_s_reg_296(31) <= '0';
            end if; 
        end if;
    end process;

    -- d_1_reg_253 assign process. --
    d_1_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_609_p2) and (ap_const_lv1_0 = tmp_31_fu_621_p2))) then 
                d_1_reg_253 <= d_1_reg_253;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
                d_1_reg_253 <= wrk_reg_899;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_588_p2) and not((ap_const_lv1_0 = tmp_30_fu_600_p2)))) then 
                d_1_reg_253 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    -- j_1_reg_197 assign process. --
    j_1_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                j_1_reg_197 <= j_2_fu_504_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_1_reg_197 <= j_reg_174;
            end if; 
        end if;
    end process;

    -- j_3_reg_230 assign process. --
    j_3_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
                j_3_reg_230 <= j_5_reg_819;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then 
                j_3_reg_230 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- j_reg_174 assign process. --
    j_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_438_p2)))) then 
                j_reg_174 <= j_4_fu_520_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_174 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_283 assign process. --
    k_1_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_609_p2) and (ap_const_lv1_0 = tmp_31_fu_621_p2))) then 
                k_1_reg_283 <= k_4_fu_615_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
                k_1_reg_283 <= k_4_reg_830;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_588_p2) and not((ap_const_lv1_0 = tmp_30_fu_600_p2)))) then 
                k_1_reg_283 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- k_reg_163 assign process. --
    k_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_438_p2)))) then 
                k_reg_163 <= k_3_reg_718;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_163 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- n_2_reg_218 assign process. --
    n_2_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond1_fu_588_p2)))) then 
                                n_2_reg_218(31 downto 1) <= n_3_reg_805(31 downto 1);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_376_p2 = ap_const_lv1_0)))) then 
                n_2_reg_218(1) <= '1';
                n_2_reg_218(2) <= '0';
                n_2_reg_218(3) <= '0';
                n_2_reg_218(4) <= '0';
                n_2_reg_218(5) <= '0';
                n_2_reg_218(6) <= '0';
                n_2_reg_218(7) <= '0';
                n_2_reg_218(8) <= '0';
                n_2_reg_218(9) <= '0';
                n_2_reg_218(10) <= '0';
                n_2_reg_218(11) <= '0';
                n_2_reg_218(12) <= '0';
                n_2_reg_218(13) <= '0';
                n_2_reg_218(14) <= '0';
                n_2_reg_218(15) <= '0';
                n_2_reg_218(16) <= '0';
                n_2_reg_218(17) <= '0';
                n_2_reg_218(18) <= '0';
                n_2_reg_218(19) <= '0';
                n_2_reg_218(20) <= '0';
                n_2_reg_218(21) <= '0';
                n_2_reg_218(22) <= '0';
                n_2_reg_218(23) <= '0';
                n_2_reg_218(24) <= '0';
                n_2_reg_218(25) <= '0';
                n_2_reg_218(26) <= '0';
                n_2_reg_218(27) <= '0';
                n_2_reg_218(28) <= '0';
                n_2_reg_218(29) <= '0';
                n_2_reg_218(30) <= '0';
                n_2_reg_218(31) <= '0';
            end if; 
        end if;
    end process;

    -- n_reg_207 assign process. --
    n_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                n_reg_207 <= n_1_fu_512_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                n_reg_207 <= ap_const_lv32_80;
            end if; 
        end if;
    end process;

    -- q_reg_186 assign process. --
    q_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_438_p2))) then 
                q_reg_186 <= q_1_fu_444_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                q_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- wik_reg_268 assign process. --
    wik_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_609_p2) and (ap_const_lv1_0 = tmp_31_fu_621_p2))) then 
                wik_reg_268 <= wik_reg_268;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
                wik_reg_268 <= wik_1_reg_904;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond1_fu_588_p2) and not((ap_const_lv1_0 = tmp_30_fu_600_p2)))) then 
                wik_reg_268 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_376_p2 = ap_const_lv1_0) and not((tmp_fu_388_p2 = ap_const_lv1_0)))) then
                    c_addr_1_reg_732(8 downto 1) <= tmp_26_fu_411_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_reg_727(8 downto 1) <= tmp_24_fu_400_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    c_addr_2_reg_737(8 downto 1) <= tmp_27_fu_422_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_3_reg_742(8 downto 1) <= tmp_29_fu_433_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond_fu_609_p2) and not((ap_const_lv1_0 = tmp_31_fu_621_p2)))) then
                c_addr_4_reg_839 <= cp_sum_cast_fu_646_p1(9 - 1 downto 0);
                c_addr_5_reg_844 <= cp_sum9_cast_fu_667_p1(9 - 1 downto 0);
                c_addr_6_reg_849 <= cp_sum1_cast_fu_683_p1(9 - 1 downto 0);
                c_addr_7_reg_854 <= cp_sum2_cast_fu_700_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                j_5_reg_819 <= j_5_fu_594_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                k_3_reg_718 <= k_3_fu_382_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                k_4_reg_830 <= k_4_fu_615_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_logic_0 = grp_fu_532_ap_done)))) then
                    n_3_reg_805(31 downto 2) <= n_3_fu_574_p2(31 downto 2);
                nb_reg_795 <= grp_fu_532_p2;
                tmp_3_reg_800 <= n_2_reg_218(31 downto 1);
                    tmp_8_reg_811(10 downto 1) <= tmp_8_fu_580_p1(10 downto 1);
                wi_1_reg_789 <= wi_1_fu_560_p1;
                wr_reg_783 <= cosVec_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34))) then
                reg_339 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then
                reg_348 <= c_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then
                reg_357 <= grp_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then
                reg_365 <= grp_fu_311_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                tmp_34_reg_879 <= grp_fu_315_p2;
                tmp_35_reg_884 <= grp_fu_320_p2;
                tmp_36_reg_889 <= grp_fu_325_p2;
                tmp_37_reg_894 <= grp_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                tmp_40_reg_909 <= grp_fu_311_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                tmp_42_reg_859 <= grp_fu_315_p2;
                tmp_43_reg_864 <= grp_fu_320_p2;
                tmp_44_reg_869 <= grp_fu_325_p2;
                tmp_45_reg_874 <= grp_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_376_p2 = ap_const_lv1_0))) then
                tmp_reg_723 <= tmp_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                wik_1_reg_904 <= grp_fu_311_p2;
                wrk_reg_899 <= grp_fu_307_p2;
            end if;
        end if;
    end process;
    c_addr_reg_727(0) <= '0';
    c_addr_1_reg_732(0) <= '1';
    c_addr_2_reg_737(0) <= '0';
    c_addr_3_reg_742(0) <= '1';
    n_3_reg_805(1 downto 0) <= "00";
    tmp_8_reg_811(0) <= '0';
    n_2_reg_218(0) <= '0';
    cp_s_reg_296(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_388_p2, exitcond3_fu_376_p2, exitcond2_fu_438_p2, grp_fu_532_ap_done, exitcond_fu_609_p2, tmp_31_fu_621_p2, exitcond1_fu_588_p2, tmp_30_fu_600_p2, tmp_s_fu_526_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((exitcond3_fu_376_p2 = ap_const_lv1_0) and (tmp_fu_388_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif (((exitcond3_fu_376_p2 = ap_const_lv1_0) and not((tmp_fu_388_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_438_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_s_fu_526_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_logic_0 = grp_fu_532_ap_done))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (((ap_const_lv1_0 = exitcond1_fu_588_p2) and (ap_const_lv1_0 = tmp_30_fu_600_p2))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                elsif (((ap_const_lv1_0 = exitcond1_fu_588_p2) and not((ap_const_lv1_0 = tmp_30_fu_600_p2)))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st23_fsm_22 => 
                if (((ap_const_lv1_0 = exitcond_fu_609_p2) and not((ap_const_lv1_0 = tmp_31_fu_621_p2)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                elsif (((ap_const_lv1_0 = exitcond_fu_609_p2) and (ap_const_lv1_0 = tmp_31_fu_621_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_526_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_s_fu_526_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_203 assign process. --
    ap_sig_bdd_203_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_203 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_269 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_283 assign process. --
    ap_sig_bdd_283_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_283 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_294 assign process. --
    ap_sig_bdd_294_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_294 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_305 assign process. --
    ap_sig_bdd_305_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_305 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_323 assign process. --
    ap_sig_bdd_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_323 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_357 assign process. --
    ap_sig_bdd_357_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_357 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_399 assign process. --
    ap_sig_bdd_399_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_399 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_408 assign process. --
    ap_sig_bdd_408_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_408 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_422 assign process. --
    ap_sig_bdd_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_422 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_445 assign process. --
    ap_sig_bdd_445_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_445 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_452 assign process. --
    ap_sig_bdd_452_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_452 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_463 assign process. --
    ap_sig_bdd_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_463 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_546 assign process. --
    ap_sig_bdd_546_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_546 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_63 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_203)
    begin
        if (ap_sig_bdd_203) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_463)
    begin
        if (ap_sig_bdd_463) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_269)
    begin
        if (ap_sig_bdd_269) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_283)
    begin
        if (ap_sig_bdd_283) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_445)
    begin
        if (ap_sig_bdd_445) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_294)
    begin
        if (ap_sig_bdd_294) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_399)
    begin
        if (ap_sig_bdd_399) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_452)
    begin
        if (ap_sig_bdd_452) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_422)
    begin
        if (ap_sig_bdd_422) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_408)
    begin
        if (ap_sig_bdd_408) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_357)
    begin
        if (ap_sig_bdd_357) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_305)
    begin
        if (ap_sig_bdd_305) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_323)
    begin
        if (ap_sig_bdd_323) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_546)
    begin
        if (ap_sig_bdd_546) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st2_fsm_1, c_addr_reg_727, c_addr_2_reg_737, ap_sig_cseq_ST_st23_fsm_22, c_addr_4_reg_839, c_addr_6_reg_849, ap_sig_cseq_ST_st5_fsm_4, tmp_24_fu_400_p1, tmp_27_fu_422_p1, cp_sum1_cast_fu_683_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            c_address0 <= c_addr_6_reg_849;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= c_addr_2_reg_737;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= c_addr_reg_727;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            c_address0 <= c_addr_4_reg_839;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address0 <= cp_sum1_cast_fu_683_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_27_fu_422_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address0 <= tmp_24_fu_400_p1(9 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st2_fsm_1, c_addr_1_reg_732, c_addr_3_reg_742, ap_sig_cseq_ST_st23_fsm_22, c_addr_5_reg_844, c_addr_7_reg_854, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st44_fsm_43, tmp_26_fu_411_p1, tmp_29_fu_433_p1, cp_sum2_cast_fu_700_p1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st42_fsm_41)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            c_address1 <= c_addr_7_reg_854;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= c_addr_3_reg_742;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= c_addr_1_reg_732;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41))) then 
            c_address1 <= c_addr_5_reg_844;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            c_address1 <= cp_sum2_cast_fu_700_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_29_fu_433_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address1 <= tmp_26_fu_411_p1(9 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st42_fsm_41)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(c_q0, reg_339, reg_357, ap_sig_cseq_ST_st41_fsm_40, tmp_40_reg_909, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            c_d0 <= tmp_40_reg_909;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            c_d0 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= c_q0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(c_q1, reg_348, reg_357, reg_365, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st42_fsm_41)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            c_d1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            c_d1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_d1 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= c_q1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(ap_sig_cseq_ST_st41_fsm_40, tmp_reg_723, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_723 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(tmp_reg_723, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st42_fsm_41)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((tmp_reg_723 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cosVec_address0 <= tmp_23_fu_544_p1(8 - 1 downto 0);

    -- cosVec_ce0 assign process. --
    cosVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            cosVec_ce0 <= ap_const_logic_1;
        else 
            cosVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cp_addr_rec_fu_709_p2 <= std_logic_vector(signed(cp_cast_fu_705_p1) + signed(cp_rec_reg_241));
        cp_cast_fu_705_p1 <= std_logic_vector(resize(signed(cp_s_reg_296),39));

    cp_sum1_cast_fu_683_p1 <= std_logic_vector(resize(unsigned(cp_sum1_fu_677_p2),64));
    cp_sum1_fu_677_p2 <= std_logic_vector(unsigned(tmp_13_fu_636_p1) + unsigned(tmp_38_cast_fu_672_p2));
    cp_sum2_cast_fu_700_p1 <= std_logic_vector(resize(unsigned(cp_sum2_fu_694_p2),64));
    cp_sum2_fu_694_p2 <= std_logic_vector(unsigned(tmp_13_fu_636_p1) + unsigned(tmp_40_cast_fu_688_p2));
    cp_sum9_cast_fu_667_p1 <= std_logic_vector(resize(unsigned(cp_sum9_fu_661_p2),64));
    cp_sum9_fu_661_p2 <= std_logic_vector(unsigned(tmp_13_fu_636_p1) + unsigned(tmp_37_cast_fu_657_p1));
    cp_sum_cast_fu_646_p1 <= std_logic_vector(resize(unsigned(cp_sum_fu_640_p2),64));
    cp_sum_fu_640_p2 <= std_logic_vector(unsigned(tmp_13_fu_636_p1) + unsigned(tmp_32_fu_632_p1));
    exitcond1_fu_588_p2 <= "1" when (j_3_reg_230 = ap_const_lv8_80) else "0";
    exitcond2_fu_438_p2 <= "1" when (q_reg_186 = ap_const_lv3_7) else "0";
    exitcond3_fu_376_p2 <= "1" when (k_reg_163 = ap_const_lv9_100) else "0";
    exitcond_fu_609_p2 <= "1" when (k_1_reg_283 = ap_const_lv8_80) else "0";
    grp_fu_307_ce <= ap_const_logic_1;

    -- grp_fu_307_opcode assign process. --
    grp_fu_307_opcode_assign_proc : process(ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            grp_fu_307_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_307_opcode <= ap_const_lv2_0;
        else 
            grp_fu_307_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_307_p0 assign process. --
    grp_fu_307_p0_assign_proc : process(reg_339, reg_348, ap_sig_cseq_ST_st36_fsm_35, tmp_42_reg_859, tmp_34_reg_879, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_307_p0 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            grp_fu_307_p0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_307_p0 <= tmp_34_reg_879;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_307_p0 <= tmp_42_reg_859;
        else 
            grp_fu_307_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_307_p1 assign process. --
    grp_fu_307_p1_assign_proc : process(ap_sig_cseq_ST_st36_fsm_35, reg_357, reg_365, tmp_43_reg_864, tmp_35_reg_884, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_307_p1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            grp_fu_307_p1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_307_p1 <= tmp_35_reg_884;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_307_p1 <= tmp_43_reg_864;
        else 
            grp_fu_307_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_311_ce <= ap_const_logic_1;

    -- grp_fu_311_opcode assign process. --
    grp_fu_311_opcode_assign_proc : process(ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_311_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            grp_fu_311_opcode <= ap_const_lv2_0;
        else 
            grp_fu_311_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_311_p0 assign process. --
    grp_fu_311_p0_assign_proc : process(reg_339, reg_348, ap_sig_cseq_ST_st36_fsm_35, tmp_44_reg_869, tmp_36_reg_889, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_311_p0 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            grp_fu_311_p0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_311_p0 <= tmp_36_reg_889;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_311_p0 <= tmp_44_reg_869;
        else 
            grp_fu_311_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_311_p1 assign process. --
    grp_fu_311_p1_assign_proc : process(ap_sig_cseq_ST_st36_fsm_35, reg_357, reg_365, tmp_45_reg_874, tmp_37_reg_894, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_311_p1 <= reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            grp_fu_311_p1 <= reg_357;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_311_p1 <= tmp_37_reg_894;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_311_p1 <= tmp_45_reg_874;
        else 
            grp_fu_311_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_315_ce <= ap_const_logic_1;

    -- grp_fu_315_p0 assign process. --
    grp_fu_315_p0_assign_proc : process(wr_reg_783, ap_sig_cseq_ST_st23_fsm_22, d_1_reg_253, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_315_p0 <= d_1_reg_253;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_315_p0 <= wr_reg_783;
        else 
            grp_fu_315_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_315_p1 assign process. --
    grp_fu_315_p1_assign_proc : process(reg_339, ap_sig_cseq_ST_st23_fsm_22, d_1_reg_253, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_315_p1 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_315_p1 <= d_1_reg_253;
        else 
            grp_fu_315_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_320_ce <= ap_const_logic_1;

    -- grp_fu_320_p0 assign process. --
    grp_fu_320_p0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22, wik_phi_fu_272_p6, wik_reg_268, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_320_p0 <= wik_reg_268;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_320_p0 <= wik_phi_fu_272_p6;
        else 
            grp_fu_320_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_320_p1 assign process. --
    grp_fu_320_p1_assign_proc : process(reg_348, wi_1_reg_789, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_320_p1 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_320_p1 <= wi_1_reg_789;
        else 
            grp_fu_320_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_325_ce <= ap_const_logic_1;

    -- grp_fu_325_p0 assign process. --
    grp_fu_325_p0_assign_proc : process(wr_reg_783, ap_sig_cseq_ST_st23_fsm_22, d_1_reg_253, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_325_p0 <= d_1_reg_253;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_325_p0 <= wr_reg_783;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_325_p1 assign process. --
    grp_fu_325_p1_assign_proc : process(reg_348, ap_sig_cseq_ST_st23_fsm_22, wik_reg_268, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_325_p1 <= reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_325_p1 <= wik_reg_268;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_330_ce <= ap_const_logic_1;

    -- grp_fu_330_p0 assign process. --
    grp_fu_330_p0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22, d_1_reg_253, wik_reg_268, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_330_p0 <= wik_reg_268;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_330_p0 <= d_1_reg_253;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_330_p1 assign process. --
    grp_fu_330_p1_assign_proc : process(reg_339, wi_1_reg_789, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_330_p1 <= reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            grp_fu_330_p1 <= wi_1_reg_789;
        else 
            grp_fu_330_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_532_ap_start assign process. --
    grp_fu_532_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_526_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_s_fu_526_p2)))) then 
            grp_fu_532_ap_start <= ap_const_logic_1;
        else 
            grp_fu_532_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_532_ce <= ap_const_logic_1;
    grp_fu_532_p0 <= ap_const_lv32_100(11 - 1 downto 0);
    grp_fu_532_p1 <= n_2_reg_218;
    i0_1_fu_626_p2 <= std_logic_vector(shift_left(unsigned(k_1_reg_283),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    i0_fu_394_p2 <= std_logic_vector(shift_left(unsigned(k_reg_163),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    i1_fu_416_p2 <= std_logic_vector(shift_left(unsigned(j_reg_174),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    icmp_fu_472_p2 <= "1" when (signed(tmp_11_fu_462_p4) > signed(ap_const_lv31_0)) else "0";
    j_2_fu_504_p3 <= 
        j_6_fu_484_p2 when (or_cond_fu_478_p2(0) = '1') else 
        j_1_reg_197;
    j_3_cast2_fu_584_p1 <= std_logic_vector(resize(unsigned(j_3_reg_230),32));
    j_4_fu_520_p2 <= std_logic_vector(unsigned(j_1_reg_197) + unsigned(n_reg_207));
    j_5_fu_594_p2 <= std_logic_vector(unsigned(j_3_reg_230) + unsigned(ap_const_lv8_1));
    j_6_fu_484_p2 <= std_logic_vector(unsigned(j_1_reg_197) - unsigned(n_reg_207));
    k_1_cast1_fu_605_p1 <= std_logic_vector(resize(unsigned(k_1_reg_283),31));
    k_3_fu_382_p2 <= std_logic_vector(unsigned(k_reg_163) + unsigned(ap_const_lv9_1));
    k_4_fu_615_p2 <= std_logic_vector(unsigned(k_1_reg_283) + unsigned(ap_const_lv8_1));
    k_cast3_fu_372_p1 <= std_logic_vector(resize(unsigned(k_reg_163),32));
    n_1_fu_512_p3 <= 
        n_4_fu_500_p1 when (or_cond_fu_478_p2(0) = '1') else 
        n_reg_207;
    n_3_fu_574_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_218),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    n_4_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_490_p4),32));
    or_cond_fu_478_p2 <= (rev5_fu_456_p2 and icmp_fu_472_p2);
    q_1_fu_444_p2 <= std_logic_vector(unsigned(q_reg_186) + unsigned(ap_const_lv3_1));
    rev5_fu_456_p2 <= (slt_fu_450_p2 xor ap_const_lv1_1);
    sinVec_address0 <= tmp_23_fu_544_p1(8 - 1 downto 0);

    -- sinVec_ce0 assign process. --
    sinVec_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            sinVec_ce0 <= ap_const_logic_1;
        else 
            sinVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_450_p2 <= "1" when (signed(j_1_reg_197) < signed(n_reg_207)) else "0";
    tmp_11_fu_462_p4 <= n_reg_207(31 downto 1);
    tmp_13_fu_636_p1 <= cp_rec_reg_241(11 - 1 downto 0);
    tmp_22_fu_538_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(n_2_reg_218));
        tmp_23_fu_544_p1 <= std_logic_vector(resize(signed(tmp_22_fu_538_p2),64));

    tmp_24_fu_400_p1 <= std_logic_vector(resize(unsigned(i0_fu_394_p2),64));
    tmp_25_fu_405_p2 <= (i0_fu_394_p2 or ap_const_lv9_1);
    tmp_26_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_405_p2),64));
        tmp_27_fu_422_p1 <= std_logic_vector(resize(signed(i1_fu_416_p2),64));

    tmp_28_fu_427_p2 <= (i1_fu_416_p2 or ap_const_lv32_1);
        tmp_29_fu_433_p1 <= std_logic_vector(resize(signed(tmp_28_fu_427_p2),64));

    tmp_30_fu_600_p2 <= "1" when (signed(j_3_cast2_fu_584_p1) < signed(nb_reg_795)) else "0";
    tmp_31_fu_621_p2 <= "1" when (signed(k_1_cast1_fu_605_p1) < signed(tmp_3_reg_800)) else "0";
    tmp_32_fu_632_p1 <= std_logic_vector(resize(unsigned(i0_1_fu_626_p2),11));
    tmp_33_fu_651_p2 <= (i0_1_fu_626_p2 or ap_const_lv8_1);
    tmp_37_cast_fu_657_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_651_p2),11));
    tmp_38_cast_fu_672_p2 <= std_logic_vector(unsigned(tmp_8_reg_811) + unsigned(tmp_32_fu_632_p1));
    tmp_40_cast_fu_688_p2 <= (tmp_38_cast_fu_672_p2 or ap_const_lv11_1);
    tmp_5_fu_490_p4 <= n_reg_207(31 downto 1);
    tmp_8_fu_580_p1 <= n_2_reg_218(11 - 1 downto 0);
    tmp_fu_388_p2 <= "1" when (signed(k_cast3_fu_372_p1) < signed(j_reg_174)) else "0";
    tmp_s_fu_526_p2 <= "1" when (signed(n_2_reg_218) < signed(ap_const_lv32_101)) else "0";
    wi_1_fu_560_p1 <= wi_1_neg_fu_554_p2;
    wi_1_neg_fu_554_p2 <= (wi_1_to_int_fu_550_p1 xor ap_const_lv64_8000000000000000);
    wi_1_to_int_fu_550_p1 <= sinVec_q0;
    wik_phi_fu_272_p6 <= wik_reg_268;
end behav;
