-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity voicerec_feedForward_weightHO_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of voicerec_feedForward_weightHO_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011101111101010100100100", 
    1 => "10111110000000001010001101010001", 
    2 => "10111110001010100011111000111010", 
    3 => "10111110100101000001010001100010", 
    4 => "10111111000010111001101010101110", 
    5 => "00111110111010110000001000001100", 
    6 => "10111111000110011100101111101111", 
    7 => "00111110100111100100101101100110", 
    8 => "00111110101011111010110011000101", 
    9 => "10111111000000011001001110100011", 
    10 => "10111110110101001010000100100111", 
    11 => "00111110110010111101011100001010", 
    12 => "00111110001100100110100010010000", 
    13 => "10111110100010101100100011100111", 
    14 => "10111111000010010001111010101000", 
    15 => "00111110001100001010110000111011", 
    16 => "00111110000010110010011011000000", 
    17 => "00111110100110111001011001001010", 
    18 => "10111111000101111010011110011000", 
    19 => "10111110000111110001111111011110", 
    20 => "00111110001000001011110111001011", 
    21 => "00111101110101101100111110000101", 
    22 => "10111101011100100101000010110101", 
    23 => "10111101100100001010101011011110", 
    24 => "00111110010001100000111001010010", 
    25 => "10111100110100000011011000001110", 
    26 => "00111101000011110000001100111110", 
    27 => "10111111001011010011011100101010", 
    28 => "00111110111010000000000000000000", 
    29 => "10111110111011111100011010010111", 
    30 => "10111110011100111101010110111011", 
    31 => "00111101010100010011011010111111", 
    32 => "00111110100010100000110110011001", 
    33 => "10111111001001001011111110010000", 
    34 => "00111110110001110011000010000011", 
    35 => "10111101111100111111001010010001", 
    36 => "10111110100010101010000000100011", 
    37 => "00111110101110110111011100011000", 
    38 => "00111110100100101000110101100101", 
    39 => "10111110111010011101010001010010", 
    40 => "10111101011100010101111100000011", 
    41 => "10111101111001001000100011000110", 
    42 => "10111101111110111101100101000101", 
    43 => "10111110100011000110000100001111", 
    44 => "10111111000000100001100100110011", 
    45 => "10111110101100110010010100101101", 
    46 => "00111110101100000110100110000011", 
    47 => "00111110001000000001111101110101", 
    48 => "00111110000100100011001000001001", 
    49 => "10111110000111100010010101000010", 
    50 => "10111101010010100110111000110011", 
    51 => "10111101111111110001111010001110", 
    52 => "10111110010111100111010111111111", 
    53 => "10111101110110001101011000001010", 
    54 => "10111101111101010011011000001101", 
    55 => "10111110110010111011011100110001", 
    56 => "10111110100101010000111110000100", 
    57 => "00111101100110011101011100110100", 
    58 => "10111110000111011010010101010101", 
    59 => "10111101110011001011001101010010", 
    60 => "00111110111010110000100111101010", 
    61 => "10111110101001010110101101000100", 
    62 => "10111110101101000011001011101100", 
    63 => "00111110011011011101100011111001", 
    64 => "10111101111100011101000001000010", 
    65 => "10111110010011011101011011100000", 
    66 => "00111110001011111111111011110100", 
    67 => "00111110101000011001100110011010", 
    68 => "00111110011101100011001011000010", 
    69 => "00111110110100111111000010111011", 
    70 => "10111110111111000110110100011110", 
    71 => "10111110111010000011111001100100", 
    72 => "10111110100101100101110000101101", 
    73 => "00111110011000010111110110101111", 
    74 => "10111110011011011001111111010011", 
    75 => "00111110001001000000000110000010", 
    76 => "10111100000100010111101111001001", 
    77 => "10111101001101011101110111010011", 
    78 => "00111110011000001001011111001000", 
    79 => "10111111000010111011101100011111", 
    80 => "10111101011001001000001011001100", 
    81 => "10111110011101010111101101000010", 
    82 => "10111110001010100101110100101001", 
    83 => "00111110111100011111110001101110", 
    84 => "10111101001100011111011010001000", 
    85 => "00111110000101011001111101101111", 
    86 => "00111110000100100111100010001110", 
    87 => "00111110001001010111010101111101", 
    88 => "00111110000001101010010101010001", 
    89 => "00111110000110111111100011111101", 
    90 => "00111110001000000100110010001100", 
    91 => "10111110000000001011010101100111", 
    92 => "10111111000100101001000111001001", 
    93 => "10111111000101110010101001011010", 
    94 => "00111110110100000111111100100100", 
    95 => "00111110100111100110011101110011", 
    96 => "10111111001100100011110110000001", 
    97 => "00111110000000010100010110010101", 
    98 => "00111110010111101010100011011010", 
    99 => "00111110010100101010001000111100", 
    100 => "00111101111010100101000101011101", 
    101 => "00111110000110101111110110010111", 
    102 => "00111101001100100110110101110000", 
    103 => "00111101101010100100101111101001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity voicerec_feedForward_weightHO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of voicerec_feedForward_weightHO is
    component voicerec_feedForward_weightHO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    voicerec_feedForward_weightHO_rom_U :  component voicerec_feedForward_weightHO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


