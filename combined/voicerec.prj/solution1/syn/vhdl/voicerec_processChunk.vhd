-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_processChunk is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sp : IN STD_LOGIC_VECTOR (12 downto 0);
    ret_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ret_ce0 : OUT STD_LOGIC;
    ret_we0 : OUT STD_LOGIC;
    ret_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmp : IN STD_LOGIC_VECTOR (5 downto 0);
    inputSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    inputSound_ce0 : OUT STD_LOGIC;
    inputSound_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of voicerec_processChunk is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (104 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (104 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (104 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (104 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (104 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (104 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (104 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (104 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (104 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (104 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (104 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (104 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3EB444F9 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101101000100010011111001";
    constant ap_const_lv32_C2F87377 : STD_LOGIC_VECTOR (31 downto 0) := "11000010111110000111001101110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_34000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110100000000000000000000000000";
    constant ap_const_lv32_3FBFBF75 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101111111011111101110101";
    constant ap_const_lv32_3F317218 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001100010111001000011000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_3FDCE9A3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110111001110100110100011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv64_3F70000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FD1C01AA03BE89E : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010001110000000001101010100000001110111110100010011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_3FE6A09E667F3BD1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110101000001001111001100110011111110011101111010001";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal c_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_ce1 : STD_LOGIC;
    signal c_we1 : STD_LOGIC;
    signal c_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_ce0 : STD_LOGIC;
    signal d_we0 : STD_LOGIC;
    signal d_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal e_ce0 : STD_LOGIC;
    signal e_we0 : STD_LOGIC;
    signal e_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mell_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mell_ce0 : STD_LOGIC;
    signal mell_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dctMatrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal dctMatrix_ce0 : STD_LOGIC;
    signal dctMatrix_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_199 : BOOLEAN;
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal ap_sig_cseq_ST_st88_fsm_87 : STD_LOGIC;
    signal ap_sig_bdd_214 : BOOLEAN;
    signal ap_sig_cseq_ST_st94_fsm_93 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal ap_sig_cseq_ST_st104_fsm_103 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_240 : BOOLEAN;
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal ap_sig_cseq_ST_st99_fsm_98 : STD_LOGIC;
    signal ap_sig_bdd_255 : BOOLEAN;
    signal reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_264 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal ap_sig_cseq_ST_st82_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_298 : BOOLEAN;
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_305 : BOOLEAN;
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_315 : BOOLEAN;
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_322 : BOOLEAN;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_330 : BOOLEAN;
    signal reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_339 : BOOLEAN;
    signal i_5_fu_538_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_929 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_356 : BOOLEAN;
    signal exitcond4_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_582_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_942 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_371 : BOOLEAN;
    signal exitcond3_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_386 : BOOLEAN;
    signal c_load_2_reg_963 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_reg_969 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal i_3_cast_fu_632_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_cast_reg_982 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_407 : BOOLEAN;
    signal i_9_fu_642_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_991 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mell_load_cast_cast_fu_657_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_cast_cast_reg_1006 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_425 : BOOLEAN;
    signal tmp_76_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_441 : BOOLEAN;
    signal tmp_84_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_455 : BOOLEAN;
    signal e_addr_2_reg_1038 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_reg_1043 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_469 : BOOLEAN;
    signal grp_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mellIdx_1_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_478 : BOOLEAN;
    signal p_mellIdx_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_489 : BOOLEAN;
    signal i_8_fu_723_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_498 : BOOLEAN;
    signal e_addr_1_reg_1071 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_cast_fu_762_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr_cast_reg_1076 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_46_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_516 : BOOLEAN;
    signal x_assign_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_525 : BOOLEAN;
    signal tmp_47_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_537 : BOOLEAN;
    signal tmp_2_i_i_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_548 : BOOLEAN;
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_557 : BOOLEAN;
    signal tmp_81_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_566 : BOOLEAN;
    signal next_mul_fu_836_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_1120 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st80_fsm_79 : STD_LOGIC;
    signal ap_sig_bdd_575 : BOOLEAN;
    signal k_fu_848_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_1128 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_fu_860_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_reg_1133 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_i_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_trn2_cast_fu_868_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_i_trn2_cast_reg_1138 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_fu_878_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_1146 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_593 : BOOLEAN;
    signal exitcond_i_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dctMatrix_addr4_fu_893_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dctMatrix_addr4_reg_1156 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr1_fu_899_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_reg_1161 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st87_fsm_86 : STD_LOGIC;
    signal ap_sig_bdd_613 : BOOLEAN;
    signal dctMatrix_load_reg_1171 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_FFT_fu_417_ap_start : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_ap_done : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_ap_idle : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_ap_ready : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_c_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_voicerec_FFT_fu_417_c_ce0 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_c_we0 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_c_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_FFT_fu_417_c_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_FFT_fu_417_c_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_voicerec_FFT_fu_417_c_ce1 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_c_we1 : STD_LOGIC;
    signal grp_voicerec_FFT_fu_417_c_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_voicerec_FFT_fu_417_c_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_289 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_640 : BOOLEAN;
    signal i_1_reg_301 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_649 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_659 : BOOLEAN;
    signal i_2_reg_313 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_324 : STD_LOGIC_VECTOR (8 downto 0);
    signal mellIdx_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_348 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st79_fsm_78 : STD_LOGIC;
    signal ap_sig_bdd_682 : BOOLEAN;
    signal storemerge_reg_359 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_i_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st105_fsm_104 : STD_LOGIC;
    signal ap_sig_bdd_698 : BOOLEAN;
    signal phi_mul_reg_382 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_reg_394 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_i_reg_406 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_voicerec_FFT_fu_417_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_i_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_782 : BOOLEAN;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_789 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_796 : BOOLEAN;
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_809 : BOOLEAN;
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_816 : BOOLEAN;
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_823 : BOOLEAN;
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_fu_448_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_838 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_845 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_852 : BOOLEAN;
    signal ap_sig_cseq_ST_st95_fsm_94 : STD_LOGIC;
    signal ap_sig_bdd_860 : BOOLEAN;
    signal grp_fu_459_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_871 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_878 : BOOLEAN;
    signal ap_sig_cseq_ST_st83_fsm_82 : STD_LOGIC;
    signal ap_sig_bdd_885 : BOOLEAN;
    signal ap_sig_cseq_ST_st89_fsm_88 : STD_LOGIC;
    signal ap_sig_bdd_892 : BOOLEAN;
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_470_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast7_fu_528_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_544_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_554_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_fu_565_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_34_fu_588_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_68_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_cast_fu_653_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mell_load_1_cast_cast_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mell_load_2_cast_fu_701_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_88_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_734_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_745_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_741_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_752_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal e_load_1_to_int_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_770_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_780_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_810_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mx_i_i_fu_814_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mx_i_i_cast_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_trn_cast_fu_889_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr1_cast_fu_907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_427_ce : STD_LOGIC;
    signal grp_fu_433_ce : STD_LOGIC;
    signal grp_fu_440_ce : STD_LOGIC;
    signal grp_fu_445_ce : STD_LOGIC;
    signal grp_fu_454_ce : STD_LOGIC;
    signal grp_fu_459_ce : STD_LOGIC;
    signal grp_fu_463_ce : STD_LOGIC;
    signal tmp_46_fu_470_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (104 downto 0);

    component voicerec_FFT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        c_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        c_ce1 : OUT STD_LOGIC;
        c_we1 : OUT STD_LOGIC;
        c_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        c_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_sitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_dcmp_64ns_64ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component voicerec_processChunk_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_processChunk_d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_processChunk_e IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component voicerec_processChunk_mell IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component voicerec_processChunk_dctMatrix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    c_U : component voicerec_processChunk_c
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0,
        address1 => c_address1,
        ce1 => c_ce1,
        we1 => c_we1,
        d1 => c_d1,
        q1 => c_q1);

    d_U : component voicerec_processChunk_d
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_address0,
        ce0 => d_ce0,
        we0 => d_we0,
        d0 => d_d0,
        q0 => d_q0);

    e_U : component voicerec_processChunk_e
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_address0,
        ce0 => e_ce0,
        we0 => e_we0,
        d0 => e_d0,
        q0 => e_q0);

    mell_U : component voicerec_processChunk_mell
    generic map (
        DataWidth => 8,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mell_address0,
        ce0 => mell_ce0,
        q0 => mell_q0);

    dctMatrix_U : component voicerec_processChunk_dctMatrix
    generic map (
        DataWidth => 64,
        AddressRange => 676,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dctMatrix_address0,
        ce0 => dctMatrix_ce0,
        q0 => dctMatrix_q0);

    grp_voicerec_FFT_fu_417 : component voicerec_FFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_voicerec_FFT_fu_417_ap_start,
        ap_done => grp_voicerec_FFT_fu_417_ap_done,
        ap_idle => grp_voicerec_FFT_fu_417_ap_idle,
        ap_ready => grp_voicerec_FFT_fu_417_ap_ready,
        c_address0 => grp_voicerec_FFT_fu_417_c_address0,
        c_ce0 => grp_voicerec_FFT_fu_417_c_ce0,
        c_we0 => grp_voicerec_FFT_fu_417_c_we0,
        c_d0 => grp_voicerec_FFT_fu_417_c_d0,
        c_q0 => grp_voicerec_FFT_fu_417_c_q0,
        c_address1 => grp_voicerec_FFT_fu_417_c_address1,
        c_ce1 => grp_voicerec_FFT_fu_417_c_ce1,
        c_we1 => grp_voicerec_FFT_fu_417_c_we1,
        c_d1 => grp_voicerec_FFT_fu_417_c_d1,
        c_q1 => grp_voicerec_FFT_fu_417_c_q1);

    voicerec_faddfsub_32ns_32ns_32_5_full_dsp_U14 : component voicerec_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_427_p0,
        din1 => grp_fu_427_p1,
        opcode => grp_fu_427_opcode,
        ce => grp_fu_427_ce,
        dout => grp_fu_427_p2);

    voicerec_fmul_32ns_32ns_32_4_max_dsp_U15 : component voicerec_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_433_p0,
        din1 => grp_fu_433_p1,
        ce => grp_fu_433_ce,
        dout => grp_fu_433_p2);

    voicerec_fdiv_32ns_32ns_32_16_U16 : component voicerec_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p2);

    voicerec_sitofp_64ns_32_6_U17 : component voicerec_sitofp_64ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_445_p0,
        ce => grp_fu_445_ce,
        dout => grp_fu_445_p1);

    voicerec_fptrunc_64ns_32_1_U18 : component voicerec_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => x_assign_fu_448_p0,
        dout => x_assign_fu_448_p1);

    voicerec_fpext_32ns_64_1_U19 : component voicerec_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_81_fu_451_p0,
        dout => tmp_81_fu_451_p1);

    voicerec_dadd_64ns_64ns_64_5_full_dsp_U20 : component voicerec_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_454_p0,
        din1 => grp_fu_454_p1,
        ce => grp_fu_454_ce,
        dout => grp_fu_454_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U21 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_459_p0,
        din1 => grp_fu_459_p1,
        ce => grp_fu_459_ce,
        dout => grp_fu_459_p2);

    voicerec_dmul_64ns_64ns_64_6_max_dsp_U22 : component voicerec_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_463_p0,
        din1 => grp_fu_463_p1,
        ce => grp_fu_463_ce,
        dout => grp_fu_463_p2);

    voicerec_dcmp_64ns_64ns_1_1_U23 : component voicerec_dcmp_64ns_64ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_46_fu_470_p0,
        din1 => tmp_46_fu_470_p1,
        opcode => tmp_46_fu_470_opcode,
        dout => tmp_46_fu_470_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_voicerec_FFT_fu_417_ap_start_ap_start_reg assign process. --
    grp_voicerec_FFT_fu_417_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_voicerec_FFT_fu_417_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_532_p2 = ap_const_lv1_0)))) then 
                    grp_voicerec_FFT_fu_417_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_voicerec_FFT_fu_417_ap_ready)) then 
                    grp_voicerec_FFT_fu_417_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_301 assign process. --
    i_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                i_1_reg_301 <= i_6_reg_942;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = grp_voicerec_FFT_fu_417_ap_done)))) then 
                i_1_reg_301 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- i_2_reg_313 assign process. --
    i_2_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_576_p2)))) then 
                i_2_reg_313 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond2_fu_615_p2))) then 
                i_2_reg_313 <= i_7_fu_621_p2;
            end if; 
        end if;
    end process;

    -- i_3_reg_324 assign process. --
    i_3_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_615_p2)))) then 
                i_3_reg_324 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
                i_3_reg_324 <= i_9_reg_991;
            end if; 
        end if;
    end process;

    -- i_4_reg_348 assign process. --
    i_4_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond1_fu_636_p2)))) then 
                i_4_reg_348 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
                i_4_reg_348 <= i_8_reg_1066;
            end if; 
        end if;
    end process;

    -- i_reg_289 assign process. --
    i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_289 <= i_5_reg_929;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_289 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- k_i_reg_371 assign process. --
    k_i_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = exitcond_fu_717_p2)))) then 
                k_i_reg_371 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
                k_i_reg_371 <= k_reg_1128;
            end if; 
        end if;
    end process;

    -- mellIdx_reg_336 assign process. --
    mellIdx_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_615_p2)))) then 
                mellIdx_reg_336 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
                mellIdx_reg_336 <= p_mellIdx_fu_710_p3;
            end if; 
        end if;
    end process;

    -- n_i_reg_406 assign process. --
    n_i_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st99_fsm_98)) then 
                n_i_reg_406 <= n_reg_1146;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and (ap_const_lv1_0 = exitcond4_i_fu_842_p2))) then 
                n_i_reg_406 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_382 assign process. --
    phi_mul_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = exitcond_fu_717_p2)))) then 
                phi_mul_reg_382 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
                phi_mul_reg_382 <= next_mul_reg_1120;
            end if; 
        end if;
    end process;

    -- storemerge_reg_359 assign process. --
    storemerge_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and not((ap_const_lv1_0 = tmp_47_fu_802_p2)))) then 
                storemerge_reg_359 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77)) then 
                storemerge_reg_359 <= tmp_81_fu_451_p1;
            end if; 
        end if;
    end process;

    -- sum_i_reg_394 assign process. --
    sum_i_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st99_fsm_98)) then 
                sum_i_reg_394 <= grp_fu_454_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and (ap_const_lv1_0 = exitcond4_i_fu_842_p2))) then 
                sum_i_reg_394 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                c_load_2_reg_963 <= c_q1;
                c_load_reg_957 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80) and (ap_const_lv1_0 = exitcond_i_fu_872_p2))) then
                dctMatrix_addr4_reg_1156 <= dctMatrix_addr4_fu_893_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_87)) then
                dctMatrix_load_reg_1171 <= dctMatrix_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = exitcond_fu_717_p2))) then
                e_addr_1_reg_1071 <= tmp_77_fu_729_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = tmp_84_fu_685_p2))) then
                e_addr_2_reg_1038 <= tmp_75_reg_996(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                    i_3_cast_reg_982(8 downto 0) <= i_3_cast_fu_632_p1(8 downto 0);
                i_9_reg_991 <= i_9_fu_642_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_5_reg_929 <= i_5_fu_538_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_6_reg_942 <= i_6_fu_582_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                i_8_reg_1066 <= i_8_fu_723_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79)) then
                k_reg_1128 <= k_fu_848_p2;
                next_mul_reg_1120 <= next_mul_fu_836_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                mellIdx_1_reg_1048 <= grp_fu_475_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                    mell_load_cast_cast_reg_1006(7 downto 0) <= mell_load_cast_cast_fu_657_p1(7 downto 0);
                tmp_76_reg_1011 <= tmp_76_fu_661_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then
                n_reg_1146 <= n_fu_878_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80) and not((ap_const_lv1_0 = exitcond_i_fu_872_p2)))) then
                p_addr1_reg_1161 <= p_addr1_fu_899_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = exitcond_fu_717_p2)))) then
                    p_addr_cast_reg_1076(11 downto 1) <= p_addr_cast_fu_762_p1(11 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_87) or (ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) or (ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_103))) then
                reg_481 <= grp_fu_459_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st99_fsm_98))) then
                reg_490 <= grp_fu_454_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then
                reg_497 <= d_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81))) then
                reg_502 <= e_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72))) then
                reg_510 <= grp_fu_427_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76))) then
                reg_516 <= grp_fu_433_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66))) then
                reg_523 <= grp_fu_427_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and (ap_const_lv1_0 = exitcond4_i_fu_842_p2))) then
                    s_reg_1133(0) <= s_fu_860_p3(0);    s_reg_1133(4) <= s_fu_860_p3(4);    s_reg_1133(9 downto 6) <= s_fu_860_p3(9 downto 6);    s_reg_1133(13 downto 11) <= s_fu_860_p3(13 downto 11);    s_reg_1133(22 downto 16) <= s_fu_860_p3(22 downto 16);    s_reg_1133(26 downto 25) <= s_fu_860_p3(26 downto 25);    s_reg_1133(30 downto 29) <= s_fu_860_p3(30 downto 29);    s_reg_1133(36 downto 33) <= s_fu_860_p3(36 downto 33);    s_reg_1133(39) <= s_fu_860_p3(39);    s_reg_1133(45) <= s_fu_860_p3(45);    s_reg_1133(47) <= s_fu_860_p3(47);    s_reg_1133(50 downto 49) <= s_fu_860_p3(50 downto 49);    s_reg_1133(52) <= s_fu_860_p3(52);
                    tmp_27_i_trn2_cast_reg_1138(3 downto 0) <= tmp_27_i_trn2_cast_fu_868_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                    tmp_2_i_i_reg_1099(22 downto 0) <= tmp_2_i_i_fu_831_p1(22 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
                tmp_46_reg_1081 <= tmp_46_fu_470_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67)) then
                tmp_6_i_i_reg_1110 <= grp_fu_440_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_70_reg_969 <= grp_fu_463_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then
                tmp_75_reg_996 <= tmp_75_fu_648_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                tmp_80_reg_1020 <= tmp_80_fu_671_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                tmp_84_reg_1029 <= tmp_84_fu_685_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then
                tmp_86_reg_1043 <= grp_fu_454_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and (ap_const_lv1_0 = tmp_47_fu_802_p2))) then
                x_assign_reg_1089 <= x_assign_fu_448_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52)) then
                y_reg_1105 <= grp_fu_445_p1;
            end if;
        end if;
    end process;
    i_3_cast_reg_982(9) <= '0';
    mell_load_cast_cast_reg_1006(8) <= '0';
    p_addr_cast_reg_1076(0) <= '0';
    tmp_2_i_i_reg_1099(31 downto 23) <= "001111110";
    s_reg_1133(3 downto 1) <= "000";
    s_reg_1133(5 downto 5) <= "0";
    s_reg_1133(10 downto 10) <= "0";
    s_reg_1133(15 downto 14) <= "00";
    s_reg_1133(24 downto 23) <= "00";
    s_reg_1133(28 downto 27) <= "00";
    s_reg_1133(32 downto 31) <= "00";
    s_reg_1133(38 downto 37) <= "00";
    s_reg_1133(44 downto 40) <= "00000";
    s_reg_1133(46 downto 46) <= "0";
    s_reg_1133(48 downto 48) <= "0";
    s_reg_1133(51 downto 51) <= "0";
    s_reg_1133(63 downto 53) <= "00111111111";
    tmp_27_i_trn2_cast_reg_1138(11 downto 4) <= "00000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_532_p2, exitcond3_fu_576_p2, exitcond1_fu_636_p2, tmp_76_fu_661_p2, tmp_80_fu_671_p2, tmp_84_fu_685_p2, exitcond_fu_717_p2, tmp_47_fu_802_p2, exitcond4_i_fu_842_p2, exitcond_i_fu_872_p2, grp_voicerec_FFT_fu_417_ap_done, exitcond2_fu_615_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_532_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_voicerec_FFT_fu_417_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st25_fsm_24 => 
                if ((ap_const_lv1_0 = exitcond2_fu_615_p2)) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_636_p2))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st27_fsm_26 => 
                if ((ap_const_lv1_0 = tmp_76_fu_661_p2)) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                if ((ap_const_lv1_0 = tmp_80_fu_671_p2)) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                end if;
            when ap_ST_st35_fsm_34 => 
                if (not((ap_const_lv1_0 = tmp_84_fu_685_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                end if;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st44_fsm_43 => 
                if (not((ap_const_lv1_0 = exitcond_fu_717_p2))) then
                    ap_NS_fsm <= ap_ST_st80_fsm_79;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                if (not((ap_const_lv1_0 = tmp_47_fu_802_p2))) then
                    ap_NS_fsm <= ap_ST_st79_fsm_78;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st80_fsm_79 => 
                if (not((ap_const_lv1_0 = exitcond4_i_fu_842_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st81_fsm_80;
                end if;
            when ap_ST_st81_fsm_80 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_872_p2))) then
                    ap_NS_fsm <= ap_ST_st100_fsm_99;
                else
                    ap_NS_fsm <= ap_ST_st82_fsm_81;
                end if;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st80_fsm_79, exitcond4_i_fu_842_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and not((ap_const_lv1_0 = exitcond4_i_fu_842_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st80_fsm_79, exitcond4_i_fu_842_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and not((ap_const_lv1_0 = exitcond4_i_fu_842_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_199 assign process. --
    ap_sig_bdd_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_199 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_214 assign process. --
    ap_sig_bdd_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_214 <= (ap_const_lv1_1 = ap_CS_fsm(87 downto 87));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(103 downto 103));
    end process;


    -- ap_sig_bdd_240 assign process. --
    ap_sig_bdd_240_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_240 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_255 <= (ap_const_lv1_1 = ap_CS_fsm(98 downto 98));
    end process;


    -- ap_sig_bdd_264 assign process. --
    ap_sig_bdd_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_264 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_298 assign process. --
    ap_sig_bdd_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_298 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_305 assign process. --
    ap_sig_bdd_305_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_305 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_315 assign process. --
    ap_sig_bdd_315_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_315 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_322 assign process. --
    ap_sig_bdd_322_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_322 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_330 assign process. --
    ap_sig_bdd_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_330 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_339 assign process. --
    ap_sig_bdd_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_339 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_356 assign process. --
    ap_sig_bdd_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_356 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_371 assign process. --
    ap_sig_bdd_371_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_371 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_386 assign process. --
    ap_sig_bdd_386_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_386 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_407 assign process. --
    ap_sig_bdd_407_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_407 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_425 assign process. --
    ap_sig_bdd_425_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_425 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_441 assign process. --
    ap_sig_bdd_441_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_441 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_455 assign process. --
    ap_sig_bdd_455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_455 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_469 assign process. --
    ap_sig_bdd_469_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_469 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_478 assign process. --
    ap_sig_bdd_478_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_478 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_489 assign process. --
    ap_sig_bdd_489_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_489 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_498 assign process. --
    ap_sig_bdd_498_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_498 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_516 assign process. --
    ap_sig_bdd_516_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_516 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_525 assign process. --
    ap_sig_bdd_525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_525 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_537 assign process. --
    ap_sig_bdd_537_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_537 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_548 assign process. --
    ap_sig_bdd_548_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_548 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_557 assign process. --
    ap_sig_bdd_557_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_557 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_566 assign process. --
    ap_sig_bdd_566_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_566 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_575 assign process. --
    ap_sig_bdd_575_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_575 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    -- ap_sig_bdd_593 assign process. --
    ap_sig_bdd_593_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_593 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_613 assign process. --
    ap_sig_bdd_613_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_613 <= (ap_const_lv1_1 = ap_CS_fsm(86 downto 86));
    end process;


    -- ap_sig_bdd_640 assign process. --
    ap_sig_bdd_640_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_640 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_649 assign process. --
    ap_sig_bdd_649_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_649 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_659 assign process. --
    ap_sig_bdd_659_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_659 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_682 assign process. --
    ap_sig_bdd_682_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_682 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    -- ap_sig_bdd_698 assign process. --
    ap_sig_bdd_698_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_698 <= (ap_const_lv1_1 = ap_CS_fsm(104 downto 104));
    end process;


    -- ap_sig_bdd_782 assign process. --
    ap_sig_bdd_782_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_782 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_789 assign process. --
    ap_sig_bdd_789_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_789 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_796 assign process. --
    ap_sig_bdd_796_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_796 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_809 assign process. --
    ap_sig_bdd_809_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_809 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_816 assign process. --
    ap_sig_bdd_816_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_816 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_823 assign process. --
    ap_sig_bdd_823_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_823 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_838 assign process. --
    ap_sig_bdd_838_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_838 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_845 assign process. --
    ap_sig_bdd_845_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_845 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_852 assign process. --
    ap_sig_bdd_852_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_852 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_860 assign process. --
    ap_sig_bdd_860_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_860 <= (ap_const_lv1_1 = ap_CS_fsm(94 downto 94));
    end process;


    -- ap_sig_bdd_871 assign process. --
    ap_sig_bdd_871_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_871 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_878 assign process. --
    ap_sig_bdd_878_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_878 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_885 assign process. --
    ap_sig_bdd_885_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_885 <= (ap_const_lv1_1 = ap_CS_fsm(82 downto 82));
    end process;


    -- ap_sig_bdd_892 assign process. --
    ap_sig_bdd_892_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_892 <= (ap_const_lv1_1 = ap_CS_fsm(88 downto 88));
    end process;


    -- ap_sig_cseq_ST_st104_fsm_103 assign process. --
    ap_sig_cseq_ST_st104_fsm_103_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st104_fsm_103 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st104_fsm_103 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st105_fsm_104 assign process. --
    ap_sig_cseq_ST_st105_fsm_104_assign_proc : process(ap_sig_bdd_698)
    begin
        if (ap_sig_bdd_698) then 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_199)
    begin
        if (ap_sig_bdd_199) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_838)
    begin
        if (ap_sig_bdd_838) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_240)
    begin
        if (ap_sig_bdd_240) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_878)
    begin
        if (ap_sig_bdd_878) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_659)
    begin
        if (ap_sig_bdd_659) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_407)
    begin
        if (ap_sig_bdd_407) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_425)
    begin
        if (ap_sig_bdd_425) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_264)
    begin
        if (ap_sig_bdd_264) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_845)
    begin
        if (ap_sig_bdd_845) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_356)
    begin
        if (ap_sig_bdd_356) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_441)
    begin
        if (ap_sig_bdd_441) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_455)
    begin
        if (ap_sig_bdd_455) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_852)
    begin
        if (ap_sig_bdd_852) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_640)
    begin
        if (ap_sig_bdd_640) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_469)
    begin
        if (ap_sig_bdd_469) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_478)
    begin
        if (ap_sig_bdd_478) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_489)
    begin
        if (ap_sig_bdd_489) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_498)
    begin
        if (ap_sig_bdd_498) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_516)
    begin
        if (ap_sig_bdd_516) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_525)
    begin
        if (ap_sig_bdd_525) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_537)
    begin
        if (ap_sig_bdd_537) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_649)
    begin
        if (ap_sig_bdd_649) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_298)
    begin
        if (ap_sig_bdd_298) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_548)
    begin
        if (ap_sig_bdd_548) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_809)
    begin
        if (ap_sig_bdd_809) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_315)
    begin
        if (ap_sig_bdd_315) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_782)
    begin
        if (ap_sig_bdd_782) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st59_fsm_58 assign process. --
    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_bdd_816)
    begin
        if (ap_sig_bdd_816) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_371)
    begin
        if (ap_sig_bdd_371) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_322)
    begin
        if (ap_sig_bdd_322) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st63_fsm_62 assign process. --
    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_bdd_789)
    begin
        if (ap_sig_bdd_789) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st67_fsm_66 assign process. --
    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_bdd_339)
    begin
        if (ap_sig_bdd_339) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_67 assign process. --
    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_bdd_557)
    begin
        if (ap_sig_bdd_557) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_796)
    begin
        if (ap_sig_bdd_796) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_386)
    begin
        if (ap_sig_bdd_386) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_305)
    begin
        if (ap_sig_bdd_305) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st74_fsm_73 assign process. --
    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_bdd_823)
    begin
        if (ap_sig_bdd_823) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_330)
    begin
        if (ap_sig_bdd_330) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st78_fsm_77 assign process. --
    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_bdd_566)
    begin
        if (ap_sig_bdd_566) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st79_fsm_78 assign process. --
    ap_sig_cseq_ST_st79_fsm_78_assign_proc : process(ap_sig_bdd_682)
    begin
        if (ap_sig_bdd_682) then 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_871)
    begin
        if (ap_sig_bdd_871) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st80_fsm_79 assign process. --
    ap_sig_cseq_ST_st80_fsm_79_assign_proc : process(ap_sig_bdd_575)
    begin
        if (ap_sig_bdd_575) then 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st81_fsm_80 assign process. --
    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_bdd_593)
    begin
        if (ap_sig_bdd_593) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st82_fsm_81 assign process. --
    ap_sig_cseq_ST_st82_fsm_81_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st83_fsm_82 assign process. --
    ap_sig_cseq_ST_st83_fsm_82_assign_proc : process(ap_sig_bdd_885)
    begin
        if (ap_sig_bdd_885) then 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st87_fsm_86 assign process. --
    ap_sig_cseq_ST_st87_fsm_86_assign_proc : process(ap_sig_bdd_613)
    begin
        if (ap_sig_bdd_613) then 
            ap_sig_cseq_ST_st87_fsm_86 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st87_fsm_86 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st88_fsm_87 assign process. --
    ap_sig_cseq_ST_st88_fsm_87_assign_proc : process(ap_sig_bdd_214)
    begin
        if (ap_sig_bdd_214) then 
            ap_sig_cseq_ST_st88_fsm_87 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st88_fsm_87 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st89_fsm_88 assign process. --
    ap_sig_cseq_ST_st89_fsm_88_assign_proc : process(ap_sig_bdd_892)
    begin
        if (ap_sig_bdd_892) then 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st94_fsm_93 assign process. --
    ap_sig_cseq_ST_st94_fsm_93_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st95_fsm_94 assign process. --
    ap_sig_cseq_ST_st95_fsm_94_assign_proc : process(ap_sig_bdd_860)
    begin
        if (ap_sig_bdd_860) then 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st99_fsm_98 assign process. --
    ap_sig_cseq_ST_st99_fsm_98_assign_proc : process(ap_sig_bdd_255)
    begin
        if (ap_sig_bdd_255) then 
            ap_sig_cseq_ST_st99_fsm_98 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st99_fsm_98 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_address0 assign process. --
    c_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_417_c_address0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_63_fu_560_p1, tmp_66_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address0 <= tmp_63_fu_560_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= tmp_66_fu_594_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address0 <= grp_voicerec_FFT_fu_417_c_address0;
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_address1 assign process. --
    c_address1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_417_c_address1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_65_fu_571_p1, tmp_69_fu_605_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_address1 <= tmp_65_fu_571_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address1 <= tmp_69_fu_605_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_address1 <= grp_voicerec_FFT_fu_417_c_address1;
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_417_c_ce0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_ce0 <= grp_voicerec_FFT_fu_417_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_ce1 assign process. --
    c_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_voicerec_FFT_fu_417_c_ce1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_ce1 <= grp_voicerec_FFT_fu_417_c_ce1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_d0 assign process. --
    c_d0_assign_proc : process(inputSound_q0, grp_voicerec_FFT_fu_417_c_d0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_d0 <= inputSound_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d0 <= grp_voicerec_FFT_fu_417_c_d0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_d1 assign process. --
    c_d1_assign_proc : process(grp_voicerec_FFT_fu_417_c_d1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            c_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_d1 <= grp_voicerec_FFT_fu_417_c_d1;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- c_we0 assign process. --
    c_we0_assign_proc : process(grp_voicerec_FFT_fu_417_c_we0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_we0 <= grp_voicerec_FFT_fu_417_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- c_we1 assign process. --
    c_we1_assign_proc : process(grp_voicerec_FFT_fu_417_c_we1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            c_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            c_we1 <= grp_voicerec_FFT_fu_417_c_we1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- d_address0 assign process. --
    d_address0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st24_fsm_23, tmp_73_fu_610_p1, tmp_78_fu_666_p1, tmp_85_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            d_address0 <= tmp_73_fu_610_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            d_address0 <= tmp_85_fu_691_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            d_address0 <= tmp_78_fu_666_p1(8 - 1 downto 0);
        else 
            d_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- d_ce0 assign process. --
    d_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            d_ce0 <= ap_const_logic_1;
        else 
            d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_d0 <= reg_481;

    -- d_we0 assign process. --
    d_we0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            d_we0 <= ap_const_logic_1;
        else 
            d_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dctMatrix_addr4_fu_893_p2 <= std_logic_vector(unsigned(tmp_29_i_trn_cast_fu_889_p1) + unsigned(phi_mul_reg_382));
    dctMatrix_address0 <= tmp_58_fu_903_p1(10 - 1 downto 0);

    -- dctMatrix_ce0 assign process. --
    dctMatrix_ce0_assign_proc : process(ap_sig_cseq_ST_st87_fsm_86)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st87_fsm_86)) then 
            dctMatrix_ce0 <= ap_const_logic_1;
        else 
            dctMatrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- e_address0 assign process. --
    e_address0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmp_75_reg_996, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st35_fsm_34, e_addr_2_reg_1038, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st44_fsm_43, e_addr_1_reg_1071, ap_sig_cseq_ST_st81_fsm_80, ap_sig_cseq_ST_st79_fsm_78, tmp_74_fu_627_p1, tmp_77_fu_729_p1, tmp_29_i_fu_884_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
            e_address0 <= e_addr_1_reg_1071;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            e_address0 <= e_addr_2_reg_1038;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            e_address0 <= tmp_74_fu_627_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            e_address0 <= tmp_29_i_fu_884_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            e_address0 <= tmp_77_fu_729_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            e_address0 <= tmp_75_reg_996(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            e_address0 <= ap_const_lv5_0;
        else 
            e_address0 <= "XXXXX";
        end if; 
    end process;


    -- e_ce0 assign process. --
    e_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st81_fsm_80, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78))) then 
            e_ce0 <= ap_const_logic_1;
        else 
            e_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- e_d0 assign process. --
    e_d0_assign_proc : process(reg_490, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st34_fsm_33, tmp_86_reg_1043, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st79_fsm_78, storemerge_reg_359)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
            e_d0 <= storemerge_reg_359;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            e_d0 <= tmp_86_reg_1043;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            e_d0 <= reg_490;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            e_d0 <= ap_const_lv64_0;
        else 
            e_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    e_load_1_to_int_fu_766_p1 <= reg_502;

    -- e_we0 assign process. --
    e_we0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmp_76_reg_1011, tmp_80_reg_1020, ap_sig_cseq_ST_st34_fsm_33, tmp_84_reg_1029, ap_sig_cseq_ST_st42_fsm_41, exitcond2_fu_615_p2, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond2_fu_615_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78) or ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_lv1_0 = tmp_76_reg_1011))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not((ap_const_lv1_0 = tmp_80_reg_1020)) and (ap_const_lv1_0 = tmp_84_reg_1029)))) then 
            e_we0 <= ap_const_logic_1;
        else 
            e_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_636_p2 <= "1" when (i_3_reg_324 = ap_const_lv9_100) else "0";
    exitcond2_fu_615_p2 <= "1" when (i_2_reg_313 = ap_const_lv5_1A) else "0";
    exitcond3_fu_576_p2 <= "1" when (i_1_reg_301 = ap_const_lv9_100) else "0";
    exitcond4_fu_532_p2 <= "1" when (i_reg_289 = ap_const_lv9_100) else "0";
    exitcond4_i_fu_842_p2 <= "1" when (k_i_reg_371 = ap_const_lv4_E) else "0";
    exitcond_fu_717_p2 <= "1" when (i_4_reg_348 = ap_const_lv5_1A) else "0";
    exitcond_i_fu_872_p2 <= "1" when (n_i_reg_406 = ap_const_lv5_1A) else "0";
    grp_fu_427_ce <= ap_const_logic_1;

    -- grp_fu_427_opcode assign process. --
    grp_fu_427_opcode_assign_proc : process(ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68))) then 
            grp_fu_427_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57))) then 
            grp_fu_427_opcode <= ap_const_lv2_0;
        else 
            grp_fu_427_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_427_p0 assign process. --
    grp_fu_427_p0_assign_proc : process(reg_516, reg_523, ap_sig_cseq_ST_st48_fsm_47, tmp_2_i_i_fu_831_p1, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68))) then 
            grp_fu_427_p0 <= reg_523;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_427_p0 <= reg_516;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_427_p0 <= tmp_2_i_i_fu_831_p1;
        else 
            grp_fu_427_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_427_p1 assign process. --
    grp_fu_427_p1_assign_proc : process(reg_516, ap_sig_cseq_ST_st48_fsm_47, tmp_6_i_i_reg_1110, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            grp_fu_427_p1 <= tmp_6_i_i_reg_1110;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62)) then 
            grp_fu_427_p1 <= reg_516;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_427_p1 <= ap_const_lv32_C2F87377;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_427_p1 <= ap_const_lv32_3EB444F9;
        else 
            grp_fu_427_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_433_ce <= ap_const_logic_1;

    -- grp_fu_433_p0 assign process. --
    grp_fu_433_p0_assign_proc : process(reg_510, tmp_2_i_i_reg_1099, y_reg_1105, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st59_fsm_58, ap_sig_cseq_ST_st74_fsm_73)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then 
            grp_fu_433_p0 <= reg_510;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            grp_fu_433_p0 <= tmp_2_i_i_reg_1099;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_433_p0 <= y_reg_1105;
        else 
            grp_fu_433_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_433_p1 assign process. --
    grp_fu_433_p1_assign_proc : process(ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st59_fsm_58, ap_sig_cseq_ST_st74_fsm_73)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then 
            grp_fu_433_p1 <= ap_const_lv32_3F317218;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            grp_fu_433_p1 <= ap_const_lv32_3FBFBF75;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_433_p1 <= ap_const_lv32_34000000;
        else 
            grp_fu_433_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_440_ce <= ap_const_logic_1;
    grp_fu_440_p0 <= ap_const_lv32_3FDCE9A3;
    grp_fu_440_p1 <= reg_510;
    grp_fu_445_ce <= ap_const_logic_1;
    grp_fu_445_p0 <= std_logic_vector(resize(unsigned(tmp_i_i_fu_807_p1),64));
    grp_fu_454_ce <= ap_const_logic_1;

    -- grp_fu_454_p0 assign process. --
    grp_fu_454_p0_assign_proc : process(reg_481, reg_502, sum_i_reg_394, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st95_fsm_94)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94)) then 
            grp_fu_454_p0 <= sum_i_reg_394;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_454_p0 <= reg_502;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_454_p0 <= reg_481;
        else 
            grp_fu_454_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_454_p1 assign process. --
    grp_fu_454_p1_assign_proc : process(reg_481, reg_497, tmp_70_reg_969, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st95_fsm_94)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94)) then 
            grp_fu_454_p1 <= reg_481;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_454_p1 <= reg_497;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_454_p1 <= tmp_70_reg_969;
        else 
            grp_fu_454_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_459_ce <= ap_const_logic_1;

    -- grp_fu_459_p0 assign process. --
    grp_fu_459_p0_assign_proc : process(reg_481, reg_490, c_load_reg_957, s_reg_1133, ap_sig_cseq_ST_st81_fsm_80, sum_i_reg_394, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st83_fsm_82, ap_sig_cseq_ST_st89_fsm_88)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88)) then 
            grp_fu_459_p0 <= reg_481;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then 
            grp_fu_459_p0 <= s_reg_1133;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            grp_fu_459_p0 <= sum_i_reg_394;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_459_p0 <= reg_490;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_459_p0 <= c_load_reg_957;
        else 
            grp_fu_459_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_459_p1 assign process. --
    grp_fu_459_p1_assign_proc : process(reg_502, c_load_reg_957, ap_sig_cseq_ST_st81_fsm_80, dctMatrix_load_reg_1171, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st83_fsm_82, ap_sig_cseq_ST_st89_fsm_88)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88)) then 
            grp_fu_459_p1 <= dctMatrix_load_reg_1171;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then 
            grp_fu_459_p1 <= reg_502;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            grp_fu_459_p1 <= ap_const_lv64_3FD1C01AA03BE89E;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_459_p1 <= ap_const_lv64_3F70000000000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_459_p1 <= c_load_reg_957;
        else 
            grp_fu_459_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_463_ce <= ap_const_logic_1;
    grp_fu_463_p0 <= c_load_2_reg_963;
    grp_fu_463_p1 <= c_load_2_reg_963;
    grp_fu_475_p2 <= std_logic_vector(unsigned(mellIdx_reg_336) + unsigned(ap_const_lv32_1));
    grp_voicerec_FFT_fu_417_ap_start <= grp_voicerec_FFT_fu_417_ap_start_ap_start_reg;
    grp_voicerec_FFT_fu_417_c_q0 <= c_q0;
    grp_voicerec_FFT_fu_417_c_q1 <= c_q1;
    i_3_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(i_3_reg_324),10));
    i_5_fu_538_p2 <= std_logic_vector(unsigned(i_reg_289) + unsigned(ap_const_lv9_1));
    i_6_fu_582_p2 <= std_logic_vector(unsigned(i_1_reg_301) + unsigned(ap_const_lv9_1));
    i_7_fu_621_p2 <= std_logic_vector(unsigned(i_2_reg_313) + unsigned(ap_const_lv5_1));
    i_8_fu_723_p2 <= std_logic_vector(unsigned(i_4_reg_348) + unsigned(ap_const_lv5_1));
    i_9_fu_642_p2 <= std_logic_vector(unsigned(i_3_reg_324) + unsigned(ap_const_lv9_1));
    i_cast7_fu_528_p1 <= std_logic_vector(resize(unsigned(i_reg_289),13));
    inputSound_address0 <= tmp_s_fu_549_p1(13 - 1 downto 0);

    -- inputSound_ce0 assign process. --
    inputSound_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            inputSound_ce0 <= ap_const_logic_1;
        else 
            inputSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_fu_848_p2 <= std_logic_vector(unsigned(k_i_reg_371) + unsigned(ap_const_lv4_1));

    -- mell_address0 assign process. --
    mell_address0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, tmp_75_fu_648_p1, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st42_fsm_41, tmp_83_fu_676_p1, tmp_87_fu_696_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            mell_address0 <= tmp_87_fu_696_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            mell_address0 <= tmp_83_fu_676_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            mell_address0 <= tmp_75_fu_648_p1(5 - 1 downto 0);
        else 
            mell_address0 <= "XXXXX";
        end if; 
    end process;


    -- mell_ce0 assign process. --
    mell_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st42_fsm_41)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41))) then 
            mell_ce0 <= ap_const_logic_1;
        else 
            mell_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mell_load_1_cast_cast_fu_681_p1 <= std_logic_vector(resize(unsigned(mell_q0),9));
    mell_load_2_cast_fu_701_p1 <= std_logic_vector(resize(unsigned(mell_q0),10));
    mell_load_cast_cast_fu_657_p1 <= std_logic_vector(resize(unsigned(mell_q0),9));
    mell_load_cast_fu_653_p1 <= std_logic_vector(resize(unsigned(mell_q0),10));
    mx_i_i_cast_fu_822_p1 <= std_logic_vector(resize(unsigned(mx_i_i_fu_814_p3),32));
    mx_i_i_fu_814_p3 <= (ap_const_lv7_7E & tmp_36_fu_810_p1);
    n_fu_878_p2 <= std_logic_vector(unsigned(n_i_reg_406) + unsigned(ap_const_lv5_1));
    next_mul_fu_836_p2 <= std_logic_vector(unsigned(phi_mul_reg_382) + unsigned(ap_const_lv9_1A));
    notlhs_fu_784_p2 <= "0" when (tmp_43_fu_770_p4 = ap_const_lv11_7FF) else "1";
    notrhs_fu_790_p2 <= "1" when (tmp_35_fu_780_p1 = ap_const_lv52_0) else "0";
        p_addr1_cast_fu_907_p1 <= std_logic_vector(resize(signed(p_addr1_reg_1161),32));

    p_addr1_fu_899_p2 <= std_logic_vector(signed(p_addr_cast_reg_1076) + signed(tmp_27_i_trn2_cast_reg_1138));
        p_addr_cast_fu_762_p1 <= std_logic_vector(resize(signed(p_addr_fu_756_p2),12));

    p_addr_fu_756_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_741_p1) - unsigned(p_shl5_cast_fu_752_p1));
    p_mellIdx_fu_710_p3 <= 
        mellIdx_1_reg_1048 when (tmp_88_fu_705_p2(0) = '1') else 
        mellIdx_reg_336;
    p_shl5_cast_fu_752_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_745_p3),11));
    p_shl_cast_fu_741_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_734_p3),11));
    ret_address0 <= tmp_57_fu_910_p1(10 - 1 downto 0);

    -- ret_ce0 assign process. --
    ret_ce0_assign_proc : process(ap_sig_cseq_ST_st105_fsm_104)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
            ret_ce0 <= ap_const_logic_1;
        else 
            ret_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_d0 <= reg_481;

    -- ret_we0 assign process. --
    ret_we0_assign_proc : process(ap_sig_cseq_ST_st105_fsm_104)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104))) then 
            ret_we0 <= ap_const_logic_1;
        else 
            ret_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_860_p3 <= 
        ap_const_lv64_3FE6A09E667F3BD1 when (tmp_i1_fu_854_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    tmp1_fu_544_p2 <= std_logic_vector(unsigned(sp) + unsigned(i_cast7_fu_528_p1));
    tmp_27_i_trn2_cast_fu_868_p1 <= std_logic_vector(resize(unsigned(k_i_reg_371),12));
    tmp_29_i_fu_884_p1 <= std_logic_vector(resize(unsigned(n_i_reg_406),64));
    tmp_29_i_trn_cast_fu_889_p1 <= std_logic_vector(resize(unsigned(n_i_reg_406),9));
    tmp_2_i_i_fu_831_p1 <= mx_i_i_cast_fu_822_p1;
    tmp_33_fu_554_p2 <= std_logic_vector(shift_left(unsigned(i_reg_289),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_34_fu_588_p2 <= std_logic_vector(shift_left(unsigned(i_1_reg_301),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_35_fu_780_p1 <= e_load_1_to_int_fu_766_p1(52 - 1 downto 0);
    tmp_36_fu_810_p1 <= tmp_i_i_fu_807_p1(23 - 1 downto 0);
    tmp_43_fu_770_p4 <= e_load_1_to_int_fu_766_p1(62 downto 52);
    tmp_45_fu_796_p2 <= (notrhs_fu_790_p2 or notlhs_fu_784_p2);
    tmp_46_fu_470_opcode <= ap_const_lv5_5;
    tmp_46_fu_470_p0 <= reg_502;
    tmp_46_fu_470_p1 <= ap_const_lv64_0;
    tmp_47_fu_802_p2 <= (tmp_45_fu_796_p2 and tmp_46_reg_1081);
    tmp_55_fu_734_p3 <= (tmp & ap_const_lv4_0);
    tmp_56_fu_745_p3 <= (tmp & ap_const_lv1_0);
    tmp_57_fu_910_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_907_p1),64));
    tmp_58_fu_903_p1 <= std_logic_vector(resize(unsigned(dctMatrix_addr4_reg_1156),64));
    tmp_63_fu_560_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_554_p2),64));
    tmp_64_fu_565_p2 <= (tmp_33_fu_554_p2 or ap_const_lv9_1);
    tmp_65_fu_571_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_565_p2),64));
    tmp_66_fu_594_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_588_p2),64));
    tmp_68_fu_599_p2 <= (tmp_34_fu_588_p2 or ap_const_lv9_1);
    tmp_69_fu_605_p1 <= std_logic_vector(resize(unsigned(tmp_68_fu_599_p2),64));
    tmp_73_fu_610_p1 <= std_logic_vector(resize(unsigned(i_1_reg_301),64));
    tmp_74_fu_627_p1 <= std_logic_vector(resize(unsigned(i_2_reg_313),64));
        tmp_75_fu_648_p1 <= std_logic_vector(resize(signed(mellIdx_reg_336),64));

    tmp_76_fu_661_p2 <= "1" when (i_3_cast_reg_982 = mell_load_cast_fu_653_p1) else "0";
    tmp_77_fu_729_p1 <= std_logic_vector(resize(unsigned(i_4_reg_348),64));
    tmp_78_fu_666_p1 <= std_logic_vector(resize(unsigned(i_3_reg_324),64));
    tmp_80_fu_671_p2 <= "1" when (unsigned(i_3_reg_324) > unsigned(mell_load_cast_cast_reg_1006)) else "0";
    tmp_81_fu_451_p0 <= reg_516;
        tmp_83_fu_676_p1 <= std_logic_vector(resize(signed(grp_fu_475_p2),64));

    tmp_84_fu_685_p2 <= "1" when (unsigned(i_3_reg_324) > unsigned(mell_load_1_cast_cast_fu_681_p1)) else "0";
    tmp_85_fu_691_p1 <= std_logic_vector(resize(unsigned(i_3_reg_324),64));
        tmp_87_fu_696_p1 <= std_logic_vector(resize(signed(grp_fu_475_p2),64));

    tmp_88_fu_705_p2 <= "1" when (i_3_cast_reg_982 = mell_load_2_cast_fu_701_p1) else "0";
    tmp_i1_fu_854_p2 <= "1" when (k_i_reg_371 = ap_const_lv4_0) else "0";
    tmp_i_i_fu_807_p1 <= x_assign_reg_1089;
    tmp_s_fu_549_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_544_p2),64));
    x_assign_fu_448_p0 <= reg_502;
end behav;
