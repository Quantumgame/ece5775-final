-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity voicerec_preprocessSound is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inSound_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    inSound_ce0 : OUT STD_LOGIC;
    inSound_we0 : OUT STD_LOGIC;
    inSound_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inSound_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    outSound_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    outSound_ce0 : OUT STD_LOGIC;
    outSound_we0 : OUT STD_LOGIC;
    outSound_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of voicerec_preprocessSound is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3E80 : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FC3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000011001100110011001100110011001100110011001100110011";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_1F40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111101000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal reg_219 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal tmp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal i_2_fu_231_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_2_reg_630 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal i_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal last_2_fu_292_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_2_reg_650 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal tmp_15_fu_302_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_reg_655 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal last_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_cast_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal j_9_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal tmp_49_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal tmp_37_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_725 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_205 : BOOLEAN;
    signal tmp_57_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_load_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal demorgan_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal first_reg_123 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_phi_fu_139_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_135 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_in_reg_147 : STD_LOGIC_VECTOR (13 downto 0);
    signal last_phi_fu_162_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_reg_158 : STD_LOGIC_VECTOR (14 downto 0);
    signal markBegin_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal j9_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal markBegin_1_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal deleteFlag_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_deleteFlag_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_i_i_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_i_i2_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inSound_load_to_int_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_246_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_256_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_in_cast_fu_288_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal last_2_cast1_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inSound_load_1_to_int_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_321_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_331_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_390_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_398_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_411_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_394_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_551_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_1_fu_559_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_572_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_555_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component voicerec_dcmp_64ns_64ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    voicerec_dcmp_64ns_64ns_1_1_U1 : component voicerec_dcmp_64ns_64ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        opcode => grp_fu_198_opcode,
        dout => grp_fu_198_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- count_fu_58 assign process. --
    count_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_50_fu_381_p2) and not((ap_const_lv1_0 = tmp_37_fu_439_p2)))) then 
                count_fu_58 <= count_1_fu_457_p2;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_55_reg_730)) or ((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_57_fu_487_p2)))))) then 
                count_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- deleteFlag_fu_54 assign process. --
    deleteFlag_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_50_fu_381_p2) and not((ap_const_lv1_0 = tmp_37_fu_439_p2)))) then 
                deleteFlag_fu_54 <= p_deleteFlag_fu_469_p3;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_55_reg_730)) or ((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_57_fu_487_p2)))))) then 
                deleteFlag_fu_54 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- first_reg_123 assign process. --
    first_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_20_reg_640) and not((tmp_reg_626 = ap_const_lv1_0)))) then 
                first_reg_123 <= i_2_reg_630;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                first_reg_123 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- i_1_in_reg_147 assign process. --
    i_1_in_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_47_reg_660) and (ap_const_lv1_0 = tmp_25_reg_669))) then 
                i_1_in_reg_147 <= tmp_15_reg_655;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and ((tmp_reg_626 = ap_const_lv1_0) or not((ap_const_lv1_0 = tmp_20_reg_640))))) then 
                i_1_in_reg_147 <= ap_const_lv14_3E80;
            end if; 
        end if;
    end process;

    -- i_3_reg_188 assign process. --
    i_3_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_49_fu_366_p2)))) then 
                i_3_reg_188 <= i_cast_reg_644;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                i_3_reg_188 <= i_5_fu_620_p2;
            end if; 
        end if;
    end process;

    -- i_reg_135 assign process. --
    i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_20_reg_640)) and not((tmp_reg_626 = ap_const_lv1_0)))) then 
                i_reg_135 <= first_reg_123;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
                i_reg_135 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- j9_reg_179 assign process. --
    j9_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_50_fu_381_p2) and (ap_const_lv1_0 = tmp_37_fu_439_p2) and not((ap_const_lv1_0 = tmp_55_fu_448_p2)))) then 
                j9_reg_179 <= j_9_reg_700;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and not((ap_const_lv1_0 = tmp_55_reg_730)) and not((ap_const_lv1_0 = tmp_57_fu_487_p2)))) then 
                j9_reg_179 <= j_8_fu_498_p2;
            end if; 
        end if;
    end process;

    -- j_1_fu_62 assign process. --
    j_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_31_fu_600_p2)))) then 
                j_1_fu_62 <= j_7_fu_610_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_49_fu_366_p2)))) then 
                j_1_fu_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_fu_50 assign process. --
    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_50_reg_721)))) then 
                j_fu_50 <= markBegin_1_fu_504_p3;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_55_reg_730)) or ((ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and (ap_const_lv1_0 = tmp_57_fu_487_p2)))))) then 
                j_fu_50 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- last_reg_158 assign process. --
    last_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_47_reg_660) and not((ap_const_lv1_0 = tmp_25_reg_669)))) then 
                last_reg_158 <= last_2_reg_650;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_47_fu_306_p2)))) then 
                last_reg_158 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    -- markBegin_reg_169 assign process. --
    markBegin_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and ((ap_const_lv1_0 = tmp_55_reg_730) or (ap_const_lv1_0 = tmp_57_fu_487_p2) or not((ap_const_lv1_0 = tmp_50_reg_721)) or not((ap_const_lv1_0 = tmp_37_reg_725))))) then 
                markBegin_reg_169 <= i_6_fu_516_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669))))) then 
                markBegin_reg_169 <= i_cast_reg_644;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_630 <= i_2_fu_231_p2;
                tmp_reg_626 <= tmp_fu_225_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and ((tmp_reg_626 = ap_const_lv1_0) or not((ap_const_lv1_0 = tmp_20_reg_640))))) then
                    i_cast_reg_644(13 downto 0) <= i_cast_fu_284_p1(13 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                j_1_load_reg_747 <= j_1_fu_62;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                j_9_reg_700 <= j_fu_50;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                last_2_reg_650 <= last_2_fu_292_p2;
                tmp_15_reg_655 <= tmp_15_fu_302_p1;
                tmp_47_reg_660 <= tmp_47_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669))))) then
                last_cast_reg_694 <= last_cast_fu_359_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then
                reg_219 <= inSound_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_20_reg_640 <= tmp_20_fu_278_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_25_reg_669 <= tmp_25_fu_353_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_37_reg_725 <= tmp_37_fu_439_p2;
                tmp_50_reg_721 <= tmp_50_fu_381_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_50_fu_381_p2) and (ap_const_lv1_0 = tmp_37_fu_439_p2))) then
                tmp_55_reg_730 <= tmp_55_fu_448_p2;
            end if;
        end if;
    end process;
    i_cast_reg_644(31 downto 14) <= "000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_225_p2, tmp_reg_626, tmp_20_reg_640, tmp_47_fu_306_p2, tmp_47_reg_660, tmp_25_reg_669, tmp_49_fu_366_p2, tmp_50_reg_721, tmp_37_reg_725, tmp_55_reg_730, tmp_57_fu_487_p2, demorgan_fu_536_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_225_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (((tmp_reg_626 = ap_const_lv1_0) or not((ap_const_lv1_0 = tmp_20_reg_640)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = tmp_47_fu_306_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if ((not((ap_const_lv1_0 = tmp_47_reg_660)) or not((ap_const_lv1_0 = tmp_25_reg_669)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = tmp_49_fu_366_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (((ap_const_lv1_0 = tmp_55_reg_730) or (ap_const_lv1_0 = tmp_57_fu_487_p2) or not((ap_const_lv1_0 = tmp_50_reg_721)) or not((ap_const_lv1_0 = tmp_37_reg_725)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_lv1_0 = demorgan_fu_536_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_13, demorgan_fu_536_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = demorgan_fu_536_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, demorgan_fu_536_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = demorgan_fu_536_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_205 assign process. --
    ap_sig_bdd_205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_205 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_205)
    begin
        if (ap_sig_bdd_205) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_457_p2 <= std_logic_vector(unsigned(count_fu_58) + unsigned(ap_const_lv32_1));
    demorgan_fu_536_p2 <= (slt_fu_531_p2 or tmp_51_fu_525_p2);

    -- grp_fu_198_opcode assign process. --
    grp_fu_198_opcode_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_198_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            grp_fu_198_opcode <= ap_const_lv5_2;
        else 
            grp_fu_198_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_198_p0 assign process. --
    grp_fu_198_p0_assign_proc : process(reg_219, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15, ret_i_i_i_i_i_fu_406_p1, ret_i_i_i_i_i2_fu_567_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_198_p0 <= ret_i_i_i_i_i2_fu_567_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_198_p0 <= ret_i_i_i_i_i_fu_406_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            grp_fu_198_p0 <= reg_219;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_198_p1 assign process. --
    grp_fu_198_p1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_198_p1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            grp_fu_198_p1 <= ap_const_lv64_3FC3333333333333;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_in_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(i_1_in_reg_147),15));
    i_2_fu_231_p2 <= std_logic_vector(unsigned(first_reg_123) + unsigned(ap_const_lv14_1));
    i_5_fu_620_p2 <= std_logic_vector(unsigned(i_3_reg_188) + unsigned(ap_const_lv32_1));
    i_6_fu_516_p2 <= std_logic_vector(unsigned(markBegin_reg_169) + unsigned(ap_const_lv32_1));
    i_cast_fu_284_p1 <= std_logic_vector(resize(unsigned(i_phi_fu_139_p4),32));

    -- i_phi_fu_139_p4 assign process. --
    i_phi_fu_139_p4_assign_proc : process(tmp_reg_626, tmp_20_reg_640, ap_sig_cseq_ST_st5_fsm_4, first_reg_123, i_reg_135)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_20_reg_640)) and not((tmp_reg_626 = ap_const_lv1_0)))) then 
            i_phi_fu_139_p4 <= first_reg_123;
        else 
            i_phi_fu_139_p4 <= i_reg_135;
        end if; 
    end process;


    -- inSound_address0 assign process. --
    inSound_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_s_fu_237_p1, tmp_48_fu_312_p1, tmp_52_fu_371_p1, tmp_58_fu_493_p1, tmp_53_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            inSound_address0 <= tmp_58_fu_493_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            inSound_address0 <= tmp_53_fu_542_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            inSound_address0 <= tmp_52_fu_371_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            inSound_address0 <= tmp_48_fu_312_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            inSound_address0 <= tmp_s_fu_237_p1(14 - 1 downto 0);
        else 
            inSound_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- inSound_ce0 assign process. --
    inSound_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            inSound_ce0 <= ap_const_logic_1;
        else 
            inSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inSound_d0 <= ap_const_lv64_0;
    inSound_load_1_to_int_fu_317_p1 <= reg_219;
    inSound_load_to_int_fu_242_p1 <= reg_219;

    -- inSound_we0 assign process. --
    inSound_we0_assign_proc : process(tmp_50_reg_721, tmp_37_reg_725, tmp_55_reg_730, ap_sig_cseq_ST_st13_fsm_12, tmp_57_fu_487_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_50_reg_721) and (ap_const_lv1_0 = tmp_37_reg_725) and not((ap_const_lv1_0 = tmp_55_reg_730)) and not((ap_const_lv1_0 = tmp_57_fu_487_p2))))) then 
            inSound_we0 <= ap_const_logic_1;
        else 
            inSound_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_7_fu_610_p2 <= std_logic_vector(unsigned(j_1_load_reg_747) + unsigned(ap_const_lv32_1));
    j_8_fu_498_p2 <= std_logic_vector(unsigned(j9_reg_179) + unsigned(ap_const_lv32_1));
        last_2_cast1_fu_298_p1 <= std_logic_vector(resize(signed(last_2_fu_292_p2),32));

    last_2_fu_292_p2 <= std_logic_vector(signed(ap_const_lv15_7FFF) + signed(i_1_in_cast_fu_288_p1));
        last_cast_fu_359_p1 <= std_logic_vector(resize(signed(last_phi_fu_162_p4),32));


    -- last_phi_fu_162_p4 assign process. --
    last_phi_fu_162_p4_assign_proc : process(last_2_reg_650, tmp_47_reg_660, tmp_25_reg_669, ap_sig_cseq_ST_st9_fsm_8, last_reg_158)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_47_reg_660) and not((ap_const_lv1_0 = tmp_25_reg_669)))) then 
            last_phi_fu_162_p4 <= last_2_reg_650;
        else 
            last_phi_fu_162_p4 <= last_reg_158;
        end if; 
    end process;

    markBegin_1_fu_504_p3 <= 
        markBegin_reg_169 when (tmp_37_reg_725(0) = '1') else 
        ap_const_lv32_0;
    notlhs1_fu_260_p2 <= "0" when (tmp_16_fu_246_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_335_p2 <= "0" when (tmp_21_fu_321_p4 = ap_const_lv11_7FF) else "1";
    notlhs7_fu_421_p2 <= "0" when (tmp_34_fu_411_p4 = ap_const_lv11_7FF) else "1";
    notlhs9_fu_582_p2 <= "0" when (tmp_28_fu_572_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_266_p2 <= "1" when (tmp_14_fu_256_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_341_p2 <= "1" when (tmp_17_fu_331_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_588_p2 <= "1" when (tmp_32_fu_555_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_427_p2 <= "1" when (tmp_26_fu_394_p1 = ap_const_lv52_0) else "0";
    outSound_address0 <= tmp_56_fu_606_p1(13 - 1 downto 0);

    -- outSound_ce0 assign process. --
    outSound_ce0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            outSound_ce0 <= ap_const_logic_1;
        else 
            outSound_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outSound_d0 <= reg_219;

    -- outSound_we0 assign process. --
    outSound_we0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, tmp_31_fu_600_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_31_fu_600_p2))))) then 
            outSound_we0 <= ap_const_logic_1;
        else 
            outSound_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_559_p3 <= (ap_const_lv1_0 & tmp_27_fu_551_p1);
    p_Result_s_fu_398_p3 <= (ap_const_lv1_0 & tmp_22_fu_390_p1);
    p_Val2_1_fu_547_p1 <= reg_219;
    p_Val2_s_fu_386_p1 <= reg_219;
    p_deleteFlag_fu_469_p3 <= 
        ap_const_lv32_1 when (tmp_54_fu_463_p2(0) = '1') else 
        deleteFlag_fu_54;
    ret_i_i_i_i_i2_fu_567_p1 <= p_Result_1_fu_559_p3;
    ret_i_i_i_i_i_fu_406_p1 <= p_Result_s_fu_398_p3;
    slt_fu_531_p2 <= "1" when (signed(last_cast_reg_694) < signed(i_3_reg_188)) else "0";
    tmp_14_fu_256_p1 <= inSound_load_to_int_fu_242_p1(52 - 1 downto 0);
    tmp_15_fu_302_p1 <= last_2_fu_292_p2(14 - 1 downto 0);
    tmp_16_fu_246_p4 <= inSound_load_to_int_fu_242_p1(62 downto 52);
    tmp_17_fu_331_p1 <= inSound_load_1_to_int_fu_317_p1(52 - 1 downto 0);
    tmp_18_fu_272_p2 <= (notrhs1_fu_266_p2 or notlhs1_fu_260_p2);
    tmp_20_fu_278_p2 <= (tmp_18_fu_272_p2 and grp_fu_198_p2);
    tmp_21_fu_321_p4 <= inSound_load_1_to_int_fu_317_p1(62 downto 52);
    tmp_22_fu_390_p1 <= p_Val2_s_fu_386_p1(63 - 1 downto 0);
    tmp_23_fu_347_p2 <= (notrhs2_fu_341_p2 or notlhs2_fu_335_p2);
    tmp_25_fu_353_p2 <= (tmp_23_fu_347_p2 and grp_fu_198_p2);
    tmp_26_fu_394_p1 <= p_Val2_s_fu_386_p1(52 - 1 downto 0);
    tmp_27_fu_551_p1 <= p_Val2_1_fu_547_p1(63 - 1 downto 0);
    tmp_28_fu_572_p4 <= p_Val2_1_fu_547_p1(62 downto 52);
    tmp_29_fu_594_p2 <= (notrhs3_fu_588_p2 or notlhs9_fu_582_p2);
    tmp_31_fu_600_p2 <= (tmp_29_fu_594_p2 and grp_fu_198_p2);
    tmp_32_fu_555_p1 <= p_Val2_1_fu_547_p1(52 - 1 downto 0);
    tmp_34_fu_411_p4 <= p_Val2_s_fu_386_p1(62 downto 52);
    tmp_35_fu_433_p2 <= (notrhs8_fu_427_p2 or notlhs7_fu_421_p2);
    tmp_37_fu_439_p2 <= (tmp_35_fu_433_p2 and grp_fu_198_p2);
    tmp_47_fu_306_p2 <= "1" when (i_1_in_reg_147 = ap_const_lv14_0) else "0";
    tmp_48_fu_312_p1 <= std_logic_vector(resize(unsigned(last_2_cast1_fu_298_p1),64));
    tmp_49_fu_366_p2 <= "1" when (signed(markBegin_reg_169) > signed(last_cast_reg_694)) else "0";
    tmp_50_fu_381_p2 <= "1" when (j_9_reg_700 = ap_const_lv32_0) else "0";
    tmp_51_fu_525_p2 <= "1" when (j_1_fu_62 = ap_const_lv32_1F40) else "0";
        tmp_52_fu_371_p1 <= std_logic_vector(resize(signed(markBegin_reg_169),64));

        tmp_53_fu_542_p1 <= std_logic_vector(resize(signed(i_3_reg_188),64));

    tmp_54_fu_463_p2 <= "1" when (count_1_fu_457_p2 = ap_const_lv32_C8) else "0";
    tmp_55_fu_448_p2 <= "1" when (deleteFlag_fu_54 = ap_const_lv32_1) else "0";
        tmp_56_fu_606_p1 <= std_logic_vector(resize(signed(j_1_load_reg_747),64));

    tmp_57_fu_487_p2 <= "1" when (signed(j9_reg_179) < signed(markBegin_reg_169)) else "0";
        tmp_58_fu_493_p1 <= std_logic_vector(resize(signed(j9_reg_179),64));

    tmp_fu_225_p2 <= "1" when (unsigned(first_reg_123) < unsigned(ap_const_lv14_3E80)) else "0";
    tmp_s_fu_237_p1 <= std_logic_vector(resize(unsigned(first_reg_123),64));
end behav;
