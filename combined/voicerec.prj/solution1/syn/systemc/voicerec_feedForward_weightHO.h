// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __voicerec_feedForward_weightHO_H__
#define __voicerec_feedForward_weightHO_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct voicerec_feedForward_weightHO_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(voicerec_feedForward_weightHO_ram) {
        ram[0] = "0b10111101011101111101010100100100";
        ram[1] = "0b10111110000000001010001101010001";
        ram[2] = "0b10111110001010100011111000111010";
        ram[3] = "0b10111110100101000001010001100010";
        ram[4] = "0b10111111000010111001101010101110";
        ram[5] = "0b00111110111010110000001000001100";
        ram[6] = "0b10111111000110011100101111101111";
        ram[7] = "0b00111110100111100100101101100110";
        ram[8] = "0b00111110101011111010110011000101";
        ram[9] = "0b10111111000000011001001110100011";
        ram[10] = "0b10111110110101001010000100100111";
        ram[11] = "0b00111110110010111101011100001010";
        ram[12] = "0b00111110001100100110100010010000";
        ram[13] = "0b10111110100010101100100011100111";
        ram[14] = "0b10111111000010010001111010101000";
        ram[15] = "0b00111110001100001010110000111011";
        ram[16] = "0b00111110000010110010011011000000";
        ram[17] = "0b00111110100110111001011001001010";
        ram[18] = "0b10111111000101111010011110011000";
        ram[19] = "0b10111110000111110001111111011110";
        ram[20] = "0b00111110001000001011110111001011";
        ram[21] = "0b00111101110101101100111110000101";
        ram[22] = "0b10111101011100100101000010110101";
        ram[23] = "0b10111101100100001010101011011110";
        ram[24] = "0b00111110010001100000111001010010";
        ram[25] = "0b10111100110100000011011000001110";
        ram[26] = "0b00111101000011110000001100111110";
        ram[27] = "0b10111111001011010011011100101010";
        ram[28] = "0b00111110111010000000000000000000";
        ram[29] = "0b10111110111011111100011010010111";
        ram[30] = "0b10111110011100111101010110111011";
        ram[31] = "0b00111101010100010011011010111111";
        ram[32] = "0b00111110100010100000110110011001";
        ram[33] = "0b10111111001001001011111110010000";
        ram[34] = "0b00111110110001110011000010000011";
        ram[35] = "0b10111101111100111111001010010001";
        ram[36] = "0b10111110100010101010000000100011";
        ram[37] = "0b00111110101110110111011100011000";
        ram[38] = "0b00111110100100101000110101100101";
        ram[39] = "0b10111110111010011101010001010010";
        ram[40] = "0b10111101011100010101111100000011";
        ram[41] = "0b10111101111001001000100011000110";
        ram[42] = "0b10111101111110111101100101000101";
        ram[43] = "0b10111110100011000110000100001111";
        ram[44] = "0b10111111000000100001100100110011";
        ram[45] = "0b10111110101100110010010100101101";
        ram[46] = "0b00111110101100000110100110000011";
        ram[47] = "0b00111110001000000001111101110101";
        ram[48] = "0b00111110000100100011001000001001";
        ram[49] = "0b10111110000111100010010101000010";
        ram[50] = "0b10111101010010100110111000110011";
        ram[51] = "0b10111101111111110001111010001110";
        ram[52] = "0b10111110010111100111010111111111";
        ram[53] = "0b10111101110110001101011000001010";
        ram[54] = "0b10111101111101010011011000001101";
        ram[55] = "0b10111110110010111011011100110001";
        ram[56] = "0b10111110100101010000111110000100";
        ram[57] = "0b00111101100110011101011100110100";
        ram[58] = "0b10111110000111011010010101010101";
        ram[59] = "0b10111101110011001011001101010010";
        ram[60] = "0b00111110111010110000100111101010";
        ram[61] = "0b10111110101001010110101101000100";
        ram[62] = "0b10111110101101000011001011101100";
        ram[63] = "0b00111110011011011101100011111001";
        ram[64] = "0b10111101111100011101000001000010";
        ram[65] = "0b10111110010011011101011011100000";
        ram[66] = "0b00111110001011111111111011110100";
        ram[67] = "0b00111110101000011001100110011010";
        ram[68] = "0b00111110011101100011001011000010";
        ram[69] = "0b00111110110100111111000010111011";
        ram[70] = "0b10111110111111000110110100011110";
        ram[71] = "0b10111110111010000011111001100100";
        ram[72] = "0b10111110100101100101110000101101";
        ram[73] = "0b00111110011000010111110110101111";
        ram[74] = "0b10111110011011011001111111010011";
        ram[75] = "0b00111110001001000000000110000010";
        ram[76] = "0b10111100000100010111101111001001";
        ram[77] = "0b10111101001101011101110111010011";
        ram[78] = "0b00111110011000001001011111001000";
        ram[79] = "0b10111111000010111011101100011111";
        ram[80] = "0b10111101011001001000001011001100";
        ram[81] = "0b10111110011101010111101101000010";
        ram[82] = "0b10111110001010100101110100101001";
        ram[83] = "0b00111110111100011111110001101110";
        ram[84] = "0b10111101001100011111011010001000";
        ram[85] = "0b00111110000101011001111101101111";
        ram[86] = "0b00111110000100100111100010001110";
        ram[87] = "0b00111110001001010111010101111101";
        ram[88] = "0b00111110000001101010010101010001";
        ram[89] = "0b00111110000110111111100011111101";
        ram[90] = "0b00111110001000000100110010001100";
        ram[91] = "0b10111110000000001011010101100111";
        ram[92] = "0b10111111000100101001000111001001";
        ram[93] = "0b10111111000101110010101001011010";
        ram[94] = "0b00111110110100000111111100100100";
        ram[95] = "0b00111110100111100110011101110011";
        ram[96] = "0b10111111001100100011110110000001";
        ram[97] = "0b00111110000000010100010110010101";
        ram[98] = "0b00111110010111101010100011011010";
        ram[99] = "0b00111110010100101010001000111100";
        ram[100] = "0b00111101111010100101000101011101";
        ram[101] = "0b00111110000110101111110110010111";
        ram[102] = "0b00111101001100100110110101110000";
        ram[103] = "0b00111101101010100100101111101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(voicerec_feedForward_weightHO) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


voicerec_feedForward_weightHO_ram* meminst;


SC_CTOR(voicerec_feedForward_weightHO) {
meminst = new voicerec_feedForward_weightHO_ram("voicerec_feedForward_weightHO_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~voicerec_feedForward_weightHO() {
    delete meminst;
}


};//endmodule
#endif
