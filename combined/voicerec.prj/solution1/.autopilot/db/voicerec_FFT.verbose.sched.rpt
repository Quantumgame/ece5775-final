

================================================================
== Vivado HLS Report for 'voicerec_FFT'
================================================================
* Date:           Sun Dec  6 14:07:46 2015

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        voicerec.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.23|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-------------+-----------------+-----------+-----------+----------------+----------+
        |                 |      Latency      |    Iteration    |  Initiation Interval  |      Trip      |          |
        |    Loop Name    | min |     max     |     Latency     |  achieved |   target  |      Count     | Pipelined|
        +-----------------+-----+-------------+-----------------+-----------+-----------+----------------+----------+
        |- Loop 1         |    ?|            ?|                ?|          -|          -|               ?|    no    |
        | + Loop 1.1      |    ?|            ?|                1|          -|          -|               ?|    no    |
        |- Loop 2         |    ?|            ?|                ?|          -|          -|               ?|    no    |
        | + Loop 2.1      |    ?|            ?| 2 ~ 23622320108 |          -|          -|               ?|    no    |
        |  ++ Loop 2.1.1  |    0|  23622320106|               22|          -|          -| 0 ~ 1073741823 |    no    |
        +-----------------+-----+-------------+-----------------+-----------+-----------+----------------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 65
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	7  / (!tmp)
	3  / (tmp & tmp_s)
	5  / (tmp & !tmp_s)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	6  / (tmp_31)
	2  / (!tmp_31)
7 --> 
	8  / (!tmp_22)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	7  / (!tmp_32)
	44  / (tmp_32)
44 --> 
	45  / (tmp_33)
	43  / (!tmp_33)
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	44  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: N_read [1/1] 0.00ns
:0  %N_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %N)

ST_1: stg_67 [1/1] 1.57ns
:1  br label %1


 <State 2>: 4.09ns
ST_2: k [1/1] 0.00ns
:0  %k = phi i31 [ 0, %0 ], [ %k_3, %6 ]

ST_2: j [1/1] 0.00ns
:1  %j = phi i32 [ 0, %0 ], [ %j_5, %6 ]

ST_2: k_cast [1/1] 0.00ns
:2  %k_cast = zext i31 %k to i32

ST_2: tmp [1/1] 2.52ns
:3  %tmp = icmp slt i32 %k_cast, %N_read

ST_2: k_3 [1/1] 2.44ns
:4  %k_3 = add i31 %k, 1

ST_2: stg_73 [1/1] 1.57ns
:5  br i1 %tmp, label %2, label %.preheader8

ST_2: tmp_s [1/1] 2.52ns
:0  %tmp_s = icmp slt i32 %k_cast, %j

ST_2: stg_75 [1/1] 0.00ns
:1  br i1 %tmp_s, label %3, label %._crit_edge

ST_2: i0 [1/1] 0.00ns
:0  %i0 = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 %k, i1 false)

ST_2: tmp_23 [1/1] 0.00ns
:2  %tmp_23 = sext i32 %i0 to i64

ST_2: c_addr [1/1] 0.00ns
:3  %c_addr = getelementptr [512 x double]* %c, i64 0, i64 %tmp_23

ST_2: dr [2/2] 2.71ns
:4  %dr = load double* %c_addr, align 8

ST_2: tmp_24 [1/1] 0.00ns
:5  %tmp_24 = or i32 %i0, 1

ST_2: tmp_25 [1/1] 0.00ns
:6  %tmp_25 = sext i32 %tmp_24 to i64

ST_2: c_addr_1 [1/1] 0.00ns
:7  %c_addr_1 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_25

ST_2: di [2/2] 2.71ns
:8  %di = load double* %c_addr_1, align 8


 <State 3>: 2.71ns
ST_3: i1 [1/1] 0.00ns
:1  %i1 = shl i32 %j, 1

ST_3: dr [1/2] 2.71ns
:4  %dr = load double* %c_addr, align 8

ST_3: di [1/2] 2.71ns
:8  %di = load double* %c_addr_1, align 8

ST_3: tmp_26 [1/1] 0.00ns
:9  %tmp_26 = sext i32 %i1 to i64

ST_3: c_addr_2 [1/1] 0.00ns
:10  %c_addr_2 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_26

ST_3: c_load [2/2] 2.71ns
:11  %c_load = load double* %c_addr_2, align 8

ST_3: tmp_27 [1/1] 0.00ns
:13  %tmp_27 = or i32 %i1, 1

ST_3: tmp_28 [1/1] 0.00ns
:14  %tmp_28 = sext i32 %tmp_27 to i64

ST_3: c_addr_3 [1/1] 0.00ns
:15  %c_addr_3 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_28

ST_3: c_load_1 [2/2] 2.71ns
:16  %c_load_1 = load double* %c_addr_3, align 8


 <State 4>: 5.42ns
ST_4: c_load [1/2] 2.71ns
:11  %c_load = load double* %c_addr_2, align 8

ST_4: stg_95 [1/1] 2.71ns
:12  store double %c_load, double* %c_addr, align 8

ST_4: c_load_1 [1/2] 2.71ns
:16  %c_load_1 = load double* %c_addr_3, align 8

ST_4: stg_97 [1/1] 2.71ns
:17  store double %c_load_1, double* %c_addr_1, align 8


 <State 5>: 2.71ns
ST_5: stg_98 [1/1] 2.71ns
:18  store double %dr, double* %c_addr_2, align 8

ST_5: stg_99 [1/1] 2.71ns
:19  store double %di, double* %c_addr_3, align 8

ST_5: stg_100 [1/1] 0.00ns
:20  br label %._crit_edge

ST_5: stg_101 [1/1] 1.57ns
._crit_edge:0  br label %4


 <State 6>: 5.26ns
ST_6: j_1 [1/1] 0.00ns
:0  %j_1 = phi i32 [ %j, %._crit_edge ], [ %j_4, %5 ]

ST_6: n_0_in [1/1] 0.00ns
:1  %n_0_in = phi i32 [ %N_read, %._crit_edge ], [ %n, %5 ]

ST_6: tmp_5 [1/1] 0.00ns
:2  %tmp_5 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %n_0_in, i32 1, i32 31)

ST_6: n [1/1] 0.00ns
:3  %n = sext i31 %tmp_5 to i32

ST_6: tmp_11 [1/1] 0.00ns
:4  %tmp_11 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %n_0_in, i32 2, i32 31)

ST_6: icmp [1/1] 2.49ns
:5  %icmp = icmp sgt i30 %tmp_11, 0

ST_6: slt [1/1] 2.52ns
:6  %slt = icmp slt i32 %j_1, %n

ST_6: rev6 [1/1] 1.37ns
:7  %rev6 = xor i1 %slt, true

ST_6: tmp_31 [1/1] 1.37ns
:8  %tmp_31 = and i1 %icmp, %rev6

ST_6: stg_111 [1/1] 0.00ns
:9  br i1 %tmp_31, label %5, label %6

ST_6: j_4 [1/1] 2.44ns
:0  %j_4 = sub nsw i32 %j_1, %n

ST_6: stg_113 [1/1] 0.00ns
:1  br label %4

ST_6: j_5 [1/1] 2.44ns
:0  %j_5 = add nsw i32 %j_1, %n

ST_6: stg_115 [1/1] 0.00ns
:1  br label %1


 <State 7>: 5.41ns
ST_7: n_1 [1/1] 0.00ns
.preheader8:0  %n_1 = phi i32 [ 2, %1 ], [ %n_2, %7 ]

ST_7: tmp_22 [1/1] 2.52ns
.preheader8:1  %tmp_22 = icmp sgt i32 %n_1, %N_read

ST_7: stg_118 [1/1] 0.00ns
.preheader8:2  br i1 %tmp_22, label %10, label %._crit_edge9

ST_7: nb [36/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1

ST_7: stg_120 [1/1] 0.00ns
:0  ret void


 <State 8>: 5.41ns
ST_8: nb [35/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 9>: 5.41ns
ST_9: nb [34/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 10>: 5.41ns
ST_10: nb [33/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 11>: 5.41ns
ST_11: nb [32/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 12>: 5.41ns
ST_12: nb [31/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 13>: 5.41ns
ST_13: nb [30/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 14>: 5.41ns
ST_14: nb [29/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 15>: 5.41ns
ST_15: nb [28/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 16>: 5.41ns
ST_16: nb [27/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 17>: 5.41ns
ST_17: nb [26/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 18>: 5.41ns
ST_18: nb [25/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 19>: 5.41ns
ST_19: nb [24/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 20>: 5.41ns
ST_20: nb [23/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 21>: 5.41ns
ST_21: nb [22/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 22>: 5.41ns
ST_22: nb [21/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 23>: 5.41ns
ST_23: nb [20/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 24>: 5.41ns
ST_24: nb [19/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 25>: 5.41ns
ST_25: nb [18/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 26>: 5.41ns
ST_26: nb [17/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 27>: 5.41ns
ST_27: nb [16/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 28>: 5.41ns
ST_28: nb [15/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 29>: 5.41ns
ST_29: nb [14/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 30>: 5.41ns
ST_30: nb [13/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 31>: 5.41ns
ST_31: nb [12/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 32>: 5.41ns
ST_32: nb [11/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 33>: 5.41ns
ST_33: nb [10/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 34>: 5.41ns
ST_34: nb [9/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 35>: 5.41ns
ST_35: nb [8/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 36>: 5.41ns
ST_36: nb [7/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 37>: 5.41ns
ST_37: nb [6/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 38>: 5.41ns
ST_38: nb [5/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 39>: 5.41ns
ST_39: nb [4/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 40>: 5.41ns
ST_40: nb [3/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 41>: 5.41ns
ST_41: tmp_29 [1/1] 2.44ns
._crit_edge9:0  %tmp_29 = add nsw i32 -1, %n_1

ST_41: tmp_30 [1/1] 0.00ns
._crit_edge9:1  %tmp_30 = sext i32 %tmp_29 to i64

ST_41: cosVec_addr [1/1] 0.00ns
._crit_edge9:2  %cosVec_addr = getelementptr inbounds [256 x double]* @cosVec, i64 0, i64 %tmp_30

ST_41: wr [2/2] 2.39ns
._crit_edge9:3  %wr = load double* %cosVec_addr, align 8

ST_41: sinVec_addr [1/1] 0.00ns
._crit_edge9:4  %sinVec_addr = getelementptr inbounds [256 x double]* @sinVec, i64 0, i64 %tmp_30

ST_41: wi [2/2] 2.39ns
._crit_edge9:5  %wi = load double* %sinVec_addr, align 8

ST_41: nb [2/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1


 <State 42>: 5.41ns
ST_42: wr [1/2] 2.39ns
._crit_edge9:3  %wr = load double* %cosVec_addr, align 8

ST_42: wi [1/2] 2.39ns
._crit_edge9:5  %wi = load double* %sinVec_addr, align 8

ST_42: wi_1_to_int [1/1] 0.00ns
._crit_edge9:6  %wi_1_to_int = bitcast double %wi to i64

ST_42: wi_1_neg [1/1] 1.37ns
._crit_edge9:7  %wi_1_neg = xor i64 %wi_1_to_int, -9223372036854775808

ST_42: wi_1 [1/1] 0.00ns
._crit_edge9:8  %wi_1 = bitcast i64 %wi_1_neg to double

ST_42: nb [1/36] 5.41ns
._crit_edge9:9  %nb = sdiv i32 %N_read, %n_1

ST_42: tmp_3 [1/1] 0.00ns
._crit_edge9:10  %tmp_3 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %n_1, i32 1, i32 31)

ST_42: n_2 [1/1] 0.00ns
._crit_edge9:11  %n_2 = shl i32 %n_1, 1

ST_42: tmp_31_cast [1/1] 0.00ns
._crit_edge9:12  %tmp_31_cast = sext i32 %n_2 to i63

ST_42: tmp_10 [1/1] 0.00ns
._crit_edge9:13  %tmp_10 = trunc i32 %n_1 to i11

ST_42: stg_171 [1/1] 1.57ns
._crit_edge9:14  br label %7


 <State 43>: 4.09ns
ST_43: j_2 [1/1] 0.00ns
:0  %j_2 = phi i31 [ 0, %._crit_edge9 ], [ %j_6, %9 ]

ST_43: cp_0_rec [1/1] 0.00ns
:1  %cp_0_rec = phi i63 [ 0, %._crit_edge9 ], [ %p_rec, %9 ]

ST_43: j_2_cast [1/1] 0.00ns
:2  %j_2_cast = zext i31 %j_2 to i32

ST_43: tmp_32 [1/1] 2.52ns
:3  %tmp_32 = icmp slt i32 %j_2_cast, %nb

ST_43: j_6 [1/1] 2.44ns
:4  %j_6 = add i31 %j_2, 1

ST_43: stg_177 [1/1] 1.57ns
:5  br i1 %tmp_32, label %.preheader, label %.preheader8


 <State 44>: 7.79ns
ST_44: d_1 [1/1] 0.00ns
.preheader:0  %d_1 = phi double [ %wrk, %8 ], [ 1.000000e+00, %7 ]

ST_44: k_1 [1/1] 0.00ns
.preheader:1  %k_1 = phi i30 [ %k_4, %8 ], [ 0, %7 ]

ST_44: wik [1/1] 0.00ns
.preheader:2  %wik = phi double [ %wik_1, %8 ], [ 0.000000e+00, %7 ]

ST_44: k_1_cast [1/1] 0.00ns
.preheader:3  %k_1_cast = zext i30 %k_1 to i31

ST_44: tmp_33 [1/1] 2.50ns
.preheader:4  %tmp_33 = icmp slt i31 %k_1_cast, %tmp_3

ST_44: empty [1/1] 0.00ns
.preheader:5  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 1073741823, i64 0)

ST_44: k_4 [1/1] 2.44ns
.preheader:6  %k_4 = add i30 %k_1, 1

ST_44: stg_185 [1/1] 0.00ns
.preheader:7  br i1 %tmp_33, label %8, label %9

ST_44: tmp_12 [1/1] 0.00ns
:0  %tmp_12 = trunc i30 %k_1 to i10

ST_44: tmp_34 [1/1] 0.00ns
:1  %tmp_34 = call i11 @_ssdm_op_BitConcatenate.i11.i10.i1(i10 %tmp_12, i1 false)

ST_44: tmp_13 [1/1] 0.00ns
:2  %tmp_13 = trunc i63 %cp_0_rec to i11

ST_44: sum8 [1/1] 1.84ns
:3  %sum8 = add i11 %tmp_34, %tmp_13

ST_44: sum8_cast [1/1] 0.00ns
:4  %sum8_cast = zext i11 %sum8 to i64

ST_44: c_addr_4 [1/1] 0.00ns
:5  %c_addr_4 = getelementptr [512 x double]* %c, i64 0, i64 %sum8_cast

ST_44: tmp_39_cast [1/1] 0.00ns
:7  %tmp_39_cast = or i11 %tmp_34, 1

ST_44: sum [1/1] 1.84ns
:8  %sum = add i11 %tmp_39_cast, %tmp_13

ST_44: sum_cast [1/1] 0.00ns
:9  %sum_cast = zext i11 %sum to i64

ST_44: c_addr_5 [1/1] 0.00ns
:10  %c_addr_5 = getelementptr [512 x double]* %c, i64 0, i64 %sum_cast

ST_44: tmp_40_cast [1/1] 1.84ns
:12  %tmp_40_cast = add i11 %tmp_34, %tmp_10

ST_44: sum1 [1/1] 1.84ns
:13  %sum1 = add i11 %tmp_40_cast, %tmp_13

ST_44: sum1_cast [1/1] 0.00ns
:14  %sum1_cast = zext i11 %sum1 to i64

ST_44: c_addr_6 [1/1] 0.00ns
:15  %c_addr_6 = getelementptr [512 x double]* %c, i64 0, i64 %sum1_cast

ST_44: d1r [2/2] 2.71ns
:16  %d1r = load double* %c_addr_6, align 8

ST_44: tmp_42_cast [1/1] 0.00ns
:17  %tmp_42_cast = or i11 %tmp_40_cast, 1

ST_44: sum2 [1/1] 1.84ns
:18  %sum2 = add i11 %tmp_42_cast, %tmp_13

ST_44: sum2_cast [1/1] 0.00ns
:19  %sum2_cast = zext i11 %sum2 to i64

ST_44: c_addr_7 [1/1] 0.00ns
:20  %c_addr_7 = getelementptr [512 x double]* %c, i64 0, i64 %sum2_cast

ST_44: d1i [2/2] 2.71ns
:21  %d1i = load double* %c_addr_7, align 8

ST_44: tmp_43 [6/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_44: tmp_44 [6/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_44: tmp_45 [6/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_44: tmp_46 [6/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1

ST_44: p_rec [1/1] 3.40ns
:0  %p_rec = add i63 %tmp_31_cast, %cp_0_rec

ST_44: stg_211 [1/1] 0.00ns
:1  br label %7


 <State 45>: 7.79ns
ST_45: d1r [1/2] 2.71ns
:16  %d1r = load double* %c_addr_6, align 8

ST_45: d1i [1/2] 2.71ns
:21  %d1i = load double* %c_addr_7, align 8

ST_45: tmp_43 [5/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_45: tmp_44 [5/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_45: tmp_45 [5/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_45: tmp_46 [5/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1


 <State 46>: 7.79ns
ST_46: tmp_35 [6/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_46: tmp_36 [6/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_46: tmp_37 [6/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_46: tmp_38 [6/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_46: tmp_43 [4/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_46: tmp_44 [4/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_46: tmp_45 [4/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_46: tmp_46 [4/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1


 <State 47>: 7.79ns
ST_47: tmp_35 [5/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_47: tmp_36 [5/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_47: tmp_37 [5/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_47: tmp_38 [5/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_47: tmp_43 [3/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_47: tmp_44 [3/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_47: tmp_45 [3/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_47: tmp_46 [3/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1


 <State 48>: 7.79ns
ST_48: tmp_35 [4/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_48: tmp_36 [4/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_48: tmp_37 [4/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_48: tmp_38 [4/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_48: tmp_43 [2/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_48: tmp_44 [2/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_48: tmp_45 [2/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_48: tmp_46 [2/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1


 <State 49>: 7.79ns
ST_49: tmp_35 [3/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_49: tmp_36 [3/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_49: tmp_37 [3/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_49: tmp_38 [3/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_49: tmp_43 [1/6] 7.79ns
:36  %tmp_43 = fmul double %wr, %d_1

ST_49: tmp_44 [1/6] 7.79ns
:37  %tmp_44 = fmul double %wik, %wi_1

ST_49: tmp_45 [1/6] 7.79ns
:39  %tmp_45 = fmul double %wr, %wik

ST_49: tmp_46 [1/6] 7.79ns
:40  %tmp_46 = fmul double %d_1, %wi_1


 <State 50>: 8.23ns
ST_50: tmp_35 [2/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_50: tmp_36 [2/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_50: tmp_37 [2/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_50: tmp_38 [2/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_50: wrk [5/5] 8.23ns
:38  %wrk = fsub double %tmp_43, %tmp_44

ST_50: wik_1 [5/5] 8.23ns
:41  %wik_1 = fadd double %tmp_45, %tmp_46


 <State 51>: 8.23ns
ST_51: tmp_35 [1/6] 7.79ns
:22  %tmp_35 = fmul double %d_1, %d1r

ST_51: tmp_36 [1/6] 7.79ns
:23  %tmp_36 = fmul double %wik, %d1i

ST_51: tmp_37 [1/6] 7.79ns
:25  %tmp_37 = fmul double %d_1, %d1i

ST_51: tmp_38 [1/6] 7.79ns
:26  %tmp_38 = fmul double %wik, %d1r

ST_51: wrk [4/5] 8.23ns
:38  %wrk = fsub double %tmp_43, %tmp_44

ST_51: wik_1 [4/5] 8.23ns
:41  %wik_1 = fadd double %tmp_45, %tmp_46


 <State 52>: 8.23ns
ST_52: dr_1 [5/5] 8.23ns
:24  %dr_1 = fsub double %tmp_35, %tmp_36

ST_52: di_1 [5/5] 8.23ns
:27  %di_1 = fadd double %tmp_37, %tmp_38

ST_52: wrk [3/5] 8.23ns
:38  %wrk = fsub double %tmp_43, %tmp_44

ST_52: wik_1 [3/5] 8.23ns
:41  %wik_1 = fadd double %tmp_45, %tmp_46


 <State 53>: 8.23ns
ST_53: dr_1 [4/5] 8.23ns
:24  %dr_1 = fsub double %tmp_35, %tmp_36

ST_53: di_1 [4/5] 8.23ns
:27  %di_1 = fadd double %tmp_37, %tmp_38

ST_53: wrk [2/5] 8.23ns
:38  %wrk = fsub double %tmp_43, %tmp_44

ST_53: wik_1 [2/5] 8.23ns
:41  %wik_1 = fadd double %tmp_45, %tmp_46


 <State 54>: 8.23ns
ST_54: dr_1 [3/5] 8.23ns
:24  %dr_1 = fsub double %tmp_35, %tmp_36

ST_54: di_1 [3/5] 8.23ns
:27  %di_1 = fadd double %tmp_37, %tmp_38

ST_54: wrk [1/5] 8.23ns
:38  %wrk = fsub double %tmp_43, %tmp_44

ST_54: wik_1 [1/5] 8.23ns
:41  %wik_1 = fadd double %tmp_45, %tmp_46


 <State 55>: 8.23ns
ST_55: d0r [2/2] 2.71ns
:6  %d0r = load double* %c_addr_4, align 8

ST_55: dr_1 [2/5] 8.23ns
:24  %dr_1 = fsub double %tmp_35, %tmp_36

ST_55: di_1 [2/5] 8.23ns
:27  %di_1 = fadd double %tmp_37, %tmp_38


 <State 56>: 8.23ns
ST_56: d0r [1/2] 2.71ns
:6  %d0r = load double* %c_addr_4, align 8

ST_56: d0i [2/2] 2.71ns
:11  %d0i = load double* %c_addr_5, align 8

ST_56: dr_1 [1/5] 8.23ns
:24  %dr_1 = fsub double %tmp_35, %tmp_36

ST_56: di_1 [1/5] 8.23ns
:27  %di_1 = fadd double %tmp_37, %tmp_38


 <State 57>: 8.23ns
ST_57: d0i [1/2] 2.71ns
:11  %d0i = load double* %c_addr_5, align 8

ST_57: tmp_39 [5/5] 8.23ns
:28  %tmp_39 = fadd double %d0r, %dr_1

ST_57: tmp_41 [5/5] 8.23ns
:32  %tmp_41 = fsub double %d0r, %dr_1


 <State 58>: 8.23ns
ST_58: tmp_39 [4/5] 8.23ns
:28  %tmp_39 = fadd double %d0r, %dr_1

ST_58: tmp_40 [5/5] 8.23ns
:30  %tmp_40 = fadd double %d0i, %di_1

ST_58: tmp_41 [4/5] 8.23ns
:32  %tmp_41 = fsub double %d0r, %dr_1

ST_58: tmp_42 [5/5] 8.23ns
:34  %tmp_42 = fsub double %d0i, %di_1


 <State 59>: 8.23ns
ST_59: tmp_39 [3/5] 8.23ns
:28  %tmp_39 = fadd double %d0r, %dr_1

ST_59: tmp_40 [4/5] 8.23ns
:30  %tmp_40 = fadd double %d0i, %di_1

ST_59: tmp_41 [3/5] 8.23ns
:32  %tmp_41 = fsub double %d0r, %dr_1

ST_59: tmp_42 [4/5] 8.23ns
:34  %tmp_42 = fsub double %d0i, %di_1


 <State 60>: 8.23ns
ST_60: tmp_39 [2/5] 8.23ns
:28  %tmp_39 = fadd double %d0r, %dr_1

ST_60: tmp_40 [3/5] 8.23ns
:30  %tmp_40 = fadd double %d0i, %di_1

ST_60: tmp_41 [2/5] 8.23ns
:32  %tmp_41 = fsub double %d0r, %dr_1

ST_60: tmp_42 [3/5] 8.23ns
:34  %tmp_42 = fsub double %d0i, %di_1


 <State 61>: 8.23ns
ST_61: tmp_39 [1/5] 8.23ns
:28  %tmp_39 = fadd double %d0r, %dr_1

ST_61: tmp_40 [2/5] 8.23ns
:30  %tmp_40 = fadd double %d0i, %di_1

ST_61: tmp_41 [1/5] 8.23ns
:32  %tmp_41 = fsub double %d0r, %dr_1

ST_61: tmp_42 [2/5] 8.23ns
:34  %tmp_42 = fsub double %d0i, %di_1


 <State 62>: 8.23ns
ST_62: stg_300 [1/1] 2.71ns
:29  store double %tmp_39, double* %c_addr_4, align 8

ST_62: tmp_40 [1/5] 8.23ns
:30  %tmp_40 = fadd double %d0i, %di_1

ST_62: tmp_42 [1/5] 8.23ns
:34  %tmp_42 = fsub double %d0i, %di_1


 <State 63>: 2.71ns
ST_63: stg_303 [1/1] 2.71ns
:31  store double %tmp_40, double* %c_addr_5, align 8


 <State 64>: 2.71ns
ST_64: stg_304 [1/1] 2.71ns
:33  store double %tmp_41, double* %c_addr_6, align 8


 <State 65>: 2.71ns
ST_65: stg_305 [1/1] 2.71ns
:35  store double %tmp_42, double* %c_addr_7, align 8

ST_65: stg_306 [1/1] 0.00ns
:42  br label %.preheader



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
