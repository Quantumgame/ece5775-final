

================================================================
== Vivado HLS Report for 'voicerec_FFT'
================================================================
* Date:           Sun Dec  6 17:20:10 2015

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        voicerec.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.23|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+---------+------+---------+---------+
    |     Latency    |    Interval    | Pipeline|
    |  min |   max   |  min |   max   |   Type  |
    +------+---------+------+---------+---------+
    |  4738|  2889858|  4738|  2889858|   none  |
    +------+---------+------+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+------+---------+--------------+-----------+-----------+------+----------+
        |                 |     Latency    |   Iteration  |  Initiation Interval  | Trip |          |
        |    Loop Name    |  min |   max   |    Latency   |  achieved |   target  | Count| Pipelined|
        +-----------------+------+---------+--------------+-----------+-----------+------+----------+
        |- Loop 1         |  2560|     3072|    10 ~ 12   |          -|          -|   256|    no    |
        | + Loop 1.1      |     7|        7|             1|          -|          -|     7|    no    |
        |- Loop 2         |  2176|  2886784| 272 ~ 360848 |          -|          -|     8|    no    |
        | + Loop 2.1      |   256|   360832|   2 ~ 2819   |          -|          -|   128|    no    |
        |  ++ Loop 2.1.1  |   128|     2816|    1 ~ 22    |          -|          -|   128|    no    |
        +-----------------+------+---------+--------------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 45
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	7  / (exitcond3)
	3  / (!exitcond3 & tmp)
	5  / (!exitcond3 & !tmp)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	6  / (!exitcond2)
	2  / (exitcond2)
7 --> 
	8  / (tmp_s)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	7  / (exitcond1)
	23  / (!exitcond1 & tmp_30)
	45  / (!exitcond1 & !tmp_30)
23 --> 
	45  / (exitcond)
	23  / (!exitcond & !tmp_31)
	24  / (!exitcond & tmp_31)
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	23  / true
45 --> 
	22  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_46 [1/1] 1.57ns
:0  br label %1


 <State 2>: 3.60ns
ST_2: k [1/1] 0.00ns
:0  %k = phi i9 [ 0, %0 ], [ %k_3, %5 ]

ST_2: j [1/1] 0.00ns
:1  %j = phi i32 [ 0, %0 ], [ %j_4, %5 ]

ST_2: k_cast3 [1/1] 0.00ns
:2  %k_cast3 = zext i9 %k to i32

ST_2: exitcond3 [1/1] 2.03ns
:3  %exitcond3 = icmp eq i9 %k, -256

ST_2: empty [1/1] 0.00ns
:4  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_2: k_3 [1/1] 1.84ns
:5  %k_3 = add i9 %k, 1

ST_2: stg_53 [1/1] 1.57ns
:6  br i1 %exitcond3, label %.preheader4, label %2

ST_2: tmp [1/1] 2.52ns
:0  %tmp = icmp slt i32 %k_cast3, %j

ST_2: stg_55 [1/1] 0.00ns
:1  br i1 %tmp, label %3, label %._crit_edge

ST_2: i0 [1/1] 0.00ns
:0  %i0 = shl i9 %k, 1

ST_2: tmp_24 [1/1] 0.00ns
:2  %tmp_24 = zext i9 %i0 to i64

ST_2: c_addr [1/1] 0.00ns
:3  %c_addr = getelementptr [512 x double]* %c, i64 0, i64 %tmp_24

ST_2: dr [2/2] 2.71ns
:4  %dr = load double* %c_addr, align 8

ST_2: tmp_25 [1/1] 0.00ns
:5  %tmp_25 = or i9 %i0, 1

ST_2: tmp_26 [1/1] 0.00ns
:6  %tmp_26 = zext i9 %tmp_25 to i64

ST_2: c_addr_1 [1/1] 0.00ns
:7  %c_addr_1 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_26

ST_2: di [2/2] 2.71ns
:8  %di = load double* %c_addr_1, align 8


 <State 3>: 2.71ns
ST_3: i1 [1/1] 0.00ns
:1  %i1 = shl i32 %j, 1

ST_3: dr [1/2] 2.71ns
:4  %dr = load double* %c_addr, align 8

ST_3: di [1/2] 2.71ns
:8  %di = load double* %c_addr_1, align 8

ST_3: tmp_27 [1/1] 0.00ns
:9  %tmp_27 = sext i32 %i1 to i64

ST_3: c_addr_2 [1/1] 0.00ns
:10  %c_addr_2 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_27

ST_3: c_load [2/2] 2.71ns
:11  %c_load = load double* %c_addr_2, align 8

ST_3: tmp_28 [1/1] 0.00ns
:13  %tmp_28 = or i32 %i1, 1

ST_3: tmp_29 [1/1] 0.00ns
:14  %tmp_29 = sext i32 %tmp_28 to i64

ST_3: c_addr_3 [1/1] 0.00ns
:15  %c_addr_3 = getelementptr [512 x double]* %c, i64 0, i64 %tmp_29

ST_3: c_load_1 [2/2] 2.71ns
:16  %c_load_1 = load double* %c_addr_3, align 8


 <State 4>: 5.42ns
ST_4: c_load [1/2] 2.71ns
:11  %c_load = load double* %c_addr_2, align 8

ST_4: stg_75 [1/1] 2.71ns
:12  store double %c_load, double* %c_addr, align 8

ST_4: c_load_1 [1/2] 2.71ns
:16  %c_load_1 = load double* %c_addr_3, align 8

ST_4: stg_77 [1/1] 2.71ns
:17  store double %c_load_1, double* %c_addr_1, align 8


 <State 5>: 2.71ns
ST_5: stg_78 [1/1] 2.71ns
:18  store double %dr, double* %c_addr_2, align 8

ST_5: stg_79 [1/1] 2.71ns
:19  store double %di, double* %c_addr_3, align 8

ST_5: stg_80 [1/1] 0.00ns
:20  br label %._crit_edge

ST_5: stg_81 [1/1] 1.57ns
._crit_edge:0  br label %4


 <State 6>: 6.63ns
ST_6: q [1/1] 0.00ns
:0  %q = phi i3 [ 0, %._crit_edge ], [ %q_1, %_ifconv ]

ST_6: j_1 [1/1] 0.00ns
:1  %j_1 = phi i32 [ %j, %._crit_edge ], [ %j_2, %_ifconv ]

ST_6: n [1/1] 0.00ns
:2  %n = phi i32 [ 128, %._crit_edge ], [ %n_1, %_ifconv ]

ST_6: exitcond2 [1/1] 1.62ns
:3  %exitcond2 = icmp eq i3 %q, -1

ST_6: empty_13 [1/1] 0.00ns
:4  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 7, i64 7, i64 7)

ST_6: q_1 [1/1] 0.80ns
:5  %q_1 = add i3 %q, 1

ST_6: stg_88 [1/1] 0.00ns
:6  br i1 %exitcond2, label %5, label %_ifconv

ST_6: slt [1/1] 2.52ns
_ifconv:0  %slt = icmp slt i32 %j_1, %n

ST_6: rev5 [1/1] 1.37ns
_ifconv:1  %rev5 = xor i1 %slt, true

ST_6: tmp_11 [1/1] 0.00ns
_ifconv:2  %tmp_11 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %n, i32 1, i32 31)

ST_6: icmp [1/1] 2.50ns
_ifconv:3  %icmp = icmp sgt i31 %tmp_11, 0

ST_6: or_cond [1/1] 1.37ns
_ifconv:4  %or_cond = and i1 %rev5, %icmp

ST_6: j_6 [1/1] 2.44ns
_ifconv:5  %j_6 = sub nsw i32 %j_1, %n

ST_6: tmp_5 [1/1] 0.00ns
_ifconv:6  %tmp_5 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %n, i32 1, i32 31)

ST_6: n_4 [1/1] 0.00ns
_ifconv:7  %n_4 = zext i31 %tmp_5 to i32

ST_6: j_2 [1/1] 1.37ns
_ifconv:8  %j_2 = select i1 %or_cond, i32 %j_6, i32 %j_1

ST_6: n_1 [1/1] 1.37ns
_ifconv:9  %n_1 = select i1 %or_cond, i32 %n_4, i32 %n

ST_6: stg_99 [1/1] 0.00ns
_ifconv:10  br label %4

ST_6: j_4 [1/1] 2.44ns
:0  %j_4 = add nsw i32 %j_1, %n

ST_6: stg_101 [1/1] 0.00ns
:1  br label %1


 <State 7>: 5.41ns
ST_7: n_2 [1/1] 0.00ns
.preheader4:0  %n_2 = phi i32 [ 2, %1 ], [ %n_3, %6 ]

ST_7: tmp_s [1/1] 2.52ns
.preheader4:1  %tmp_s = icmp slt i32 %n_2, 257

ST_7: empty_14 [1/1] 0.00ns
.preheader4:2  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_7: stg_105 [1/1] 0.00ns
.preheader4:3  br i1 %tmp_s, label %._crit_edge6, label %10

ST_7: nb [15/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2

ST_7: stg_107 [1/1] 0.00ns
:0  ret void


 <State 8>: 5.41ns
ST_8: nb [14/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 9>: 5.41ns
ST_9: nb [13/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 10>: 5.41ns
ST_10: nb [12/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 11>: 5.41ns
ST_11: nb [11/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 12>: 5.41ns
ST_12: nb [10/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 13>: 5.41ns
ST_13: nb [9/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 14>: 5.41ns
ST_14: nb [8/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 15>: 5.41ns
ST_15: nb [7/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 16>: 5.41ns
ST_16: nb [6/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 17>: 5.41ns
ST_17: nb [5/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 18>: 5.41ns
ST_18: nb [4/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 19>: 5.41ns
ST_19: nb [3/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 20>: 5.41ns
ST_20: tmp_22 [1/1] 2.44ns
._crit_edge6:0  %tmp_22 = add nsw i32 -1, %n_2

ST_20: tmp_23 [1/1] 0.00ns
._crit_edge6:1  %tmp_23 = sext i32 %tmp_22 to i64

ST_20: cosVec_addr [1/1] 0.00ns
._crit_edge6:2  %cosVec_addr = getelementptr inbounds [256 x double]* @cosVec, i64 0, i64 %tmp_23

ST_20: wr [2/2] 2.39ns
._crit_edge6:3  %wr = load double* %cosVec_addr, align 8

ST_20: sinVec_addr [1/1] 0.00ns
._crit_edge6:4  %sinVec_addr = getelementptr inbounds [256 x double]* @sinVec, i64 0, i64 %tmp_23

ST_20: wi [2/2] 2.39ns
._crit_edge6:5  %wi = load double* %sinVec_addr, align 8

ST_20: nb [2/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2


 <State 21>: 5.41ns
ST_21: wr [1/2] 2.39ns
._crit_edge6:3  %wr = load double* %cosVec_addr, align 8

ST_21: wi [1/2] 2.39ns
._crit_edge6:5  %wi = load double* %sinVec_addr, align 8

ST_21: wi_1_to_int [1/1] 0.00ns
._crit_edge6:6  %wi_1_to_int = bitcast double %wi to i64

ST_21: wi_1_neg [1/1] 1.37ns
._crit_edge6:7  %wi_1_neg = xor i64 %wi_1_to_int, -9223372036854775808

ST_21: wi_1 [1/1] 0.00ns
._crit_edge6:8  %wi_1 = bitcast i64 %wi_1_neg to double

ST_21: nb [1/15] 5.41ns
._crit_edge6:9  %nb = sdiv i32 256, %n_2

ST_21: tmp_3 [1/1] 0.00ns
._crit_edge6:10  %tmp_3 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %n_2, i32 1, i32 31)

ST_21: n_3 [1/1] 0.00ns
._crit_edge6:11  %n_3 = shl i32 %n_2, 1

ST_21: tmp_8 [1/1] 0.00ns
._crit_edge6:12  %tmp_8 = trunc i32 %n_2 to i11

ST_21: stg_136 [1/1] 1.57ns
._crit_edge6:13  br label %6


 <State 22>: 4.09ns
ST_22: j_3 [1/1] 0.00ns
:0  %j_3 = phi i8 [ 0, %._crit_edge6 ], [ %j_5, %._crit_edge7 ]

ST_22: cp_rec [1/1] 0.00ns
:1  %cp_rec = phi i39 [ 0, %._crit_edge6 ], [ %cp_addr_rec, %._crit_edge7 ]

ST_22: j_3_cast2 [1/1] 0.00ns
:2  %j_3_cast2 = zext i8 %j_3 to i32

ST_22: exitcond1 [1/1] 2.00ns
:3  %exitcond1 = icmp eq i8 %j_3, -128

ST_22: empty_15 [1/1] 0.00ns
:4  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)

ST_22: j_5 [1/1] 1.72ns
:5  %j_5 = add i8 %j_3, 1

ST_22: stg_143 [1/1] 0.00ns
:6  br i1 %exitcond1, label %.preheader4, label %7

ST_22: tmp_30 [1/1] 2.52ns
:0  %tmp_30 = icmp slt i32 %j_3_cast2, %nb

ST_22: stg_145 [1/1] 1.57ns
:1  br i1 %tmp_30, label %.preheader, label %._crit_edge7


 <State 23>: 7.79ns
ST_23: d_1 [1/1] 0.00ns
.preheader:0  %d_1 = phi double [ 1.000000e+00, %7 ], [ %wrk, %9 ], [ %d_1, %8 ]

ST_23: wik [1/1] 0.00ns
.preheader:1  %wik = phi double [ 0.000000e+00, %7 ], [ %wik_1, %9 ], [ %wik, %8 ]

ST_23: k_1 [1/1] 0.00ns
.preheader:2  %k_1 = phi i8 [ 0, %7 ], [ %k_4, %9 ], [ %k_4, %8 ]

ST_23: k_1_cast1 [1/1] 0.00ns
.preheader:3  %k_1_cast1 = zext i8 %k_1 to i31

ST_23: exitcond [1/1] 2.00ns
.preheader:4  %exitcond = icmp eq i8 %k_1, -128

ST_23: empty_16 [1/1] 0.00ns
.preheader:5  %empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)

ST_23: k_4 [1/1] 1.72ns
.preheader:6  %k_4 = add i8 %k_1, 1

ST_23: stg_153 [1/1] 1.57ns
.preheader:7  br i1 %exitcond, label %._crit_edge7, label %8

ST_23: tmp_31 [1/1] 2.50ns
:0  %tmp_31 = icmp slt i31 %k_1_cast1, %tmp_3

ST_23: stg_155 [1/1] 0.00ns
:1  br i1 %tmp_31, label %9, label %.preheader

ST_23: i0_1 [1/1] 0.00ns
:0  %i0_1 = shl i8 %k_1, 1

ST_23: tmp_32 [1/1] 0.00ns
:1  %tmp_32 = zext i8 %i0_1 to i11

ST_23: tmp_13 [1/1] 0.00ns
:2  %tmp_13 = trunc i39 %cp_rec to i11

ST_23: cp_sum [1/1] 1.84ns
:3  %cp_sum = add i11 %tmp_13, %tmp_32

ST_23: cp_sum_cast [1/1] 0.00ns
:4  %cp_sum_cast = zext i11 %cp_sum to i64

ST_23: c_addr_4 [1/1] 0.00ns
:5  %c_addr_4 = getelementptr [512 x double]* %c, i64 0, i64 %cp_sum_cast

ST_23: tmp_33 [1/1] 0.00ns
:7  %tmp_33 = or i8 %i0_1, 1

ST_23: tmp_37_cast [1/1] 0.00ns
:8  %tmp_37_cast = zext i8 %tmp_33 to i11

ST_23: cp_sum9 [1/1] 1.84ns
:9  %cp_sum9 = add i11 %tmp_13, %tmp_37_cast

ST_23: cp_sum9_cast [1/1] 0.00ns
:10  %cp_sum9_cast = zext i11 %cp_sum9 to i64

ST_23: c_addr_5 [1/1] 0.00ns
:11  %c_addr_5 = getelementptr [512 x double]* %c, i64 0, i64 %cp_sum9_cast

ST_23: tmp_38_cast [1/1] 1.84ns
:13  %tmp_38_cast = add i11 %tmp_8, %tmp_32

ST_23: cp_sum1 [1/1] 1.84ns
:14  %cp_sum1 = add i11 %tmp_13, %tmp_38_cast

ST_23: cp_sum1_cast [1/1] 0.00ns
:15  %cp_sum1_cast = zext i11 %cp_sum1 to i64

ST_23: c_addr_6 [1/1] 0.00ns
:16  %c_addr_6 = getelementptr [512 x double]* %c, i64 0, i64 %cp_sum1_cast

ST_23: d1r [2/2] 2.71ns
:17  %d1r = load double* %c_addr_6, align 8

ST_23: tmp_40_cast [1/1] 0.00ns
:18  %tmp_40_cast = or i11 %tmp_38_cast, 1

ST_23: cp_sum2 [1/1] 1.84ns
:19  %cp_sum2 = add i11 %tmp_13, %tmp_40_cast

ST_23: cp_sum2_cast [1/1] 0.00ns
:20  %cp_sum2_cast = zext i11 %cp_sum2 to i64

ST_23: c_addr_7 [1/1] 0.00ns
:21  %c_addr_7 = getelementptr [512 x double]* %c, i64 0, i64 %cp_sum2_cast

ST_23: d1i [2/2] 2.71ns
:22  %d1i = load double* %c_addr_7, align 8

ST_23: tmp_42 [6/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_23: tmp_43 [6/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_23: tmp_44 [6/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_23: tmp_45 [6/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 24>: 7.79ns
ST_24: d1r [1/2] 2.71ns
:17  %d1r = load double* %c_addr_6, align 8

ST_24: d1i [1/2] 2.71ns
:22  %d1i = load double* %c_addr_7, align 8

ST_24: tmp_42 [5/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_24: tmp_43 [5/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_24: tmp_44 [5/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_24: tmp_45 [5/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 25>: 7.79ns
ST_25: tmp_34 [6/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_25: tmp_35 [6/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_25: tmp_36 [6/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_25: tmp_37 [6/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_25: tmp_42 [4/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_25: tmp_43 [4/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_25: tmp_44 [4/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_25: tmp_45 [4/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 26>: 7.79ns
ST_26: tmp_34 [5/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_26: tmp_35 [5/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_26: tmp_36 [5/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_26: tmp_37 [5/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_26: tmp_42 [3/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_26: tmp_43 [3/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_26: tmp_44 [3/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_26: tmp_45 [3/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 27>: 7.79ns
ST_27: tmp_34 [4/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_27: tmp_35 [4/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_27: tmp_36 [4/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_27: tmp_37 [4/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_27: tmp_42 [2/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_27: tmp_43 [2/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_27: tmp_44 [2/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_27: tmp_45 [2/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 28>: 7.79ns
ST_28: tmp_34 [3/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_28: tmp_35 [3/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_28: tmp_36 [3/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_28: tmp_37 [3/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_28: tmp_42 [1/6] 7.79ns
:37  %tmp_42 = fmul double %wr, %d_1

ST_28: tmp_43 [1/6] 7.79ns
:38  %tmp_43 = fmul double %wik, %wi_1

ST_28: tmp_44 [1/6] 7.79ns
:40  %tmp_44 = fmul double %wr, %wik

ST_28: tmp_45 [1/6] 7.79ns
:41  %tmp_45 = fmul double %d_1, %wi_1


 <State 29>: 8.23ns
ST_29: tmp_34 [2/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_29: tmp_35 [2/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_29: tmp_36 [2/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_29: tmp_37 [2/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_29: wrk [5/5] 8.23ns
:39  %wrk = fsub double %tmp_42, %tmp_43

ST_29: wik_1 [5/5] 8.23ns
:42  %wik_1 = fadd double %tmp_44, %tmp_45


 <State 30>: 8.23ns
ST_30: tmp_34 [1/6] 7.79ns
:23  %tmp_34 = fmul double %d_1, %d1r

ST_30: tmp_35 [1/6] 7.79ns
:24  %tmp_35 = fmul double %wik, %d1i

ST_30: tmp_36 [1/6] 7.79ns
:26  %tmp_36 = fmul double %d_1, %d1i

ST_30: tmp_37 [1/6] 7.79ns
:27  %tmp_37 = fmul double %wik, %d1r

ST_30: wrk [4/5] 8.23ns
:39  %wrk = fsub double %tmp_42, %tmp_43

ST_30: wik_1 [4/5] 8.23ns
:42  %wik_1 = fadd double %tmp_44, %tmp_45


 <State 31>: 8.23ns
ST_31: dr_1 [5/5] 8.23ns
:25  %dr_1 = fsub double %tmp_34, %tmp_35

ST_31: di_1 [5/5] 8.23ns
:28  %di_1 = fadd double %tmp_36, %tmp_37

ST_31: wrk [3/5] 8.23ns
:39  %wrk = fsub double %tmp_42, %tmp_43

ST_31: wik_1 [3/5] 8.23ns
:42  %wik_1 = fadd double %tmp_44, %tmp_45


 <State 32>: 8.23ns
ST_32: dr_1 [4/5] 8.23ns
:25  %dr_1 = fsub double %tmp_34, %tmp_35

ST_32: di_1 [4/5] 8.23ns
:28  %di_1 = fadd double %tmp_36, %tmp_37

ST_32: wrk [2/5] 8.23ns
:39  %wrk = fsub double %tmp_42, %tmp_43

ST_32: wik_1 [2/5] 8.23ns
:42  %wik_1 = fadd double %tmp_44, %tmp_45


 <State 33>: 8.23ns
ST_33: dr_1 [3/5] 8.23ns
:25  %dr_1 = fsub double %tmp_34, %tmp_35

ST_33: di_1 [3/5] 8.23ns
:28  %di_1 = fadd double %tmp_36, %tmp_37

ST_33: wrk [1/5] 8.23ns
:39  %wrk = fsub double %tmp_42, %tmp_43

ST_33: wik_1 [1/5] 8.23ns
:42  %wik_1 = fadd double %tmp_44, %tmp_45


 <State 34>: 8.23ns
ST_34: d0r [2/2] 2.71ns
:6  %d0r = load double* %c_addr_4, align 8

ST_34: dr_1 [2/5] 8.23ns
:25  %dr_1 = fsub double %tmp_34, %tmp_35

ST_34: di_1 [2/5] 8.23ns
:28  %di_1 = fadd double %tmp_36, %tmp_37


 <State 35>: 8.23ns
ST_35: d0r [1/2] 2.71ns
:6  %d0r = load double* %c_addr_4, align 8

ST_35: d0i [2/2] 2.71ns
:12  %d0i = load double* %c_addr_5, align 8

ST_35: dr_1 [1/5] 8.23ns
:25  %dr_1 = fsub double %tmp_34, %tmp_35

ST_35: di_1 [1/5] 8.23ns
:28  %di_1 = fadd double %tmp_36, %tmp_37


 <State 36>: 8.23ns
ST_36: d0i [1/2] 2.71ns
:12  %d0i = load double* %c_addr_5, align 8

ST_36: tmp_38 [5/5] 8.23ns
:29  %tmp_38 = fadd double %d0r, %dr_1

ST_36: tmp_40 [5/5] 8.23ns
:33  %tmp_40 = fsub double %d0r, %dr_1


 <State 37>: 8.23ns
ST_37: tmp_38 [4/5] 8.23ns
:29  %tmp_38 = fadd double %d0r, %dr_1

ST_37: tmp_39 [5/5] 8.23ns
:31  %tmp_39 = fadd double %d0i, %di_1

ST_37: tmp_40 [4/5] 8.23ns
:33  %tmp_40 = fsub double %d0r, %dr_1

ST_37: tmp_41 [5/5] 8.23ns
:35  %tmp_41 = fsub double %d0i, %di_1


 <State 38>: 8.23ns
ST_38: tmp_38 [3/5] 8.23ns
:29  %tmp_38 = fadd double %d0r, %dr_1

ST_38: tmp_39 [4/5] 8.23ns
:31  %tmp_39 = fadd double %d0i, %di_1

ST_38: tmp_40 [3/5] 8.23ns
:33  %tmp_40 = fsub double %d0r, %dr_1

ST_38: tmp_41 [4/5] 8.23ns
:35  %tmp_41 = fsub double %d0i, %di_1


 <State 39>: 8.23ns
ST_39: tmp_38 [2/5] 8.23ns
:29  %tmp_38 = fadd double %d0r, %dr_1

ST_39: tmp_39 [3/5] 8.23ns
:31  %tmp_39 = fadd double %d0i, %di_1

ST_39: tmp_40 [2/5] 8.23ns
:33  %tmp_40 = fsub double %d0r, %dr_1

ST_39: tmp_41 [3/5] 8.23ns
:35  %tmp_41 = fsub double %d0i, %di_1


 <State 40>: 8.23ns
ST_40: tmp_38 [1/5] 8.23ns
:29  %tmp_38 = fadd double %d0r, %dr_1

ST_40: tmp_39 [2/5] 8.23ns
:31  %tmp_39 = fadd double %d0i, %di_1

ST_40: tmp_40 [1/5] 8.23ns
:33  %tmp_40 = fsub double %d0r, %dr_1

ST_40: tmp_41 [2/5] 8.23ns
:35  %tmp_41 = fsub double %d0i, %di_1


 <State 41>: 8.23ns
ST_41: stg_269 [1/1] 2.71ns
:30  store double %tmp_38, double* %c_addr_4, align 8

ST_41: tmp_39 [1/5] 8.23ns
:31  %tmp_39 = fadd double %d0i, %di_1

ST_41: tmp_41 [1/5] 8.23ns
:35  %tmp_41 = fsub double %d0i, %di_1


 <State 42>: 2.71ns
ST_42: stg_272 [1/1] 2.71ns
:32  store double %tmp_39, double* %c_addr_5, align 8


 <State 43>: 2.71ns
ST_43: stg_273 [1/1] 2.71ns
:34  store double %tmp_40, double* %c_addr_6, align 8


 <State 44>: 2.71ns
ST_44: stg_274 [1/1] 2.71ns
:36  store double %tmp_41, double* %c_addr_7, align 8

ST_44: stg_275 [1/1] 0.00ns
:43  br label %.preheader


 <State 45>: 2.68ns
ST_45: cp_s [1/1] 0.00ns
._crit_edge7:0  %cp_s = phi i32 [ 0, %7 ], [ %n_3, %.preheader ]

ST_45: cp_cast [1/1] 0.00ns
._crit_edge7:1  %cp_cast = sext i32 %cp_s to i39

ST_45: cp_addr_rec [1/1] 2.68ns
._crit_edge7:2  %cp_addr_rec = add i39 %cp_cast, %cp_rec

ST_45: stg_279 [1/1] 0.00ns
._crit_edge7:3  br label %6



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
