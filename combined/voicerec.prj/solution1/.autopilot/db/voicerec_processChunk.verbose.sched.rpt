

================================================================
== Vivado HLS Report for 'voicerec_processChunk'
================================================================
* Date:           Sun Dec  6 14:07:47 2015

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        voicerec.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.23|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1     |     ?|     ?|         2|          -|          -|     ?|    no    |
        |- Loop 2     |     ?|     ?|        20|          -|          -|     ?|    no    |
        |- Loop 3     |    26|    26|         1|          -|          -|    26|    no    |
        |- Loop 4     |     ?|     ?|  5 ~ 18  |          -|          -|     ?|    no    |
        |- Loop 5     |   130|   936|  5 ~ 36  |          -|          -|    26|    no    |
        |- Loop 6     |  7028|  7028|       502|          -|          -|    14|    no    |
        | + Loop 6.1  |   494|   494|        19|          -|          -|    26|    no    |
        +-------------+------+------+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 105
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp)
	4  / (!tmp)
3 --> 
	2  / true
4 --> 
	5  / true
5 --> 
	6  / (tmp_64)
	25  / (!tmp_64)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	5  / true
25 --> 
	26  / (exitcond1)
	25  / (!exitcond1)
26 --> 
	27  / (tmp_74)
	44  / (!tmp_74)
27 --> 
	28  / (tmp_77)
	34  / (!tmp_77)
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / (tmp_80)
	42  / (!tmp_80)
35 --> 
	36  / (!tmp_84)
	42  / (tmp_84)
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	26  / true
44 --> 
	45  / (!exitcond)
	80  / (exitcond)
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / (!tmp_48)
	79  / (tmp_48)
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	44  / true
80 --> 
	81  / (!exitcond3_i)
81 --> 
	82  / (!exitcond_i)
	100  / (exitcond_i)
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	81  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	80  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: tmp_122_read [1/1] 0.00ns
:0  %tmp_122_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %tmp_122)

ST_1: np_read [1/1] 0.00ns
:1  %np_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %np)

ST_1: sp_read [1/1] 0.00ns
:2  %sp_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %sp)

ST_1: stg_109 [1/1] 1.57ns
:3  br label %1


 <State 2>: 5.15ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i31 [ 0, %0 ], [ %i_5, %2 ]

ST_2: i_cast [1/1] 0.00ns
:1  %i_cast = zext i31 %i to i32

ST_2: tmp [1/1] 2.52ns
:2  %tmp = icmp slt i32 %i_cast, %np_read

ST_2: i_5 [1/1] 2.44ns
:3  %i_5 = add i31 %i, 1

ST_2: stg_114 [1/1] 0.00ns
:4  br i1 %tmp, label %2, label %3

ST_2: tmp_s [1/1] 2.44ns
:0  %tmp_s = add nsw i32 %i_cast, %sp_read

ST_2: tmp_59 [1/1] 0.00ns
:1  %tmp_59 = sext i32 %tmp_s to i64

ST_2: inputSound_addr [1/1] 0.00ns
:2  %inputSound_addr = getelementptr [8000 x double]* %inputSound, i64 0, i64 %tmp_59

ST_2: inputSound_load [2/2] 2.71ns
:3  %inputSound_load = load double* %inputSound_addr, align 8

ST_2: stg_119 [2/2] 0.00ns
:0  call fastcc void @voicerec_FFT([512 x double]* @c, i32 %np_read)


 <State 3>: 5.42ns
ST_3: inputSound_load [1/2] 2.71ns
:3  %inputSound_load = load double* %inputSound_addr, align 8

ST_3: tmp_60 [1/1] 0.00ns
:4  %tmp_60 = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 %i, i1 false)

ST_3: tmp_61 [1/1] 0.00ns
:5  %tmp_61 = sext i32 %tmp_60 to i64

ST_3: c_addr [1/1] 0.00ns
:6  %c_addr = getelementptr inbounds [512 x double]* @c, i64 0, i64 %tmp_61

ST_3: stg_124 [1/1] 2.71ns
:7  store double %inputSound_load, double* %c_addr, align 16

ST_3: tmp_62 [1/1] 0.00ns
:8  %tmp_62 = or i32 %tmp_60, 1

ST_3: tmp_63 [1/1] 0.00ns
:9  %tmp_63 = sext i32 %tmp_62 to i64

ST_3: c_addr_8 [1/1] 0.00ns
:10  %c_addr_8 = getelementptr inbounds [512 x double]* @c, i64 0, i64 %tmp_63

ST_3: stg_128 [1/1] 2.71ns
:11  store double 0.000000e+00, double* %c_addr_8, align 8

ST_3: stg_129 [1/1] 0.00ns
:12  br label %1


 <State 4>: 1.57ns
ST_4: stg_130 [1/2] 0.00ns
:0  call fastcc void @voicerec_FFT([512 x double]* @c, i32 %np_read)

ST_4: stg_131 [1/1] 1.57ns
:1  br label %4


 <State 5>: 4.09ns
ST_5: i_1 [1/1] 0.00ns
:0  %i_1 = phi i31 [ 0, %3 ], [ %i_6, %5 ]

ST_5: i_1_cast [1/1] 0.00ns
:1  %i_1_cast = zext i31 %i_1 to i32

ST_5: tmp_64 [1/1] 2.52ns
:2  %tmp_64 = icmp slt i32 %i_1_cast, %np_read

ST_5: i_6 [1/1] 2.44ns
:3  %i_6 = add i31 %i_1, 1

ST_5: stg_136 [1/1] 1.57ns
:4  br i1 %tmp_64, label %5, label %.preheader3

ST_5: tmp_65 [1/1] 0.00ns
:0  %tmp_65 = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 %i_1, i1 false)

ST_5: tmp_66 [1/1] 0.00ns
:1  %tmp_66 = sext i32 %tmp_65 to i64

ST_5: c_addr_9 [1/1] 0.00ns
:2  %c_addr_9 = getelementptr inbounds [512 x double]* @c, i64 0, i64 %tmp_66

ST_5: c_load [2/2] 2.71ns
:3  %c_load = load double* %c_addr_9, align 16

ST_5: tmp_68 [1/1] 0.00ns
:5  %tmp_68 = or i32 %tmp_65, 1

ST_5: tmp_69 [1/1] 0.00ns
:6  %tmp_69 = sext i32 %tmp_68 to i64

ST_5: c_addr_10 [1/1] 0.00ns
:7  %c_addr_10 = getelementptr inbounds [512 x double]* @c, i64 0, i64 %tmp_69

ST_5: c_load_6 [2/2] 2.71ns
:8  %c_load_6 = load double* %c_addr_10, align 8


 <State 6>: 2.71ns
ST_6: c_load [1/2] 2.71ns
:3  %c_load = load double* %c_addr_9, align 16

ST_6: c_load_6 [1/2] 2.71ns
:8  %c_load_6 = load double* %c_addr_10, align 8


 <State 7>: 7.79ns
ST_7: tmp_67 [6/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_7: tmp_70 [6/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 8>: 7.79ns
ST_8: tmp_67 [5/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_8: tmp_70 [5/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 9>: 7.79ns
ST_9: tmp_67 [4/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_9: tmp_70 [4/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 10>: 7.79ns
ST_10: tmp_67 [3/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_10: tmp_70 [3/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 11>: 7.79ns
ST_11: tmp_67 [2/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_11: tmp_70 [2/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 12>: 7.79ns
ST_12: tmp_67 [1/6] 7.79ns
:4  %tmp_67 = fmul double %c_load, %c_load

ST_12: tmp_70 [1/6] 7.79ns
:9  %tmp_70 = fmul double %c_load_6, %c_load_6


 <State 13>: 8.23ns
ST_13: tmp_71 [5/5] 8.23ns
:10  %tmp_71 = fadd double %tmp_67, %tmp_70


 <State 14>: 8.23ns
ST_14: tmp_71 [4/5] 8.23ns
:10  %tmp_71 = fadd double %tmp_67, %tmp_70


 <State 15>: 8.23ns
ST_15: tmp_71 [3/5] 8.23ns
:10  %tmp_71 = fadd double %tmp_67, %tmp_70


 <State 16>: 8.23ns
ST_16: tmp_71 [2/5] 8.23ns
:10  %tmp_71 = fadd double %tmp_67, %tmp_70


 <State 17>: 8.23ns
ST_17: tmp_71 [1/5] 8.23ns
:10  %tmp_71 = fadd double %tmp_67, %tmp_70


 <State 18>: 7.79ns
ST_18: tmp_72 [6/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 19>: 7.79ns
ST_19: tmp_72 [5/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 20>: 7.79ns
ST_20: tmp_72 [4/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 21>: 7.79ns
ST_21: tmp_72 [3/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 22>: 7.79ns
ST_22: tmp_72 [2/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 23>: 7.79ns
ST_23: tmp_72 [1/6] 7.79ns
:11  %tmp_72 = fmul double %tmp_71, 3.906250e-03


 <State 24>: 2.71ns
ST_24: tmp_73 [1/1] 0.00ns
:12  %tmp_73 = zext i31 %i_1 to i64

ST_24: d_addr [1/1] 0.00ns
:13  %d_addr = getelementptr inbounds [256 x double]* @d, i64 0, i64 %tmp_73

ST_24: stg_172 [1/1] 2.71ns
:14  store double %tmp_72, double* %d_addr, align 8

ST_24: stg_173 [1/1] 0.00ns
:15  br label %4


 <State 25>: 3.48ns
ST_25: i_2 [1/1] 0.00ns
.preheader3:0  %i_2 = phi i5 [ %i_7, %6 ], [ 0, %4 ]

ST_25: exitcond1 [1/1] 1.91ns
.preheader3:1  %exitcond1 = icmp eq i5 %i_2, -6

ST_25: empty [1/1] 0.00ns
.preheader3:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 26, i64 26, i64 26)

ST_25: i_7 [1/1] 1.72ns
.preheader3:3  %i_7 = add i5 %i_2, 1

ST_25: stg_178 [1/1] 1.57ns
.preheader3:4  br i1 %exitcond1, label %.preheader2, label %6

ST_25: tmp_75 [1/1] 0.00ns
:0  %tmp_75 = zext i5 %i_2 to i64

ST_25: e_addr [1/1] 0.00ns
:1  %e_addr = getelementptr inbounds [26 x double]* @e, i64 0, i64 %tmp_75

ST_25: stg_181 [1/1] 2.71ns
:2  store double 0.000000e+00, double* %e_addr, align 8

ST_25: stg_182 [1/1] 0.00ns
:3  br label %.preheader3


 <State 26>: 4.09ns
ST_26: i_3 [1/1] 0.00ns
.preheader2:0  %i_3 = phi i31 [ %i_9, %._crit_edge4 ], [ 0, %.preheader3 ]

ST_26: mellIdx [1/1] 0.00ns
.preheader2:1  %mellIdx = phi i32 [ %p_mellIdx, %._crit_edge4 ], [ 0, %.preheader3 ]

ST_26: i_3_cast [1/1] 0.00ns
.preheader2:2  %i_3_cast = zext i31 %i_3 to i32

ST_26: tmp_74 [1/1] 2.52ns
.preheader2:3  %tmp_74 = icmp slt i32 %i_3_cast, %np_read

ST_26: i_9 [1/1] 2.44ns
.preheader2:4  %i_9 = add i31 %i_3, 1

ST_26: stg_188 [1/1] 1.57ns
.preheader2:5  br i1 %tmp_74, label %7, label %.preheader

ST_26: tmp_76 [1/1] 0.00ns
:0  %tmp_76 = sext i32 %mellIdx to i64

ST_26: mell_addr [1/1] 0.00ns
:1  %mell_addr = getelementptr [27 x i8]* @mell, i64 0, i64 %tmp_76

ST_26: mell_load [2/2] 2.39ns
:2  %mell_load = load i8* %mell_addr, align 1


 <State 27>: 4.89ns
ST_27: mell_load [1/2] 2.39ns
:2  %mell_load = load i8* %mell_addr, align 1

ST_27: mell_load_cast [1/1] 0.00ns
:3  %mell_load_cast = zext i8 %mell_load to i32

ST_27: mell_load_cast_cast [1/1] 0.00ns
:4  %mell_load_cast_cast = zext i8 %mell_load to i31

ST_27: tmp_77 [1/1] 2.50ns
:5  %tmp_77 = icmp eq i32 %i_3_cast, %mell_load_cast

ST_27: stg_196 [1/1] 0.00ns
:6  br i1 %tmp_77, label %8, label %._crit_edge

ST_27: tmp_78 [1/1] 0.00ns
:0  %tmp_78 = zext i31 %i_3 to i64

ST_27: d_addr_1 [1/1] 0.00ns
:1  %d_addr_1 = getelementptr inbounds [256 x double]* @d, i64 0, i64 %tmp_78

ST_27: d_load [2/2] 2.71ns
:2  %d_load = load double* %d_addr_1, align 8

ST_27: e_load [2/2] 2.71ns
:3  %e_load = load double* getelementptr inbounds ([26 x double]* @e, i64 0, i64 0), align 16


 <State 28>: 2.71ns
ST_28: d_load [1/2] 2.71ns
:2  %d_load = load double* %d_addr_1, align 8

ST_28: e_load [1/2] 2.71ns
:3  %e_load = load double* getelementptr inbounds ([26 x double]* @e, i64 0, i64 0), align 16


 <State 29>: 8.23ns
ST_29: tmp_79 [5/5] 8.23ns
:4  %tmp_79 = fadd double %e_load, %d_load


 <State 30>: 8.23ns
ST_30: tmp_79 [4/5] 8.23ns
:4  %tmp_79 = fadd double %e_load, %d_load


 <State 31>: 8.23ns
ST_31: tmp_79 [3/5] 8.23ns
:4  %tmp_79 = fadd double %e_load, %d_load


 <State 32>: 8.23ns
ST_32: tmp_79 [2/5] 8.23ns
:4  %tmp_79 = fadd double %e_load, %d_load


 <State 33>: 8.23ns
ST_33: tmp_79 [1/5] 8.23ns
:4  %tmp_79 = fadd double %e_load, %d_load


 <State 34>: 4.83ns
ST_34: stg_208 [1/1] 2.71ns
:5  store double %tmp_79, double* getelementptr inbounds ([26 x double]* @e, i64 0, i64 0), align 16

ST_34: stg_209 [1/1] 0.00ns
:6  br label %._crit_edge

ST_34: tmp_80 [1/1] 2.50ns
._crit_edge:0  %tmp_80 = icmp ugt i31 %i_3, %mell_load_cast_cast

ST_34: stg_211 [1/1] 0.00ns
._crit_edge:1  br i1 %tmp_80, label %9, label %._crit_edge4

ST_34: tmp_82 [1/1] 2.44ns
:0  %tmp_82 = add nsw i32 %mellIdx, 1

ST_34: tmp_83 [1/1] 0.00ns
:1  %tmp_83 = sext i32 %tmp_82 to i64

ST_34: mell_addr_1 [1/1] 0.00ns
:2  %mell_addr_1 = getelementptr [27 x i8]* @mell, i64 0, i64 %tmp_83

ST_34: mell_load_1 [2/2] 2.39ns
:3  %mell_load_1 = load i8* %mell_addr_1, align 1


 <State 35>: 4.89ns
ST_35: mell_load_1 [1/2] 2.39ns
:3  %mell_load_1 = load i8* %mell_addr_1, align 1

ST_35: mell_load_1_cast_cast [1/1] 0.00ns
:4  %mell_load_1_cast_cast = zext i8 %mell_load_1 to i31

ST_35: tmp_84 [1/1] 2.50ns
:5  %tmp_84 = icmp ugt i31 %i_3, %mell_load_1_cast_cast

ST_35: stg_219 [1/1] 0.00ns
:6  br i1 %tmp_84, label %._crit_edge4, label %10

ST_35: tmp_86 [1/1] 0.00ns
:0  %tmp_86 = zext i31 %i_3 to i64

ST_35: d_addr_2 [1/1] 0.00ns
:1  %d_addr_2 = getelementptr inbounds [256 x double]* @d, i64 0, i64 %tmp_86

ST_35: d_load_1 [2/2] 2.71ns
:2  %d_load_1 = load double* %d_addr_2, align 8

ST_35: e_addr_2 [1/1] 0.00ns
:3  %e_addr_2 = getelementptr inbounds [26 x double]* @e, i64 0, i64 %tmp_76

ST_35: e_load_2 [2/2] 2.71ns
:4  %e_load_2 = load double* %e_addr_2, align 8


 <State 36>: 2.71ns
ST_36: d_load_1 [1/2] 2.71ns
:2  %d_load_1 = load double* %d_addr_2, align 8

ST_36: e_load_2 [1/2] 2.71ns
:4  %e_load_2 = load double* %e_addr_2, align 8


 <State 37>: 8.23ns
ST_37: tmp_87 [5/5] 8.23ns
:5  %tmp_87 = fadd double %e_load_2, %d_load_1


 <State 38>: 8.23ns
ST_38: tmp_87 [4/5] 8.23ns
:5  %tmp_87 = fadd double %e_load_2, %d_load_1


 <State 39>: 8.23ns
ST_39: tmp_87 [3/5] 8.23ns
:5  %tmp_87 = fadd double %e_load_2, %d_load_1


 <State 40>: 8.23ns
ST_40: tmp_87 [2/5] 8.23ns
:5  %tmp_87 = fadd double %e_load_2, %d_load_1


 <State 41>: 8.23ns
ST_41: tmp_87 [1/5] 8.23ns
:5  %tmp_87 = fadd double %e_load_2, %d_load_1


 <State 42>: 4.83ns
ST_42: stg_232 [1/1] 2.71ns
:6  store double %tmp_87, double* %e_addr_2, align 8

ST_42: stg_233 [1/1] 0.00ns
:7  br label %._crit_edge4

ST_42: mellIdx_1 [1/1] 2.44ns
._crit_edge4:0  %mellIdx_1 = add nsw i32 %mellIdx, 1

ST_42: tmp_88 [1/1] 0.00ns
._crit_edge4:1  %tmp_88 = sext i32 %mellIdx_1 to i64

ST_42: mell_addr_2 [1/1] 0.00ns
._crit_edge4:2  %mell_addr_2 = getelementptr [27 x i8]* @mell, i64 0, i64 %tmp_88

ST_42: mell_load_2 [2/2] 2.39ns
._crit_edge4:3  %mell_load_2 = load i8* %mell_addr_2, align 1


 <State 43>: 6.26ns
ST_43: mell_load_2 [1/2] 2.39ns
._crit_edge4:3  %mell_load_2 = load i8* %mell_addr_2, align 1

ST_43: mell_load_2_cast [1/1] 0.00ns
._crit_edge4:4  %mell_load_2_cast = zext i8 %mell_load_2 to i32

ST_43: tmp_89 [1/1] 2.50ns
._crit_edge4:5  %tmp_89 = icmp eq i32 %i_3_cast, %mell_load_2_cast

ST_43: p_mellIdx [1/1] 1.37ns
._crit_edge4:6  %p_mellIdx = select i1 %tmp_89, i32 %mellIdx_1, i32 %mellIdx

ST_43: stg_242 [1/1] 0.00ns
._crit_edge4:7  br label %.preheader2


 <State 44>: 2.71ns
ST_44: i_4 [1/1] 0.00ns
.preheader:0  %i_4 = phi i5 [ %i_8, %13 ], [ 0, %.preheader2 ]

ST_44: exitcond [1/1] 1.91ns
.preheader:1  %exitcond = icmp eq i5 %i_4, -6

ST_44: empty_19 [1/1] 0.00ns
.preheader:2  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 26, i64 26, i64 26)

ST_44: i_8 [1/1] 1.72ns
.preheader:3  %i_8 = add i5 %i_4, 1

ST_44: stg_247 [1/1] 0.00ns
.preheader:4  br i1 %exitcond, label %.preheader4.preheader, label %11

ST_44: tmp_81 [1/1] 0.00ns
:0  %tmp_81 = zext i5 %i_4 to i64

ST_44: e_addr_1 [1/1] 0.00ns
:1  %e_addr_1 = getelementptr inbounds [26 x double]* @e, i64 0, i64 %tmp_81

ST_44: e_load_1 [2/2] 2.71ns
:2  %e_load_1 = load double* %e_addr_1, align 8

ST_44: tmp_33 [1/1] 0.00ns
.preheader4.preheader:0  %tmp_33 = shl i32 %tmp_122_read, 4

ST_44: tmp_34 [1/1] 0.00ns
.preheader4.preheader:1  %tmp_34 = shl i32 %tmp_122_read, 1

ST_44: p_addr [1/1] 2.44ns
.preheader4.preheader:2  %p_addr = sub i32 %tmp_33, %tmp_34

ST_44: stg_254 [1/1] 1.57ns
.preheader4.preheader:3  br label %.preheader4


 <State 45>: 2.71ns
ST_45: e_load_1 [1/2] 2.71ns
:2  %e_load_1 = load double* %e_addr_1, align 8


 <State 46>: 6.83ns
ST_46: tmp_47 [1/1] 6.83ns
:9  %tmp_47 = fcmp ole double %e_load_1, 0.000000e+00


 <State 47>: 6.95ns
ST_47: e_load_1_to_int [1/1] 0.00ns
:3  %e_load_1_to_int = bitcast double %e_load_1 to i64

ST_47: tmp_44 [1/1] 0.00ns
:4  %tmp_44 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %e_load_1_to_int, i32 52, i32 62)

ST_47: tmp_35 [1/1] 0.00ns
:5  %tmp_35 = trunc i64 %e_load_1_to_int to i52

ST_47: notlhs [1/1] 2.11ns
:6  %notlhs = icmp ne i11 %tmp_44, -1

ST_47: notrhs [1/1] 2.64ns
:7  %notrhs = icmp eq i52 %tmp_35, 0

ST_47: tmp_46 [1/1] 1.37ns
:8  %tmp_46 = or i1 %notrhs, %notlhs

ST_47: tmp_48 [1/1] 1.37ns
:10  %tmp_48 = and i1 %tmp_46, %tmp_47

ST_47: stg_264 [1/1] 1.57ns
:11  br i1 %tmp_48, label %13, label %12

ST_47: x_assign [1/1] 6.50ns
:0  %x_assign = fptrunc double %e_load_1 to float


 <State 48>: 7.26ns
ST_48: tmp_i_i [1/1] 0.00ns
:1  %tmp_i_i = bitcast float %x_assign to i32

ST_48: tmp_36 [1/1] 0.00ns
:2  %tmp_36 = trunc i32 %tmp_i_i to i23

ST_48: mx_i_i [1/1] 0.00ns
:3  %mx_i_i = call i30 @_ssdm_op_BitConcatenate.i30.i7.i23(i7 -2, i23 %tmp_36)

ST_48: mx_i_i_cast [1/1] 0.00ns
:4  %mx_i_i_cast = zext i30 %mx_i_i to i32

ST_48: tmp_i_i1 [1/1] 0.00ns
:5  %tmp_i_i1 = zext i32 %tmp_i_i to i64

ST_48: y [6/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_48: tmp_2_i_i [1/1] 0.00ns
:9  %tmp_2_i_i = bitcast i32 %mx_i_i_cast to float

ST_48: tmp_5_i_i [5/5] 7.26ns
:12  %tmp_5_i_i = fadd float %tmp_2_i_i, 0x3FD6889F20000000


 <State 49>: 7.26ns
ST_49: y [5/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_49: tmp_5_i_i [4/5] 7.26ns
:12  %tmp_5_i_i = fadd float %tmp_2_i_i, 0x3FD6889F20000000


 <State 50>: 7.26ns
ST_50: y [4/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_50: tmp_5_i_i [3/5] 7.26ns
:12  %tmp_5_i_i = fadd float %tmp_2_i_i, 0x3FD6889F20000000


 <State 51>: 7.26ns
ST_51: y [3/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_51: tmp_5_i_i [2/5] 7.26ns
:12  %tmp_5_i_i = fadd float %tmp_2_i_i, 0x3FD6889F20000000


 <State 52>: 7.26ns
ST_52: y [2/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_52: tmp_5_i_i [1/5] 7.26ns
:12  %tmp_5_i_i = fadd float %tmp_2_i_i, 0x3FD6889F20000000


 <State 53>: 6.41ns
ST_53: y [1/6] 6.41ns
:6  %y = sitofp i64 %tmp_i_i1 to float

ST_53: tmp_6_i_i [16/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 54>: 6.08ns
ST_54: y_1 [4/4] 5.70ns
:7  %y_1 = fmul float %y, 0x3E80000000000000

ST_54: tmp_6_i_i [15/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 55>: 6.08ns
ST_55: y_1 [3/4] 5.70ns
:7  %y_1 = fmul float %y, 0x3E80000000000000

ST_55: tmp_6_i_i [14/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 56>: 6.08ns
ST_56: y_1 [2/4] 5.70ns
:7  %y_1 = fmul float %y, 0x3E80000000000000

ST_56: tmp_6_i_i [13/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 57>: 6.08ns
ST_57: y_1 [1/4] 5.70ns
:7  %y_1 = fmul float %y, 0x3E80000000000000

ST_57: tmp_6_i_i [12/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 58>: 7.26ns
ST_58: tmp_1_i_i [5/5] 7.26ns
:8  %tmp_1_i_i = fadd float %y_1, 0xC05F0E6EE0000000

ST_58: tmp_6_i_i [11/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 59>: 7.26ns
ST_59: tmp_1_i_i [4/5] 7.26ns
:8  %tmp_1_i_i = fadd float %y_1, 0xC05F0E6EE0000000

ST_59: tmp_3_i_i [4/4] 5.70ns
:10  %tmp_3_i_i = fmul float %tmp_2_i_i, 0x3FF7F7EEA0000000

ST_59: tmp_6_i_i [10/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 60>: 7.26ns
ST_60: tmp_1_i_i [3/5] 7.26ns
:8  %tmp_1_i_i = fadd float %y_1, 0xC05F0E6EE0000000

ST_60: tmp_3_i_i [3/4] 5.70ns
:10  %tmp_3_i_i = fmul float %tmp_2_i_i, 0x3FF7F7EEA0000000

ST_60: tmp_6_i_i [9/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 61>: 7.26ns
ST_61: tmp_1_i_i [2/5] 7.26ns
:8  %tmp_1_i_i = fadd float %y_1, 0xC05F0E6EE0000000

ST_61: tmp_3_i_i [2/4] 5.70ns
:10  %tmp_3_i_i = fmul float %tmp_2_i_i, 0x3FF7F7EEA0000000

ST_61: tmp_6_i_i [8/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 62>: 7.26ns
ST_62: tmp_1_i_i [1/5] 7.26ns
:8  %tmp_1_i_i = fadd float %y_1, 0xC05F0E6EE0000000

ST_62: tmp_3_i_i [1/4] 5.70ns
:10  %tmp_3_i_i = fmul float %tmp_2_i_i, 0x3FF7F7EEA0000000

ST_62: tmp_6_i_i [7/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 63>: 7.26ns
ST_63: tmp_4_i_i [5/5] 7.26ns
:11  %tmp_4_i_i = fsub float %tmp_1_i_i, %tmp_3_i_i

ST_63: tmp_6_i_i [6/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 64>: 7.26ns
ST_64: tmp_4_i_i [4/5] 7.26ns
:11  %tmp_4_i_i = fsub float %tmp_1_i_i, %tmp_3_i_i

ST_64: tmp_6_i_i [5/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 65>: 7.26ns
ST_65: tmp_4_i_i [3/5] 7.26ns
:11  %tmp_4_i_i = fsub float %tmp_1_i_i, %tmp_3_i_i

ST_65: tmp_6_i_i [4/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 66>: 7.26ns
ST_66: tmp_4_i_i [2/5] 7.26ns
:11  %tmp_4_i_i = fsub float %tmp_1_i_i, %tmp_3_i_i

ST_66: tmp_6_i_i [3/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 67>: 7.26ns
ST_67: tmp_4_i_i [1/5] 7.26ns
:11  %tmp_4_i_i = fsub float %tmp_1_i_i, %tmp_3_i_i

ST_67: tmp_6_i_i [2/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 68>: 6.08ns
ST_68: tmp_6_i_i [1/16] 6.08ns
:13  %tmp_6_i_i = fdiv float 0x3FFB9D3460000000, %tmp_5_i_i


 <State 69>: 7.26ns
ST_69: tmp_7_i_i [5/5] 7.26ns
:14  %tmp_7_i_i = fsub float %tmp_4_i_i, %tmp_6_i_i


 <State 70>: 7.26ns
ST_70: tmp_7_i_i [4/5] 7.26ns
:14  %tmp_7_i_i = fsub float %tmp_4_i_i, %tmp_6_i_i


 <State 71>: 7.26ns
ST_71: tmp_7_i_i [3/5] 7.26ns
:14  %tmp_7_i_i = fsub float %tmp_4_i_i, %tmp_6_i_i


 <State 72>: 7.26ns
ST_72: tmp_7_i_i [2/5] 7.26ns
:14  %tmp_7_i_i = fsub float %tmp_4_i_i, %tmp_6_i_i


 <State 73>: 7.26ns
ST_73: tmp_7_i_i [1/5] 7.26ns
:14  %tmp_7_i_i = fsub float %tmp_4_i_i, %tmp_6_i_i


 <State 74>: 5.70ns
ST_74: tmp_i [4/4] 5.70ns
:15  %tmp_i = fmul float %tmp_7_i_i, 0x3FE62E4300000000


 <State 75>: 5.70ns
ST_75: tmp_i [3/4] 5.70ns
:15  %tmp_i = fmul float %tmp_7_i_i, 0x3FE62E4300000000


 <State 76>: 5.70ns
ST_76: tmp_i [2/4] 5.70ns
:15  %tmp_i = fmul float %tmp_7_i_i, 0x3FE62E4300000000


 <State 77>: 5.70ns
ST_77: tmp_i [1/4] 5.70ns
:15  %tmp_i = fmul float %tmp_7_i_i, 0x3FE62E4300000000


 <State 78>: 7.12ns
ST_78: tmp_85 [1/1] 5.55ns
:16  %tmp_85 = fpext float %tmp_i to double

ST_78: stg_327 [1/1] 1.57ns
:17  br label %13


 <State 79>: 2.71ns
ST_79: storemerge [1/1] 0.00ns
:0  %storemerge = phi double [ %tmp_85, %12 ], [ 0.000000e+00, %11 ]

ST_79: stg_329 [1/1] 2.71ns
:1  store double %storemerge, double* %e_addr_1, align 8

ST_79: stg_330 [1/1] 0.00ns
:2  br label %.preheader


 <State 80>: 3.25ns
ST_80: k_i [1/1] 0.00ns
.preheader4:0  %k_i = phi i4 [ %k, %17 ], [ 0, %.preheader4.preheader ]

ST_80: phi_mul [1/1] 0.00ns
.preheader4:1  %phi_mul = phi i9 [ %next_mul, %17 ], [ 0, %.preheader4.preheader ]

ST_80: next_mul [1/1] 1.84ns
.preheader4:2  %next_mul = add i9 %phi_mul, 26

ST_80: exitcond3_i [1/1] 1.88ns
.preheader4:3  %exitcond3_i = icmp eq i4 %k_i, -2

ST_80: empty_20 [1/1] 0.00ns
.preheader4:4  %empty_20 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 14, i64 14, i64 14)

ST_80: k [1/1] 0.80ns
.preheader4:5  %k = add i4 %k_i, 1

ST_80: stg_337 [1/1] 0.00ns
.preheader4:6  br i1 %exitcond3_i, label %dct_ii.exit, label %14

ST_80: tmp_i1 [1/1] 1.88ns
:0  %tmp_i1 = icmp eq i4 %k_i, 0

ST_80: s [1/1] 1.37ns
:1  %s = select i1 %tmp_i1, double 0x3FE6A09E667F3BD1, double 1.000000e+00

ST_80: tmp_27_i_trn2 [1/1] 0.00ns
:2  %tmp_27_i_trn2 = zext i4 %k_i to i32

ST_80: stg_341 [1/1] 1.57ns
:3  br label %15

ST_80: stg_342 [1/1] 0.00ns
dct_ii.exit:0  ret void


 <State 81>: 7.79ns
ST_81: sum_i [1/1] 0.00ns
:0  %sum_i = phi double [ 0.000000e+00, %14 ], [ %sum, %16 ]

ST_81: n_i [1/1] 0.00ns
:1  %n_i = phi i5 [ 0, %14 ], [ %n, %16 ]

ST_81: exitcond_i [1/1] 1.91ns
:2  %exitcond_i = icmp eq i5 %n_i, -6

ST_81: empty_21 [1/1] 0.00ns
:3  %empty_21 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 26, i64 26, i64 26)

ST_81: n [1/1] 1.72ns
:4  %n = add i5 %n_i, 1

ST_81: stg_348 [1/1] 0.00ns
:5  br i1 %exitcond_i, label %17, label %16

ST_81: tmp_29_i [1/1] 0.00ns
:0  %tmp_29_i = zext i5 %n_i to i64

ST_81: e_addr_3 [1/1] 0.00ns
:1  %e_addr_3 = getelementptr [26 x double]* @e, i64 0, i64 %tmp_29_i

ST_81: e_load_3 [2/2] 2.71ns
:2  %e_load_3 = load double* %e_addr_3, align 8

ST_81: tmp_29_i_trn_cast [1/1] 0.00ns
:4  %tmp_29_i_trn_cast = zext i5 %n_i to i9

ST_81: dctMatrix_addr4 [1/1] 1.84ns
:5  %dctMatrix_addr4 = add i9 %tmp_29_i_trn_cast, %phi_mul

ST_81: tmp_32_i [6/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E

ST_81: p_addr1 [1/1] 2.44ns
:1  %p_addr1 = add i32 %tmp_27_i_trn2, %p_addr


 <State 82>: 2.71ns
ST_82: e_load_3 [1/2] 2.71ns
:2  %e_load_3 = load double* %e_addr_3, align 8


 <State 83>: 7.79ns
ST_83: tmp_30_i [6/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3


 <State 84>: 7.79ns
ST_84: tmp_30_i [5/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3


 <State 85>: 7.79ns
ST_85: tmp_30_i [4/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3


 <State 86>: 7.79ns
ST_86: tmp_30_i [3/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3


 <State 87>: 7.79ns
ST_87: tmp_30_i [2/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3

ST_87: tmp_56 [1/1] 0.00ns
:6  %tmp_56 = zext i9 %dctMatrix_addr4 to i64

ST_87: dctMatrix_addr [1/1] 0.00ns
:7  %dctMatrix_addr = getelementptr [676 x double]* @dctMatrix, i64 0, i64 %tmp_56

ST_87: dctMatrix_load [2/2] 2.39ns
:8  %dctMatrix_load = load double* %dctMatrix_addr, align 8


 <State 88>: 7.79ns
ST_88: tmp_30_i [1/6] 7.79ns
:3  %tmp_30_i = fmul double %s, %e_load_3

ST_88: dctMatrix_load [1/2] 2.39ns
:8  %dctMatrix_load = load double* %dctMatrix_addr, align 8


 <State 89>: 7.79ns
ST_89: tmp_31_i [6/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 90>: 7.79ns
ST_90: tmp_31_i [5/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 91>: 7.79ns
ST_91: tmp_31_i [4/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 92>: 7.79ns
ST_92: tmp_31_i [3/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 93>: 7.79ns
ST_93: tmp_31_i [2/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 94>: 7.79ns
ST_94: tmp_31_i [1/6] 7.79ns
:9  %tmp_31_i = fmul double %tmp_30_i, %dctMatrix_load


 <State 95>: 8.23ns
ST_95: sum [5/5] 8.23ns
:10  %sum = fadd double %sum_i, %tmp_31_i


 <State 96>: 8.23ns
ST_96: sum [4/5] 8.23ns
:10  %sum = fadd double %sum_i, %tmp_31_i


 <State 97>: 8.23ns
ST_97: sum [3/5] 8.23ns
:10  %sum = fadd double %sum_i, %tmp_31_i


 <State 98>: 8.23ns
ST_98: sum [2/5] 8.23ns
:10  %sum = fadd double %sum_i, %tmp_31_i


 <State 99>: 8.23ns
ST_99: sum [1/5] 8.23ns
:10  %sum = fadd double %sum_i, %tmp_31_i

ST_99: stg_378 [1/1] 0.00ns
:11  br label %15


 <State 100>: 7.79ns
ST_100: tmp_32_i [5/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E


 <State 101>: 7.79ns
ST_101: tmp_32_i [4/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E


 <State 102>: 7.79ns
ST_102: tmp_32_i [3/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E


 <State 103>: 7.79ns
ST_103: tmp_32_i [2/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E


 <State 104>: 7.79ns
ST_104: tmp_32_i [1/6] 7.79ns
:0  %tmp_32_i = fmul double %sum_i, 0x3FD1C01AA03BE89E


 <State 105>: 2.71ns
ST_105: tmp_55 [1/1] 0.00ns
:2  %tmp_55 = sext i32 %p_addr1 to i64

ST_105: ret_addr [1/1] 0.00ns
:3  %ret_addr = getelementptr [882 x double]* %ret, i64 0, i64 %tmp_55

ST_105: stg_386 [1/1] 2.71ns
:4  store double %tmp_32_i, double* %ret_addr, align 8

ST_105: stg_387 [1/1] 0.00ns
:5  br label %.preheader4



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
