
#include "zed_audio.h"
#include <stdio.h>
#include <xil_io.h>
#include <sleep.h>
#include "xiicps.h"
#include <xil_printf.h>
#include <xparameters.h>
#include "xvoicerec.h"
#include "xuartps.h"
#include "xscutimer.h"
#include "xscugic.h"

#define MAX_AMPLITUDE 16777215.0 //max amplitude for audio stream, (2^24)-1

unsigned char IicConfig(unsigned int DeviceIdPS);
void AudioPllConfig();
void AudioWriteToReg(unsigned char u8RegAddr, unsigned char u8Data);
void AudioConfigureJacks();
void LineinLineoutConfig();

XIicPs Iic;

typedef short   Xint16;
typedef long    Xint32;

// HLS VoiceRec HW instance
XVoicerec HlsVoiceRec;
//Interrupt Controller Instance
XScuGic ScuGic;
//Global variables used by ISR
int ResultAvailHlsVoiceRec;

int hls_voicerec_init(XVoicerec *hls_voiceRecPtr)
{
   XVoicerec_Config *cfgPtr;
   int status;

   cfgPtr = XVoicerec_LookupConfig(XPAR_VOICEREC_0_DEVICE_ID);
   if (!cfgPtr) {
      print("ERROR: Lookup of Voice Rec configuration failed.\n\r");
      return XST_FAILURE;
   }
   status = XVoicerec_CfgInitialize(hls_voiceRecPtr, cfgPtr);
   if (status != XST_SUCCESS) {
      print("ERROR: Could not initialize Voice Rec.\n\r");
      return XST_FAILURE;
   }

   return status;
}

void hls_voicerec_isr(void *InstancePtr)
{
     XVoicerec *pAccelerator = (XVoicerec *)InstancePtr;

     // clear the local interrupt
     XVoicerec_InterruptClear(pAccelerator,1);

     ResultAvailHlsVoiceRec = 1;
}

int setup_interrupt()
{
     //This functions sets up the interrupt on the ARM
     int result;
     XScuGic_Config *pCfg = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
     if (pCfg == NULL){
        print("Interrupt Configuration Lookup Failed\n\r");
        return XST_FAILURE;
     }
     result = XScuGic_CfgInitialize(&ScuGic,pCfg,pCfg->CpuBaseAddress);
     if(result != XST_SUCCESS){
        return result;
     }
     // self test
     result = XScuGic_SelfTest(&ScuGic);
     if(result != XST_SUCCESS){
        return result;
     }
     // Initialize the exception handler
     Xil_ExceptionInit();
     // Register the exception handler
     Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,&ScuGic);
     //Enable the exception handler
     Xil_ExceptionEnable();
     // Connect the Voice Rec ISR to the exception table
     result = XScuGic_Connect(&ScuGic,XPAR_FABRIC_VOICEREC_0_INTERRUPT_INTR,(Xil_InterruptHandler)hls_voicerec_isr,&HlsVoiceRec);
     if(result != XST_SUCCESS){
        return result;
     }

     // Enable the Voice Rec ISR
     XScuGic_Enable(&ScuGic,XPAR_FABRIC_VOICEREC_0_INTERRUPT_INTR);

     return XST_SUCCESS;
}

void read_audio(unsigned long* left, unsigned long* right) {
	unsigned long u32Temp;

	do //wait for RX data to become available
	{
	  u32Temp = Xil_In32(I2S_STATUS_REG);
	} while ( u32Temp == 0);

	Xil_Out32(I2S_STATUS_REG, 0x00000001); //Clear data rdy bit

	*left = Xil_In32(I2S_DATA_RX_L_REG);
	*right = Xil_In32(I2S_DATA_RX_R_REG);
}

void run_voice_recognition(void)
{
  unsigned long u32DataL, u32DataR, u32Data;
  int sw_check;
  int switch_state, prev_switch_state;
  unsigned int sampleNum;
  float audio_float;
  u32* audio_sample;
  u32 classification;

  int print_count =0;

  //set initial state of switch SW0
  sw_check = Xil_In32(XPAR_AXI_GPIO_0_BASEADDR+8);
  prev_switch_state = sw_check & 0x01;
  switch_state = prev_switch_state;

  while (1)
  {
	//throw data away until switch changes
	while(switch_state == prev_switch_state)
	{
		//read audio data
        read_audio(&u32DataL, &u32DataR);

        //send audio data back out
		Xil_Out32(I2S_DATA_TX_L_REG, u32DataL);
		Xil_Out32(I2S_DATA_TX_R_REG, u32DataR);

		//update switch state
		sw_check = Xil_In32(XPAR_AXI_GPIO_0_BASEADDR+8);
		switch_state = sw_check & 0x01;

		//debug print statement
		if (++print_count == 160000)
		{
			print_count = 0;
			printf("Waiting for switch...\n");
		}
	}

	//save new switch state
	prev_switch_state = switch_state;
    printf("Switch flipped, recording for 2 seconds...\n");

	//switch has been thrown, send 2 seconds worth of sound data
	for(sampleNum = 0; sampleNum < 96000; sampleNum ++) {

		//read audio data
        read_audio(&u32DataL, &u32DataR);

        //only utilize one channel for voice recognition
        u32Data = u32DataL;

        //send audio data back out
		Xil_Out32(I2S_DATA_TX_L_REG, u32DataL);
		Xil_Out32(I2S_DATA_TX_R_REG, u32DataR);


		if(sampleNum%6 == 0) //only use every 6th sample
		{
            //re-map sample to a double value between 0 and 1
			audio_float = ( (float)u32Data ) / MAX_AMPLITUDE;
			printf("raw: %08X\n", u32Data);
			//printf("sample: %f\n", audio_float);
			audio_sample = (u32*)(&audio_float);

			//send sample to voice rec system
			XVoicerec_Set_new_sample(&HlsVoiceRec, *audio_sample);

			//fire up the voice recognition:
			ResultAvailHlsVoiceRec = 0;
			XVoicerec_Start(&HlsVoiceRec);

			if(sampleNum/6 == 15999) printf("Waiting for classification...\n\n");

            //wait for system to complete
			while(!ResultAvailHlsVoiceRec);

			if(sampleNum/6 == 15999) {
				classification = XVoicerec_Get_return(&HlsVoiceRec);
				printf("Classified as %d\n\n", (int)classification);
//				switch(classification) {
//				case 0:	 printf("Go Forward.\n\n");
//						 break;
//				case 1:	 printf("Turn Right.\n\n");
//						 break;
//				case 2:	 printf("Turn Left.\n\n");
//						 break;
//				case 3:	 printf("Reverse.\n\n");
//						 break;
//				default: printf("Invalid classification\n\n");
//						 break;
//				}
			}

		}


	}

  }
}


int main(void)
{
  int status;

  //Configure the IIC data structure
  IicConfig(XPAR_XIICPS_0_DEVICE_ID);

  //Configure the Audio Codec's PLL
  AudioPllConfig();

  //Configure the Line in and Line out ports.
  //Call LineInLineOutConfig() for a configuration that
  //enables the HP jack too.
  AudioConfigureJacks();

  printf("ADAU1761 configured\n\r");

  // Setup the FIR instances
  status=hls_voicerec_init(&HlsVoiceRec);
    if(status != XST_SUCCESS){
     print("HLS peripheral setup failed\n\r");
     return(-1);
    }

    //Setup the interrupt
    status = setup_interrupt();
    if(status != XST_SUCCESS){
       print("Interrupt setup failed\n\r");
       return(-1);
    }

    // Enable Global and instance interrupts
    XVoicerec_InterruptEnable(&HlsVoiceRec,1);
    XVoicerec_InterruptGlobalEnable(&HlsVoiceRec);

  ResultAvailHlsVoiceRec = 0;

  run_voice_recognition(); // switch SW0 to record 2 second command
  return 0;
}

unsigned char IicConfig(unsigned int DeviceIdPS)
{

  XIicPs_Config *Config;
  int Status;

  //Initialize the IIC driver so that it's ready to use
  //Look up the configuration in the config table, then initialize it.
  Config = XIicPs_LookupConfig(DeviceIdPS);
  if(NULL == Config) {
    return XST_FAILURE;
  }

  Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
  if(Status != XST_SUCCESS) {
    return XST_FAILURE;
  }

  //Set the IIC serial clock rate.
  XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

  return XST_SUCCESS;
}


/******************************************************************************
 * Configures audio codes's internal PLL. With MCLK = 8 MHz it configures the
 * PLL for a VCO frequency = 49.152 MHz, and an audio sample rate of 48 KHz.
 *
 * @param none.
 *
 * @return  none.
 *****************************************************************************/
void AudioPllConfig() {

  unsigned char u8TxData[8], u8RxData[6];

  AudioWriteToReg(R0_CLOCK_CONTROL, 0x0E);

  // Write 6 bytes to R1
  u8TxData[0] = 0x40;
  u8TxData[1] = 0x02;
  u8TxData[2] = 0x02; // byte 1
  u8TxData[3] = 0x71; // byte 2
  u8TxData[4] = 0x02; // byte 3
  u8TxData[5] = 0x3C; // byte 4
  u8TxData[6] = 0x21; // byte 5
  u8TxData[7] = 0x01; // byte 6


  XIicPs_MasterSendPolled(&Iic, u8TxData, 8, (IIC_SLAVE_ADDR >> 1));
  while(XIicPs_BusIsBusy(&Iic));

  // Poll PLL Lock bit
  u8TxData[0] = 0x40;
  u8TxData[1] = 0x02;

  do {
    XIicPs_MasterSendPolled(&Iic, u8TxData, 2, (IIC_SLAVE_ADDR >> 1));
    while(XIicPs_BusIsBusy(&Iic));
    XIicPs_MasterRecvPolled(&Iic, u8RxData, 6, (IIC_SLAVE_ADDR >> 1));
    while(XIicPs_BusIsBusy(&Iic));
  }
  while((u8RxData[5] & 0x02) == 0);

  AudioWriteToReg(R0_CLOCK_CONTROL, 0x0F);//COREN
}

/******************************************************************************
 * Function to write one byte (8-bits) to one of the registers from the audio
 * controller.
 *
 * @param u8RegAddr is the LSB part of the register address (0x40xx).
 * @param u8Data is the data byte to write.
 *
 * @return  none.
 *****************************************************************************/
void AudioWriteToReg(unsigned char u8RegAddr, unsigned char u8Data) {

  unsigned char u8TxData[3];

  u8TxData[0] = 0x40;
  u8TxData[1] = u8RegAddr;
  u8TxData[2] = u8Data;

  XIicPs_MasterSendPolled(&Iic, u8TxData, 3, (IIC_SLAVE_ADDR >> 1));
  while(XIicPs_BusIsBusy(&Iic));
}

/******************************************************************************
 * Configures audio codes's various mixers, ADC's, DAC's, and amplifiers to
 * accept stereo input from line in and push stereo output to line out
 *
 * @param none.
 *
 * @return  none.
 *****************************************************************************/
void AudioConfigureJacks()
{
  AudioWriteToReg(R4_RECORD_MIXER_LEFT_CONTROL_0, 0x01); //enable mixer 1
  AudioWriteToReg(R5_RECORD_MIXER_LEFT_CONTROL_1, 0x07); //unmute Left channel of line in into mxr 1 and set gain to 6 db
  AudioWriteToReg(R6_RECORD_MIXER_RIGHT_CONTROL_0, 0x01); //enable mixer 2
  AudioWriteToReg(R7_RECORD_MIXER_RIGHT_CONTROL_1, 0x07); //unmute Right channel of line in into mxr 2 and set gain to 6 db
  AudioWriteToReg(R19_ADC_CONTROL, 0x13); //enable ADCs

  AudioWriteToReg(R22_PLAYBACK_MIXER_LEFT_CONTROL_0, 0x21); //unmute Left DAC into Mxr 3; enable mxr 3
  AudioWriteToReg(R24_PLAYBACK_MIXER_RIGHT_CONTROL_0, 0x41); //unmute Right DAC into Mxr4; enable mxr 4
  AudioWriteToReg(R26_PLAYBACK_LR_MIXER_LEFT_LINE_OUTPUT_CONTROL, 0x05); //unmute Mxr3 into Mxr5 and set gain to 6db; enable mxr 5
  AudioWriteToReg(R27_PLAYBACK_LR_MIXER_RIGHT_LINE_OUTPUT_CONTROL, 0x11); //unmute Mxr4 into Mxr6 and set gain to 6db; enable mxr 6
  AudioWriteToReg(R29_PLAYBACK_HEADPHONE_LEFT_VOLUME_CONTROL, 0x00);//Mute Left channel of HP port (LHP)
  AudioWriteToReg(R30_PLAYBACK_HEADPHONE_RIGHT_VOLUME_CONTROL, 0x00); //Mute Right channel of HP port (LHP)
  AudioWriteToReg(R31_PLAYBACK_LINE_OUTPUT_LEFT_VOLUME_CONTROL, 0xE6); //set LOUT volume (0db); unmute left channel of Line out port; set Line out port to line out mode
  AudioWriteToReg(R32_PLAYBACK_LINE_OUTPUT_RIGHT_VOLUME_CONTROL, 0xE6); // set ROUT volume (0db); unmute right channel of Line out port; set Line out port to line out mode
  AudioWriteToReg(R35_PLAYBACK_POWER_MANAGEMENT, 0x03); //enable left and right channel playback (not sure exactly what this does...)
  AudioWriteToReg(R36_DAC_CONTROL_0, 0x03); //enable both DACs

  AudioWriteToReg(R58_SERIAL_INPUT_ROUTE_CONTROL, 0x01); //Connect I2S serial port output (SDATA_O) to DACs
  AudioWriteToReg(R59_SERIAL_OUTPUT_ROUTE_CONTROL, 0x01); //connect I2S serial port input (SDATA_I) to ADCs

  AudioWriteToReg(R65_CLOCK_ENABLE_0, 0x7F); //Enable clocks
  AudioWriteToReg(R66_CLOCK_ENABLE_1, 0x03); //Enable rest of clocks
}

/******************************************************************************
 * Configures Line-In input, ADC's, DAC's, Line-Out and HP-Out.
 *
 * @param   none.
 *
 * @return  none.
 *****************************************************************************/
void LineinLineoutConfig() {

  AudioWriteToReg(R17_CONVERTER_CONTROL_0, 0x06);//96 kHz
  AudioWriteToReg(R64_SERIAL_PORT_SAMPLING_RATE, 0x06);//96 kHz
  AudioWriteToReg(R19_ADC_CONTROL, 0x13);
  AudioWriteToReg(R36_DAC_CONTROL_0, 0x03);
  AudioWriteToReg(R35_PLAYBACK_POWER_MANAGEMENT, 0x03);
  AudioWriteToReg(R58_SERIAL_INPUT_ROUTE_CONTROL, 0x01);
  AudioWriteToReg(R59_SERIAL_OUTPUT_ROUTE_CONTROL, 0x01);
  AudioWriteToReg(R65_CLOCK_ENABLE_0, 0x7F);
  AudioWriteToReg(R66_CLOCK_ENABLE_1, 0x03);

  AudioWriteToReg(R4_RECORD_MIXER_LEFT_CONTROL_0, 0x01);
  AudioWriteToReg(R5_RECORD_MIXER_LEFT_CONTROL_1, 0x05);//0 dB gain
  AudioWriteToReg(R6_RECORD_MIXER_RIGHT_CONTROL_0, 0x01);
  AudioWriteToReg(R7_RECORD_MIXER_RIGHT_CONTROL_1, 0x05);//0 dB gain

  AudioWriteToReg(R22_PLAYBACK_MIXER_LEFT_CONTROL_0, 0x21);
  AudioWriteToReg(R24_PLAYBACK_MIXER_RIGHT_CONTROL_0, 0x41);
  AudioWriteToReg(R26_PLAYBACK_LR_MIXER_LEFT_LINE_OUTPUT_CONTROL, 0x03);//0 dB
  AudioWriteToReg(R27_PLAYBACK_LR_MIXER_RIGHT_LINE_OUTPUT_CONTROL, 0x09);//0 dB
  AudioWriteToReg(R29_PLAYBACK_HEADPHONE_LEFT_VOLUME_CONTROL, 0xE7);//0 dB
  AudioWriteToReg(R30_PLAYBACK_HEADPHONE_RIGHT_VOLUME_CONTROL, 0xE7);//0 dB
  AudioWriteToReg(R31_PLAYBACK_LINE_OUTPUT_LEFT_VOLUME_CONTROL, 0xE6);//0 dB
  AudioWriteToReg(R32_PLAYBACK_LINE_OUTPUT_RIGHT_VOLUME_CONTROL, 0xE6);//0 dB
}

