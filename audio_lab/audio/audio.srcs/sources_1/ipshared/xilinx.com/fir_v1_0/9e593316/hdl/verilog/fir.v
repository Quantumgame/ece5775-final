// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.954375,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module fir (
        s_axi_fir_io_AWVALID,
        s_axi_fir_io_AWREADY,
        s_axi_fir_io_AWADDR,
        s_axi_fir_io_WVALID,
        s_axi_fir_io_WREADY,
        s_axi_fir_io_WDATA,
        s_axi_fir_io_WSTRB,
        s_axi_fir_io_ARVALID,
        s_axi_fir_io_ARREADY,
        s_axi_fir_io_ARADDR,
        s_axi_fir_io_RVALID,
        s_axi_fir_io_RREADY,
        s_axi_fir_io_RDATA,
        s_axi_fir_io_RRESP,
        s_axi_fir_io_BVALID,
        s_axi_fir_io_BREADY,
        s_axi_fir_io_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_pp0_stg0_fsm_3 = 3'b11;
parameter    ap_ST_st7_fsm_4 = 3'b100;
parameter    C_S_AXI_FIR_IO_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_FIR_IO_ADDR_WIDTH = 6;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv6_39 = 6'b111001;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv26_3FFFE86 = 26'b11111111111111111010000110;
parameter    ap_const_lv6_3F = 6'b111111;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_FIR_IO_WSTRB_WIDTH = (C_S_AXI_FIR_IO_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_fir_io_AWVALID;
output   s_axi_fir_io_AWREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1 : 0] s_axi_fir_io_AWADDR;
input   s_axi_fir_io_WVALID;
output   s_axi_fir_io_WREADY;
input  [C_S_AXI_FIR_IO_DATA_WIDTH - 1 : 0] s_axi_fir_io_WDATA;
input  [C_S_AXI_FIR_IO_WSTRB_WIDTH - 1 : 0] s_axi_fir_io_WSTRB;
input   s_axi_fir_io_ARVALID;
output   s_axi_fir_io_ARREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1 : 0] s_axi_fir_io_ARADDR;
output   s_axi_fir_io_RVALID;
input   s_axi_fir_io_RREADY;
output  [C_S_AXI_FIR_IO_DATA_WIDTH - 1 : 0] s_axi_fir_io_RDATA;
output  [1:0] s_axi_fir_io_RRESP;
output   s_axi_fir_io_BVALID;
input   s_axi_fir_io_BREADY;
output  [1:0] s_axi_fir_io_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [2:0] ap_CS_fsm = 3'b000;
reg    ap_ready;
wire   [15:0] y;
reg    y_ap_vld;
wire   [15:0] x;
reg    fir_ap_rst;
reg   [5:0] shift_reg_address0;
reg    shift_reg_ce0;
wire   [15:0] shift_reg_q0;
reg   [5:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
reg   [15:0] shift_reg_d1;
wire   [5:0] c_address0;
reg    c_ce0;
wire   [15:0] c_q0;
wire    fir_fir_io_s_axi_U_ap_dummy_ce;
reg   [5:0] i_reg_115;
reg   [36:0] acc1_reg_126;
reg   [15:0] reg_136;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] tmp_3_reg_243;
wire   [36:0] acc_cast_fu_150_p1;
wire   [0:0] tmp_3_fu_154_p2;
reg   [0:0] ap_reg_ppstg_tmp_3_reg_243_pp0_it1;
wire   [5:0] i_1_fu_160_p2;
reg   [5:0] i_1_reg_247;
wire   [63:0] tmp_6_fu_171_p1;
reg   [63:0] tmp_6_reg_257;
reg   [15:0] c_load_reg_267;
wire   [30:0] tmp_2_fu_176_p1;
reg   [30:0] tmp_2_reg_272;
wire   [36:0] acc_2_fu_197_p2;
reg   [5:0] i_phi_fu_119_p4;
wire   [63:0] tmp_s_fu_166_p1;
wire   [15:0] acc_fu_144_p0;
wire   [25:0] acc_fu_144_p2;
wire   [15:0] tmp_1_fu_187_p0;
wire   [15:0] tmp_1_fu_187_p1;
wire   [31:0] tmp_1_fu_187_p2;
wire   [36:0] acc_2_fu_197_p0;
wire   [15:0] tmp_5_fu_206_p0;
wire   [25:0] tmp_5_fu_206_p2;
wire   [30:0] acc_1_fu_216_p1;
wire   [30:0] acc_1_fu_216_p2;
reg   [2:0] ap_NS_fsm;


fir_shift_reg #(
    .DataWidth( 16 ),
    .AddressRange( 58 ),
    .AddressWidth( 6 ))
shift_reg_U(
    .clk( ap_clk ),
    .reset( fir_ap_rst ),
    .address0( shift_reg_address0 ),
    .ce0( shift_reg_ce0 ),
    .q0( shift_reg_q0 ),
    .address1( shift_reg_address1 ),
    .ce1( shift_reg_ce1 ),
    .we1( shift_reg_we1 ),
    .d1( shift_reg_d1 )
);

fir_c #(
    .DataWidth( 16 ),
    .AddressRange( 59 ),
    .AddressWidth( 6 ))
c_U(
    .clk( ap_clk ),
    .reset( fir_ap_rst ),
    .address0( c_address0 ),
    .ce0( c_ce0 ),
    .q0( c_q0 )
);

fir_fir_io_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_FIR_IO_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_FIR_IO_DATA_WIDTH ))
fir_fir_io_s_axi_U(
    .AWVALID( s_axi_fir_io_AWVALID ),
    .AWREADY( s_axi_fir_io_AWREADY ),
    .AWADDR( s_axi_fir_io_AWADDR ),
    .WVALID( s_axi_fir_io_WVALID ),
    .WREADY( s_axi_fir_io_WREADY ),
    .WDATA( s_axi_fir_io_WDATA ),
    .WSTRB( s_axi_fir_io_WSTRB ),
    .ARVALID( s_axi_fir_io_ARVALID ),
    .ARREADY( s_axi_fir_io_ARREADY ),
    .ARADDR( s_axi_fir_io_ARADDR ),
    .RVALID( s_axi_fir_io_RVALID ),
    .RREADY( s_axi_fir_io_RREADY ),
    .RDATA( s_axi_fir_io_RDATA ),
    .RRESP( s_axi_fir_io_RRESP ),
    .BVALID( s_axi_fir_io_BVALID ),
    .BREADY( s_axi_fir_io_BREADY ),
    .BRESP( s_axi_fir_io_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( fir_fir_io_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .y( y ),
    .y_ap_vld( y_ap_vld ),
    .x( x )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_3_fu_154_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_3_reg_243_pp0_it1))) begin
        acc1_reg_126 <= acc_2_fu_197_p2;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        acc1_reg_126 <= acc_cast_fu_150_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_243 == ap_const_lv1_0))) begin
        i_reg_115 <= i_1_reg_247;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        i_reg_115 <= ap_const_lv6_39;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm)) begin
        ap_reg_ppstg_tmp_3_reg_243_pp0_it1 <= tmp_3_reg_243;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_243 == ap_const_lv1_0))) begin
        c_load_reg_267 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_lv1_0 == tmp_3_fu_154_p2))) begin
        i_1_reg_247 <= i_1_fu_160_p2;
        tmp_6_reg_257[0] <= tmp_6_fu_171_p1[0];
tmp_6_reg_257[1] <= tmp_6_fu_171_p1[1];
tmp_6_reg_257[2] <= tmp_6_fu_171_p1[2];
tmp_6_reg_257[3] <= tmp_6_fu_171_p1[3];
tmp_6_reg_257[4] <= tmp_6_fu_171_p1[4];
tmp_6_reg_257[5] <= tmp_6_fu_171_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_243 == ap_const_lv1_0)))) begin
        reg_136 <= shift_reg_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
        tmp_2_reg_272 <= tmp_2_fu_176_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        tmp_3_reg_243 <= tmp_3_fu_154_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// c_ce0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// i_phi_fu_119_p4 assign process. ///
always @ (ap_CS_fsm or i_reg_115 or ap_reg_ppiten_pp0_it1 or tmp_3_reg_243 or i_1_reg_247)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_243 == ap_const_lv1_0))) begin
        i_phi_fu_119_p4 = i_1_reg_247;
    end else begin
        i_phi_fu_119_p4 = i_reg_115;
    end
end

/// shift_reg_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it0 or tmp_s_fu_166_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        shift_reg_address0 = tmp_s_fu_166_p1;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        shift_reg_address0 = ap_const_lv6_39;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

/// shift_reg_address1 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or tmp_6_reg_257)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        shift_reg_address1 = ap_const_lv6_0;
    end else if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        shift_reg_address1 = tmp_6_reg_257;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

/// shift_reg_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0)
begin
    if ((((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)))) begin
        shift_reg_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_ce1 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1)
begin
    if ((((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_ST_st7_fsm_4 == ap_CS_fsm))) begin
        shift_reg_ce1 = ap_const_logic_1;
    end else begin
        shift_reg_ce1 = ap_const_logic_0;
    end
end

/// shift_reg_d1 assign process. ///
always @ (ap_CS_fsm or x or shift_reg_q0 or ap_reg_ppiten_pp0_it1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        shift_reg_d1 = x;
    end else if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        shift_reg_d1 = shift_reg_q0;
    end else begin
        shift_reg_d1 = 'bx;
    end
end

/// shift_reg_we1 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or tmp_3_reg_243)
begin
    if ((((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_243 == ap_const_lv1_0)) | (ap_ST_st7_fsm_4 == ap_CS_fsm))) begin
        shift_reg_we1 = ap_const_logic_1;
    end else begin
        shift_reg_we1 = ap_const_logic_0;
    end
end

/// y_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
        end
        ap_ST_pp0_stg0_fsm_3 : 
        begin
            if (~((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_4;
            end
        end
        ap_ST_st7_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_216_p1 = $signed(tmp_5_fu_206_p2);
assign acc_1_fu_216_p2 = (tmp_2_reg_272 + acc_1_fu_216_p1);
assign acc_2_fu_197_p0 = $signed(tmp_1_fu_187_p2);
assign acc_2_fu_197_p2 = (acc_2_fu_197_p0 + acc1_reg_126);
assign acc_cast_fu_150_p1 = $signed(acc_fu_144_p2);
assign acc_fu_144_p0 = reg_136;
assign acc_fu_144_p2 = ($signed(acc_fu_144_p0) * $signed(-'h17A));
assign c_address0 = tmp_6_fu_171_p1;

/// fir_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    fir_ap_rst = ~ap_rst_n;
end
assign fir_fir_io_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign i_1_fu_160_p2 = (i_phi_fu_119_p4 + ap_const_lv6_3F);
assign tmp_1_fu_187_p0 = c_load_reg_267;
assign tmp_1_fu_187_p1 = reg_136;
assign tmp_1_fu_187_p2 = ($signed(tmp_1_fu_187_p0) * $signed(tmp_1_fu_187_p1));
assign tmp_2_fu_176_p1 = acc1_reg_126[30:0];
assign tmp_3_fu_154_p2 = (i_phi_fu_119_p4 == ap_const_lv6_0? 1'b1: 1'b0);
assign tmp_5_fu_206_p0 = x;
assign tmp_5_fu_206_p2 = ($signed(tmp_5_fu_206_p0) * $signed(-'h17A));
assign tmp_6_fu_171_p1 = $unsigned(i_phi_fu_119_p4);
assign tmp_s_fu_166_p1 = $unsigned(i_1_fu_160_p2);
assign y = {{acc_1_fu_216_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
always @ (posedge ap_clk)
begin
    tmp_6_reg_257[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end



endmodule //fir

