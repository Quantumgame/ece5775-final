-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
generic (
    C_S_AXI_FIR_IO_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_FIR_IO_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_fir_io_AWVALID : IN STD_LOGIC;
    s_axi_fir_io_AWREADY : OUT STD_LOGIC;
    s_axi_fir_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_WVALID : IN STD_LOGIC;
    s_axi_fir_io_WREADY : OUT STD_LOGIC;
    s_axi_fir_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_fir_io_ARVALID : IN STD_LOGIC;
    s_axi_fir_io_ARREADY : OUT STD_LOGIC;
    s_axi_fir_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_RVALID : OUT STD_LOGIC;
    s_axi_fir_io_RREADY : IN STD_LOGIC;
    s_axi_fir_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_fir_io_BVALID : OUT STD_LOGIC;
    s_axi_fir_io_BREADY : IN STD_LOGIC;
    s_axi_fir_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.954375,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv26_3FFFE86 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010000110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_ready : STD_LOGIC;
    signal y : STD_LOGIC_VECTOR (15 downto 0);
    signal y_ap_vld : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_ap_rst : STD_LOGIC;
    signal shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_ce1 : STD_LOGIC;
    signal shift_reg_we1 : STD_LOGIC;
    signal shift_reg_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fir_fir_io_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal i_reg_115 : STD_LOGIC_VECTOR (5 downto 0);
    signal acc1_reg_126 : STD_LOGIC_VECTOR (36 downto 0);
    signal reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal tmp_3_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_cast_fu_150_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal acc_fu_144_p2_temp: signed (26-1 downto 0);
    signal tmp_3_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_243_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_160_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_247 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_257 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_load_reg_267 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_176_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_reg_272 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_2_fu_197_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal i_phi_fu_119_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_fu_144_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_187_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_187_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_fu_197_p0 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_1_fu_187_p2_temp: signed (32-1 downto 0);
    signal tmp_5_fu_206_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_206_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal acc_1_fu_216_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_206_p2_temp: signed (26-1 downto 0);
    signal acc_1_fu_216_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_fir_io_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        y : IN STD_LOGIC_VECTOR (15 downto 0);
        y_ap_vld : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 16,
        AddressRange => 58,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => fir_ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        q0 => shift_reg_q0,
        address1 => shift_reg_address1,
        ce1 => shift_reg_ce1,
        we1 => shift_reg_we1,
        d1 => shift_reg_d1);

    c_U : component fir_c
    generic map (
        DataWidth => 16,
        AddressRange => 59,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => fir_ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    fir_fir_io_s_axi_U : component fir_fir_io_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_FIR_IO_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_FIR_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_fir_io_AWVALID,
        AWREADY => s_axi_fir_io_AWREADY,
        AWADDR => s_axi_fir_io_AWADDR,
        WVALID => s_axi_fir_io_WVALID,
        WREADY => s_axi_fir_io_WREADY,
        WDATA => s_axi_fir_io_WDATA,
        WSTRB => s_axi_fir_io_WSTRB,
        ARVALID => s_axi_fir_io_ARVALID,
        ARREADY => s_axi_fir_io_ARREADY,
        ARADDR => s_axi_fir_io_ARADDR,
        RVALID => s_axi_fir_io_RVALID,
        RREADY => s_axi_fir_io_RREADY,
        RDATA => s_axi_fir_io_RDATA,
        RRESP => s_axi_fir_io_RRESP,
        BVALID => s_axi_fir_io_BVALID,
        BREADY => s_axi_fir_io_BREADY,
        BRESP => s_axi_fir_io_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => fir_fir_io_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        y => y,
        y_ap_vld => y_ap_vld,
        x => x);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_154_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- acc1_reg_126 assign process. --
    acc1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_243_pp0_it1))) then 
                acc1_reg_126 <= acc_2_fu_197_p2;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                acc1_reg_126 <= acc_cast_fu_150_p1;
            end if; 
        end if;
    end process;

    -- i_reg_115 assign process. --
    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_3_reg_243 = ap_const_lv1_0))) then 
                i_reg_115 <= i_1_reg_247;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                i_reg_115 <= ap_const_lv6_39;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then
                ap_reg_ppstg_tmp_3_reg_243_pp0_it1 <= tmp_3_reg_243;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_3_reg_243 = ap_const_lv1_0))) then
                c_load_reg_267 <= c_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_3_fu_154_p2))) then
                i_1_reg_247 <= i_1_fu_160_p2;
                tmp_6_reg_257(0) <= tmp_6_fu_171_p1(0);
    tmp_6_reg_257(1) <= tmp_6_fu_171_p1(1);
    tmp_6_reg_257(2) <= tmp_6_fu_171_p1(2);
    tmp_6_reg_257(3) <= tmp_6_fu_171_p1(3);
    tmp_6_reg_257(4) <= tmp_6_fu_171_p1(4);
    tmp_6_reg_257(5) <= tmp_6_fu_171_p1(5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_3_reg_243 = ap_const_lv1_0)))) then
                reg_136 <= shift_reg_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then
                tmp_2_reg_272 <= tmp_2_fu_176_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                tmp_3_reg_243 <= tmp_3_fu_154_p2;
            end if;
        end if;
    end process;
    tmp_6_reg_257(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_st7_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    
    tmp_5_fu_206_p2_temp <= signed(tmp_5_fu_206_p2);
    acc_1_fu_216_p1 <= std_logic_vector(resize(tmp_5_fu_206_p2_temp,31));

    acc_1_fu_216_p2 <= std_logic_vector(unsigned(tmp_2_reg_272) + unsigned(acc_1_fu_216_p1));
    
    tmp_1_fu_187_p2_temp <= signed(tmp_1_fu_187_p2);
    acc_2_fu_197_p0 <= std_logic_vector(resize(tmp_1_fu_187_p2_temp,37));

    acc_2_fu_197_p2 <= std_logic_vector(unsigned(acc_2_fu_197_p0) + unsigned(acc1_reg_126));
    
    acc_fu_144_p2_temp <= signed(acc_fu_144_p2);
    acc_cast_fu_150_p1 <= std_logic_vector(resize(acc_fu_144_p2_temp,37));

    acc_fu_144_p0 <= reg_136;
    acc_fu_144_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(acc_fu_144_p0) * signed(ap_const_lv26_3FFFE86))), 26));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= tmp_6_fu_171_p1(6 - 1 downto 0);

    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fir_ap_rst assign process. --
    fir_ap_rst_assign_proc : process(ap_rst_n)
    begin
                fir_ap_rst <= not(ap_rst_n);
    end process;

    fir_fir_io_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    i_1_fu_160_p2 <= std_logic_vector(unsigned(i_phi_fu_119_p4) + unsigned(ap_const_lv6_3F));

    -- i_phi_fu_119_p4 assign process. --
    i_phi_fu_119_p4_assign_proc : process(ap_CS_fsm, i_reg_115, ap_reg_ppiten_pp0_it1, tmp_3_reg_243, i_1_reg_247)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_3_reg_243 = ap_const_lv1_0))) then 
            i_phi_fu_119_p4 <= i_1_reg_247;
        else 
            i_phi_fu_119_p4 <= i_reg_115;
        end if; 
    end process;


    -- shift_reg_address0 assign process. --
    shift_reg_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_s_fu_166_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            shift_reg_address0 <= tmp_s_fu_166_p1(6 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            shift_reg_address0 <= ap_const_lv6_39;
        else 
            shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    -- shift_reg_address1 assign process. --
    shift_reg_address1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, tmp_6_reg_257)
    begin
        if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then 
            shift_reg_address1 <= ap_const_lv6_0;
        elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            shift_reg_address1 <= tmp_6_reg_257(6 - 1 downto 0);
        else 
            shift_reg_address1 <= "XXXXXX";
        end if; 
    end process;


    -- shift_reg_ce0 assign process. --
    shift_reg_ce0_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- shift_reg_ce1 assign process. --
    shift_reg_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_ST_st7_fsm_4 = ap_CS_fsm))) then 
            shift_reg_ce1 <= ap_const_logic_1;
        else 
            shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- shift_reg_d1 assign process. --
    shift_reg_d1_assign_proc : process(ap_CS_fsm, x, shift_reg_q0, ap_reg_ppiten_pp0_it1)
    begin
        if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then 
            shift_reg_d1 <= x;
        elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            shift_reg_d1 <= shift_reg_q0;
        else 
            shift_reg_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- shift_reg_we1 assign process. --
    shift_reg_we1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, tmp_3_reg_243)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_3_reg_243 = ap_const_lv1_0)) or (ap_ST_st7_fsm_4 = ap_CS_fsm))) then 
            shift_reg_we1 <= ap_const_logic_1;
        else 
            shift_reg_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_187_p0 <= c_load_reg_267;
    tmp_1_fu_187_p1 <= reg_136;
    tmp_1_fu_187_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_1_fu_187_p0) * signed(tmp_1_fu_187_p1))), 32));
    tmp_2_fu_176_p1 <= acc1_reg_126(31 - 1 downto 0);
    tmp_3_fu_154_p2 <= "1" when (i_phi_fu_119_p4 = ap_const_lv6_0) else "0";
    tmp_5_fu_206_p0 <= x;
    tmp_5_fu_206_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_5_fu_206_p0) * signed(ap_const_lv26_3FFFE86))), 26));
    tmp_6_fu_171_p1 <= std_logic_vector(resize(unsigned(i_phi_fu_119_p4),64));
    tmp_s_fu_166_p1 <= std_logic_vector(resize(unsigned(i_1_fu_160_p2),64));
    y <= acc_1_fu_216_p2(30 downto 15);

    -- y_ap_vld assign process. --
    y_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
