// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_shift_reg.h"
#include "fir_c.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_in< sc_lv<16> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    fir_c* c_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<6> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<16> > shift_reg_d0;
    sc_signal< sc_lv<16> > shift_reg_q0;
    sc_signal< sc_lv<6> > c_address0;
    sc_signal< sc_logic > c_ce0;
    sc_signal< sc_lv<16> > c_q0;
    sc_signal< sc_lv<16> > reg_116;
    sc_signal< sc_lv<37> > acc_cast_fu_130_p1;
    sc_signal< sc_lv<6> > i_1_fu_144_p2;
    sc_signal< sc_lv<6> > i_1_reg_227;
    sc_signal< sc_lv<1> > tmp_2_fu_138_p2;
    sc_signal< sc_lv<64> > tmp_1_fu_155_p1;
    sc_signal< sc_lv<64> > tmp_1_reg_237;
    sc_signal< sc_lv<16> > c_load_reg_247;
    sc_signal< sc_lv<37> > acc_2_fu_207_p2;
    sc_signal< sc_lv<37> > acc1_reg_94;
    sc_signal< sc_lv<6> > i_reg_104;
    sc_signal< sc_lv<64> > tmp_9_fu_150_p1;
    sc_signal< sc_lv<16> > acc_fu_124_p0;
    sc_signal< sc_lv<26> > acc_fu_124_p2;
    sc_signal< sc_lv<16> > tmp_4_fu_163_p0;
    sc_signal< sc_lv<26> > tmp_4_fu_163_p2;
    sc_signal< sc_lv<31> > tmp_fu_134_p1;
    sc_signal< sc_lv<31> > acc_1_fu_173_p1;
    sc_signal< sc_lv<31> > acc_1_fu_173_p2;
    sc_signal< sc_lv<16> > tmp_8_fu_197_p0;
    sc_signal< sc_lv<16> > tmp_8_fu_197_p1;
    sc_signal< sc_lv<32> > tmp_8_fu_197_p2;
    sc_signal< sc_lv<37> > acc_2_fu_207_p0;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_st5_fsm_4;
    static const sc_lv<3> ap_ST_st6_fsm_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_39;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<26> ap_const_lv26_3FFFE86;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_173_p1();
    void thread_acc_1_fu_173_p2();
    void thread_acc_2_fu_207_p0();
    void thread_acc_2_fu_207_p2();
    void thread_acc_cast_fu_130_p1();
    void thread_acc_fu_124_p0();
    void thread_acc_fu_124_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_i_1_fu_144_p2();
    void thread_shift_reg_address0();
    void thread_shift_reg_ce0();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_1_fu_155_p1();
    void thread_tmp_2_fu_138_p2();
    void thread_tmp_4_fu_163_p0();
    void thread_tmp_4_fu_163_p2();
    void thread_tmp_8_fu_197_p0();
    void thread_tmp_8_fu_197_p1();
    void thread_tmp_8_fu_197_p2();
    void thread_tmp_9_fu_150_p1();
    void thread_tmp_fu_134_p1();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
