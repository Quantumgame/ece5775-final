// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> fir::ap_ST_st1_fsm_0 = "000";
const sc_lv<3> fir::ap_ST_st2_fsm_1 = "1";
const sc_lv<3> fir::ap_ST_st3_fsm_2 = "10";
const sc_lv<3> fir::ap_ST_st4_fsm_3 = "11";
const sc_lv<3> fir::ap_ST_st5_fsm_4 = "100";
const sc_lv<3> fir::ap_ST_st6_fsm_5 = "101";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<6> fir::ap_const_lv6_39 = "111001";
const sc_lv<6> fir::ap_const_lv6_0 = "000000";
const sc_lv<26> fir::ap_const_lv26_3FFFE86 = "11111111111111111010000110";
const sc_lv<6> fir::ap_const_lv6_3F = "111111";
const sc_lv<32> fir::ap_const_lv32_F = "1111";
const sc_lv<32> fir::ap_const_lv32_1E = "11110";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    c_U = new fir_c("c_U");
    c_U->clk(ap_clk);
    c_U->reset(ap_rst);
    c_U->address0(c_address0);
    c_U->ce0(c_ce0);
    c_U->q0(c_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_1_fu_173_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_fu_163_p2 );

    SC_METHOD(thread_acc_1_fu_173_p2);
    sensitive << ( tmp_fu_134_p1 );
    sensitive << ( acc_1_fu_173_p1 );

    SC_METHOD(thread_acc_2_fu_207_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_8_fu_197_p2 );

    SC_METHOD(thread_acc_2_fu_207_p2);
    sensitive << ( acc1_reg_94 );
    sensitive << ( acc_2_fu_207_p0 );

    SC_METHOD(thread_acc_cast_fu_130_p1);
    sensitive << ( acc_fu_124_p2 );

    SC_METHOD(thread_acc_fu_124_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_116 );

    SC_METHOD(thread_acc_fu_124_p2);
    sensitive << ( acc_fu_124_p0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_fu_155_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_i_1_fu_144_p2);
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );
    sensitive << ( tmp_1_reg_237 );
    sensitive << ( tmp_9_fu_150_p1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );
    sensitive << ( shift_reg_q0 );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_tmp_1_fu_155_p1);
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_tmp_2_fu_138_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( i_reg_104 );

    SC_METHOD(thread_tmp_4_fu_163_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );

    SC_METHOD(thread_tmp_4_fu_163_p2);
    sensitive << ( tmp_4_fu_163_p0 );

    SC_METHOD(thread_tmp_8_fu_197_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( c_load_reg_247 );

    SC_METHOD(thread_tmp_8_fu_197_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_116 );

    SC_METHOD(thread_tmp_8_fu_197_p2);
    sensitive << ( tmp_8_fu_197_p0 );
    sensitive << ( tmp_8_fu_197_p1 );

    SC_METHOD(thread_tmp_9_fu_150_p1);
    sensitive << ( i_1_fu_144_p2 );

    SC_METHOD(thread_tmp_fu_134_p1);
    sensitive << ( acc1_reg_94 );

    SC_METHOD(thread_y);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );
    sensitive << ( acc_1_fu_173_p2 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_138_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
    sc_trace(mVcdFile, x, "(port)x");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, reg_116, "reg_116");
    sc_trace(mVcdFile, acc_cast_fu_130_p1, "acc_cast_fu_130_p1");
    sc_trace(mVcdFile, i_1_fu_144_p2, "i_1_fu_144_p2");
    sc_trace(mVcdFile, i_1_reg_227, "i_1_reg_227");
    sc_trace(mVcdFile, tmp_2_fu_138_p2, "tmp_2_fu_138_p2");
    sc_trace(mVcdFile, tmp_1_fu_155_p1, "tmp_1_fu_155_p1");
    sc_trace(mVcdFile, tmp_1_reg_237, "tmp_1_reg_237");
    sc_trace(mVcdFile, c_load_reg_247, "c_load_reg_247");
    sc_trace(mVcdFile, acc_2_fu_207_p2, "acc_2_fu_207_p2");
    sc_trace(mVcdFile, acc1_reg_94, "acc1_reg_94");
    sc_trace(mVcdFile, i_reg_104, "i_reg_104");
    sc_trace(mVcdFile, tmp_9_fu_150_p1, "tmp_9_fu_150_p1");
    sc_trace(mVcdFile, acc_fu_124_p0, "acc_fu_124_p0");
    sc_trace(mVcdFile, acc_fu_124_p2, "acc_fu_124_p2");
    sc_trace(mVcdFile, tmp_4_fu_163_p0, "tmp_4_fu_163_p0");
    sc_trace(mVcdFile, tmp_4_fu_163_p2, "tmp_4_fu_163_p2");
    sc_trace(mVcdFile, tmp_fu_134_p1, "tmp_fu_134_p1");
    sc_trace(mVcdFile, acc_1_fu_173_p1, "acc_1_fu_173_p1");
    sc_trace(mVcdFile, acc_1_fu_173_p2, "acc_1_fu_173_p2");
    sc_trace(mVcdFile, tmp_8_fu_197_p0, "tmp_8_fu_197_p0");
    sc_trace(mVcdFile, tmp_8_fu_197_p1, "tmp_8_fu_197_p1");
    sc_trace(mVcdFile, tmp_8_fu_197_p2, "tmp_8_fu_197_p2");
    sc_trace(mVcdFile, acc_2_fu_207_p0, "acc_2_fu_207_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete c_U;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,3,3>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        acc1_reg_94 = acc_2_fu_207_p2.read();
    } else if (esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        acc1_reg_94 = acc_cast_fu_130_p1.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,3,3>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        i_reg_104 = i_1_reg_227.read();
    } else if (esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        i_reg_104 = ap_const_lv6_39;
    }
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        c_load_reg_247 = c_q0.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        i_1_reg_227 = i_1_fu_144_p2.read();
        tmp_1_reg_237 = tmp_1_fu_155_p1.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) || esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        reg_116 = shift_reg_q0.read();
    }
}

void fir::thread_acc_1_fu_173_p1() {
    acc_1_fu_173_p1 = esl_sext<31,26>(tmp_4_fu_163_p2.read());
}

void fir::thread_acc_1_fu_173_p2() {
    acc_1_fu_173_p2 = (!tmp_fu_134_p1.read().is_01() || !acc_1_fu_173_p1.read().is_01())? sc_lv<31>(): (sc_bigint<31>(tmp_fu_134_p1.read()) + sc_biguint<31>(acc_1_fu_173_p1.read()));
}

void fir::thread_acc_2_fu_207_p0() {
    acc_2_fu_207_p0 = esl_sext<37,32>(tmp_8_fu_197_p2.read());
}

void fir::thread_acc_2_fu_207_p2() {
    acc_2_fu_207_p2 = (!acc_2_fu_207_p0.read().is_01() || !acc1_reg_94.read().is_01())? sc_lv<37>(): (sc_bigint<37>(acc_2_fu_207_p0.read()) + sc_biguint<37>(acc1_reg_94.read()));
}

void fir::thread_acc_cast_fu_130_p1() {
    acc_cast_fu_130_p1 = esl_sext<37,26>(acc_fu_124_p2.read());
}

void fir::thread_acc_fu_124_p0() {
    acc_fu_124_p0 = reg_116.read();
}

void fir::thread_acc_fu_124_p2() {
    acc_fu_124_p2 = (!acc_fu_124_p0.read().is_01() || !ap_const_lv26_3FFFE86.is_01())? sc_lv<26>(): sc_bigint<16>(acc_fu_124_p0.read()) * sc_bigint<26>(ap_const_lv26_3FFFE86);
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<6>) (tmp_1_fu_155_p1.read());
}

void fir::thread_c_ce0() {
    if (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_i_1_fu_144_p2() {
    i_1_fu_144_p2 = (!i_reg_104.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_bigint<6>(i_reg_104.read()) + sc_biguint<6>(ap_const_lv6_3F));
}

void fir::thread_shift_reg_address0() {
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        shift_reg_address0 =  (sc_lv<6>) (tmp_1_reg_237.read());
    } else if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 = ap_const_lv6_0;
    } else if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 =  (sc_lv<6>) (tmp_9_fu_150_p1.read());
    } else if (esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) {
        shift_reg_address0 = ap_const_lv6_39;
    } else {
        shift_reg_address0 = "XXXXXX";
    }
}

void fir::thread_shift_reg_ce0() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) || 
         (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d0() {
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        shift_reg_d0 = shift_reg_q0.read();
    } else if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        shift_reg_d0 = x.read();
    } else {
        shift_reg_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we0() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) || 
         (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0)))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_1_fu_155_p1() {
    tmp_1_fu_155_p1 = esl_zext<64,6>(i_reg_104.read());
}

void fir::thread_tmp_2_fu_138_p2() {
    tmp_2_fu_138_p2 = (!i_reg_104.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_104.read() == ap_const_lv6_0);
}

void fir::thread_tmp_4_fu_163_p0() {
    tmp_4_fu_163_p0 = x.read();
}

void fir::thread_tmp_4_fu_163_p2() {
    tmp_4_fu_163_p2 = (!tmp_4_fu_163_p0.read().is_01() || !ap_const_lv26_3FFFE86.is_01())? sc_lv<26>(): sc_bigint<16>(tmp_4_fu_163_p0.read()) * sc_bigint<26>(ap_const_lv26_3FFFE86);
}

void fir::thread_tmp_8_fu_197_p0() {
    tmp_8_fu_197_p0 = c_load_reg_247.read();
}

void fir::thread_tmp_8_fu_197_p1() {
    tmp_8_fu_197_p1 = reg_116.read();
}

void fir::thread_tmp_8_fu_197_p2() {
    tmp_8_fu_197_p2 = (!tmp_8_fu_197_p0.read().is_01() || !tmp_8_fu_197_p1.read().is_01())? sc_lv<32>(): sc_bigint<16>(tmp_8_fu_197_p0.read()) * sc_bigint<16>(tmp_8_fu_197_p1.read());
}

void fir::thread_tmp_9_fu_150_p1() {
    tmp_9_fu_150_p1 = esl_zext<64,6>(i_1_fu_144_p2.read());
}

void fir::thread_tmp_fu_134_p1() {
    tmp_fu_134_p1 = acc1_reg_94.read().range(31-1, 0);
}

void fir::thread_y() {
    y = acc_1_fu_173_p2.read().range(30, 15);
}

void fir::thread_y_ap_vld() {
    if ((esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0))) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            if (!esl_seteq<1,1,1>(tmp_2_fu_138_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

