// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_shift_reg.h"
#include "fir_c.h"
#include "fir_fir_io_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_FIR_IO_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_FIR_IO_DATA_WIDTH = 32>
struct fir : public sc_module {
    // Port declarations 20
    sc_in< sc_logic > s_axi_fir_io_AWVALID;
    sc_out< sc_logic > s_axi_fir_io_AWREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_ADDR_WIDTH> > s_axi_fir_io_AWADDR;
    sc_in< sc_logic > s_axi_fir_io_WVALID;
    sc_out< sc_logic > s_axi_fir_io_WREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH> > s_axi_fir_io_WDATA;
    sc_in< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH/8> > s_axi_fir_io_WSTRB;
    sc_in< sc_logic > s_axi_fir_io_ARVALID;
    sc_out< sc_logic > s_axi_fir_io_ARREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_ADDR_WIDTH> > s_axi_fir_io_ARADDR;
    sc_out< sc_logic > s_axi_fir_io_RVALID;
    sc_in< sc_logic > s_axi_fir_io_RREADY;
    sc_out< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH> > s_axi_fir_io_RDATA;
    sc_out< sc_lv<2> > s_axi_fir_io_RRESP;
    sc_out< sc_logic > s_axi_fir_io_BVALID;
    sc_in< sc_logic > s_axi_fir_io_BREADY;
    sc_out< sc_lv<2> > s_axi_fir_io_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    fir_c* c_U;
    fir_fir_io_s_axi<C_S_AXI_FIR_IO_ADDR_WIDTH,C_S_AXI_FIR_IO_DATA_WIDTH>* fir_fir_io_s_axi_U;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<16> > y;
    sc_signal< sc_logic > y_ap_vld;
    sc_signal< sc_lv<16> > x;
    sc_signal< sc_logic > fir_ap_rst;
    sc_signal< sc_lv<6> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_lv<16> > shift_reg_q0;
    sc_signal< sc_lv<6> > shift_reg_address1;
    sc_signal< sc_logic > shift_reg_ce1;
    sc_signal< sc_logic > shift_reg_we1;
    sc_signal< sc_lv<16> > shift_reg_d1;
    sc_signal< sc_lv<6> > c_address0;
    sc_signal< sc_logic > c_ce0;
    sc_signal< sc_lv<16> > c_q0;
    sc_signal< sc_logic > fir_fir_io_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<6> > i_reg_115;
    sc_signal< sc_lv<37> > acc1_reg_126;
    sc_signal< sc_lv<16> > reg_136;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > tmp_3_reg_243;
    sc_signal< sc_lv<37> > acc_cast_fu_150_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_154_p2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_3_reg_243_pp0_it1;
    sc_signal< sc_lv<6> > i_1_fu_160_p2;
    sc_signal< sc_lv<6> > i_1_reg_247;
    sc_signal< sc_lv<64> > tmp_6_fu_171_p1;
    sc_signal< sc_lv<64> > tmp_6_reg_257;
    sc_signal< sc_lv<16> > c_load_reg_267;
    sc_signal< sc_lv<31> > tmp_2_fu_176_p1;
    sc_signal< sc_lv<31> > tmp_2_reg_272;
    sc_signal< sc_lv<37> > acc_2_fu_197_p2;
    sc_signal< sc_lv<6> > i_phi_fu_119_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_166_p1;
    sc_signal< sc_lv<16> > acc_fu_144_p0;
    sc_signal< sc_lv<26> > acc_fu_144_p2;
    sc_signal< sc_lv<16> > tmp_1_fu_187_p0;
    sc_signal< sc_lv<16> > tmp_1_fu_187_p1;
    sc_signal< sc_lv<32> > tmp_1_fu_187_p2;
    sc_signal< sc_lv<37> > acc_2_fu_197_p0;
    sc_signal< sc_lv<16> > tmp_5_fu_206_p0;
    sc_signal< sc_lv<26> > tmp_5_fu_206_p2;
    sc_signal< sc_lv<31> > acc_1_fu_216_p1;
    sc_signal< sc_lv<31> > acc_1_fu_216_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_3;
    static const sc_lv<3> ap_ST_st7_fsm_4;
    static const int C_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_39;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<26> ap_const_lv26_3FFFE86;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_216_p1();
    void thread_acc_1_fu_216_p2();
    void thread_acc_2_fu_197_p0();
    void thread_acc_2_fu_197_p2();
    void thread_acc_cast_fu_150_p1();
    void thread_acc_fu_144_p0();
    void thread_acc_fu_144_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_fir_ap_rst();
    void thread_fir_fir_io_s_axi_U_ap_dummy_ce();
    void thread_i_1_fu_160_p2();
    void thread_i_phi_fu_119_p4();
    void thread_shift_reg_address0();
    void thread_shift_reg_address1();
    void thread_shift_reg_ce0();
    void thread_shift_reg_ce1();
    void thread_shift_reg_d1();
    void thread_shift_reg_we1();
    void thread_tmp_1_fu_187_p0();
    void thread_tmp_1_fu_187_p1();
    void thread_tmp_1_fu_187_p2();
    void thread_tmp_2_fu_176_p1();
    void thread_tmp_3_fu_154_p2();
    void thread_tmp_5_fu_206_p0();
    void thread_tmp_5_fu_206_p2();
    void thread_tmp_6_fu_171_p1();
    void thread_tmp_s_fu_166_p1();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
